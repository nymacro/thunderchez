#(((tag . "function") (name . "SDL_GetPlatform") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_platform.h:188:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int8_t")
    (location . "/usr/include/x86/_types.h:55:22")
    (type
      (tag . ":signed-char")
      (bit-size . 8)
      (bit-alignment . 8)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint8_t")
    (location . "/usr/include/x86/_types.h:56:24")
    (type
      (tag . ":unsigned-char")
      (bit-size . 8)
      (bit-alignment . 8)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int16_t")
    (location . "/usr/include/x86/_types.h:57:17")
    (type
      (tag . ":short")
      (bit-size . 16)
      (bit-alignment . 16)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint16_t")
    (location . "/usr/include/x86/_types.h:58:25")
    (type
      (tag . ":unsigned-short")
      (bit-size . 16)
      (bit-alignment . 16)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int32_t")
    (location . "/usr/include/x86/_types.h:59:15")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint32_t")
    (location . "/usr/include/x86/_types.h:60:23")
    (type
      (tag . ":unsigned-int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int64_t")
    (location . "/usr/include/x86/_types.h:62:16")
    (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint64_t")
    (location . "/usr/include/x86/_types.h:63:24")
    (type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__clock_t")
    (location . "/usr/include/x86/_types.h:75:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__critical_t")
    (location . "/usr/include/x86/_types.h:76:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__double_t")
    (location . "/usr/include/x86/_types.h:78:17")
    (type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__float_t")
    (location . "/usr/include/x86/_types.h:79:16")
    (type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__intfptr_t")
    (location . "/usr/include/x86/_types.h:81:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__intptr_t")
    (location . "/usr/include/x86/_types.h:82:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__intmax_t")
    (location . "/usr/include/x86/_types.h:93:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_fast8_t")
    (location . "/usr/include/x86/_types.h:94:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_fast16_t")
    (location . "/usr/include/x86/_types.h:95:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_fast32_t")
    (location . "/usr/include/x86/_types.h:96:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_fast64_t")
    (location . "/usr/include/x86/_types.h:97:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_least8_t")
    (location . "/usr/include/x86/_types.h:98:18")
    (type (tag . "__int8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_least16_t")
    (location . "/usr/include/x86/_types.h:99:19")
    (type (tag . "__int16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_least32_t")
    (location . "/usr/include/x86/_types.h:100:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__int_least64_t")
    (location . "/usr/include/x86/_types.h:101:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__ptrdiff_t")
    (location . "/usr/include/x86/_types.h:103:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__register_t")
    (location . "/usr/include/x86/_types.h:104:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__segsz_t")
    (location . "/usr/include/x86/_types.h:105:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__size_t")
    (location . "/usr/include/x86/_types.h:106:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__ssize_t")
    (location . "/usr/include/x86/_types.h:107:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__time_t")
    (location . "/usr/include/x86/_types.h:108:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uintfptr_t")
    (location . "/usr/include/x86/_types.h:109:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uintptr_t")
    (location . "/usr/include/x86/_types.h:110:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uintmax_t")
    (location . "/usr/include/x86/_types.h:121:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_fast8_t")
    (location . "/usr/include/x86/_types.h:122:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_fast16_t")
    (location . "/usr/include/x86/_types.h:123:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_fast32_t")
    (location . "/usr/include/x86/_types.h:124:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_fast64_t")
    (location . "/usr/include/x86/_types.h:125:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_least8_t")
    (location . "/usr/include/x86/_types.h:126:19")
    (type (tag . "__uint8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_least16_t")
    (location . "/usr/include/x86/_types.h:127:20")
    (type (tag . "__uint16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_least32_t")
    (location . "/usr/include/x86/_types.h:128:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uint_least64_t")
    (location . "/usr/include/x86/_types.h:129:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__u_register_t")
    (location . "/usr/include/x86/_types.h:131:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__vm_offset_t")
    (location . "/usr/include/x86/_types.h:132:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__vm_paddr_t")
    (location . "/usr/include/x86/_types.h:133:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__vm_size_t")
    (location . "/usr/include/x86/_types.h:134:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "___wchar_t")
    (location . "/usr/include/x86/_types.h:145:14")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__blksize_t")
    (location . "/usr/include/sys/_types.h:40:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__blkcnt_t")
    (location . "/usr/include/sys/_types.h:41:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__clockid_t")
    (location . "/usr/include/sys/_types.h:42:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__fflags_t")
    (location . "/usr/include/sys/_types.h:43:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__fsblkcnt_t")
    (location . "/usr/include/sys/_types.h:44:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__fsfilcnt_t")
    (location . "/usr/include/sys/_types.h:45:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__gid_t")
    (location . "/usr/include/sys/_types.h:46:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__id_t")
    (location . "/usr/include/sys/_types.h:47:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__ino_t")
    (location . "/usr/include/sys/_types.h:48:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__key_t")
    (location . "/usr/include/sys/_types.h:49:15")
    (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__lwpid_t")
    (location . "/usr/include/sys/_types.h:50:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__mode_t")
    (location . "/usr/include/sys/_types.h:51:20")
    (type (tag . "__uint16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__accmode_t")
    (location . "/usr/include/sys/_types.h:52:14")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__nl_item")
    (location . "/usr/include/sys/_types.h:53:14")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__nlink_t")
    (location . "/usr/include/sys/_types.h:54:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__off_t")
    (location . "/usr/include/sys/_types.h:55:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__off64_t")
    (location . "/usr/include/sys/_types.h:56:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__pid_t")
    (location . "/usr/include/sys/_types.h:57:19")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__rlim_t")
    (location . "/usr/include/sys/_types.h:58:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__sa_family_t")
    (location . "/usr/include/sys/_types.h:61:19")
    (type (tag . "__uint8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__socklen_t")
    (location . "/usr/include/sys/_types.h:62:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__suseconds_t")
    (location . "/usr/include/sys/_types.h:63:15")
    (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
  ((tag . "struct") (ns . 0) (name . "__timer") (id . 0)
    (location . "/usr/include/sys/_types.h:64:16")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "__timer_t")
    (location . "/usr/include/sys/_types.h:64:25")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "__timer") (id . 0)
        (location . "/usr/include/sys/_types.h:64:16")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "struct") (ns . 0) (name . "__mq") (id . 0)
    (location . "/usr/include/sys/_types.h:65:16")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "__mqd_t")
    (location . "/usr/include/sys/_types.h:65:22")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "__mq") (id . 0)
        (location . "/usr/include/sys/_types.h:65:16")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "__uid_t")
    (location . "/usr/include/sys/_types.h:66:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__useconds_t")
    (location . "/usr/include/sys/_types.h:67:22")
    (type
      (tag . ":unsigned-int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__cpuwhich_t")
    (location . "/usr/include/sys/_types.h:68:14")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__cpulevel_t")
    (location . "/usr/include/sys/_types.h:69:14")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__cpusetid_t")
    (location . "/usr/include/sys/_types.h:70:14")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__ct_rune_t")
    (location . "/usr/include/sys/_types.h:90:14")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "__rune_t")
    (location . "/usr/include/sys/_types.h:91:21")
    (type (tag . "__ct_rune_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__wint_t")
    (location . "/usr/include/sys/_types.h:92:21")
    (type (tag . "__ct_rune_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__char16_t")
    (location . "/usr/include/sys/_types.h:96:26")
    (type (tag . "__uint_least16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__char32_t")
    (location . "/usr/include/sys/_types.h:97:26")
    (type (tag . "__uint_least32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__max_align_t")
    (location . "/usr/include/sys/_types.h:110:3")
    (type (tag . "struct") (ns . 4294967295) (name . "") (id . 3)
      (location . "/usr/include/sys/_types.h:105:9")
      (bit-size . 256) (bit-alignment . 128)
      (fields
        .
        #(((tag . "field") (name . "__max_align1") (bit-offset . 0) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":long-long")
              (bit-size . 64)
              (bit-alignment . 64)))
          ((tag . "field") (name . "__max_align2") (bit-offset . 128) (bit-size . 128)
            (bit-alignment . 128)
            (type
              (tag . ":long-double")
              (bit-size . 128)
              (bit-alignment . 128)))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "__dev_t")
    (location . "/usr/include/sys/_types.h:112:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__fixpt_t")
    (location . "/usr/include/sys/_types.h:114:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__mbstate_t")
    (location . "/usr/include/sys/_types.h:123:3")
    (type (tag . "union") (ns . 4294967295) (name . "") (id . 4)
      (location . "/usr/include/sys/_types.h:120:9")
      (bit-size . 1024) (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "__mbstate8") (bit-offset . 0) (bit-size . 1024)
            (bit-alignment . 8)
            (type
              (tag . ":array")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))
              (size . 128)))
          ((tag . "field") (name . "_mbstateL") (bit-offset . 0) (bit-size . 64)
            (bit-alignment . 64) (type (tag . "__int64_t")))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "__rman_res_t")
    (location . "/usr/include/sys/_types.h:125:25")
    (type (tag . "__uintmax_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__va_list")
    (location . "/usr/include/sys/_types.h:132:27")
    (type (tag . "__builtin_va_list")))
  ((tag . "typedef")
    (ns . 0)
    (name . "__gnuc_va_list")
    (location . "/usr/include/sys/_types.h:139:20")
    (type (tag . "__va_list")))
  ((tag . "function") (name . "__bswap16_var") (ns . 0)
    (location . "/usr/include/x86/endian.h:94:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_x")
          (type (tag . "__uint16_t")))))
    (return-type (tag . "__uint16_t")))
  ((tag . "function") (name . "__bswap32_var") (ns . 0)
    (location . "/usr/include/x86/endian.h:101:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_x")
          (type (tag . "__uint32_t")))))
    (return-type (tag . "__uint32_t")))
  ((tag . "function") (name . "__bswap64_var") (ns . 0)
    (location . "/usr/include/x86/endian.h:113:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_x")
          (type (tag . "__uint64_t")))))
    (return-type (tag . "__uint64_t")))
  ((tag . "struct") (ns . 0) (name . "pthread") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:46:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_attr") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:47:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_cond") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:48:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_cond_attr") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:49:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_mutex") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:50:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_mutex_attr") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:51:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_once") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:52:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_rwlock") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:53:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_rwlockattr") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:54:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_barrier") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:55:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_barrier_attr") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:56:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "struct") (ns . 0) (name . "pthread_spinlock") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:57:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_t")
    (location . "/usr/include/sys/_pthreadtypes.h:67:27")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "pthread") (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:46:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_attr_t")
    (location . "/usr/include/sys/_pthreadtypes.h:70:31")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 4294967295) (name . "pthread_attr")
        (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:47:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_mutex_t")
    (location . "/usr/include/sys/_pthreadtypes.h:71:32")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 4294967295) (name . "pthread_mutex")
        (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:50:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_mutexattr_t")
    (location . "/usr/include/sys/_pthreadtypes.h:72:36")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 4294967295)
        (name . "pthread_mutex_attr") (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:51:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_cond_t")
    (location . "/usr/include/sys/_pthreadtypes.h:73:31")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 4294967295) (name . "pthread_cond")
        (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:48:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_condattr_t")
    (location . "/usr/include/sys/_pthreadtypes.h:74:35")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 4294967295)
        (name . "pthread_cond_attr") (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:49:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_key_t")
    (location . "/usr/include/sys/_pthreadtypes.h:75:20")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_once_t")
    (location . "/usr/include/sys/_pthreadtypes.h:76:30")
    (type (tag . "struct") (ns . 4294967295) (name . "pthread_once")
      (id . 0)
      (location . "/usr/include/sys/_pthreadtypes.h:52:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_rwlock_t")
    (location . "/usr/include/sys/_pthreadtypes.h:77:33")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 4294967295)
        (name . "pthread_rwlock") (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:53:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_rwlockattr_t")
    (location . "/usr/include/sys/_pthreadtypes.h:78:36")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 129) (name . "pthread_rwlockattr")
        (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:54:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_barrier_t")
    (location . "/usr/include/sys/_pthreadtypes.h:79:34")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "pthread_barrier")
        (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:55:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "struct") (ns . 0) (name . "pthread_barrierattr") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:80:16")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_barrierattr_t")
    (location . "/usr/include/sys/_pthreadtypes.h:80:37")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "pthread_barrierattr")
        (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:80:16")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_spinlock_t")
    (location . "/usr/include/sys/_pthreadtypes.h:81:34")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "pthread_spinlock")
        (id . 0)
        (location . "/usr/include/sys/_pthreadtypes.h:57:8")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_addr_t")
    (location . "/usr/include/sys/_pthreadtypes.h:89:15")
    (type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "typedef")
    (ns . 0)
    (name . "pthread_startroutine_t")
    (location . "/usr/include/sys/_pthreadtypes.h:90:17")
    (type (tag . ":function-pointer")))
  ((tag . "struct") (ns . 0) (name . "pthread_once") (id . 0)
    (location . "/usr/include/sys/_pthreadtypes.h:95:8")
    (bit-size . 128) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "state") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "mutex") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "pthread_mutex_t"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_char")
    (location . "/usr/include/sys/types.h:52:23")
    (type
      (tag . ":unsigned-char")
      (bit-size . 8)
      (bit-alignment . 8)))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_short")
    (location . "/usr/include/sys/types.h:53:24")
    (type
      (tag . ":unsigned-short")
      (bit-size . 16)
      (bit-alignment . 16)))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_int")
    (location . "/usr/include/sys/types.h:54:22")
    (type
      (tag . ":unsigned-int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_long")
    (location . "/usr/include/sys/types.h:55:23")
    (type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "typedef")
    (ns . 0)
    (name . "ushort")
    (location . "/usr/include/sys/types.h:57:24")
    (type
      (tag . ":unsigned-short")
      (bit-size . 16)
      (bit-alignment . 16)))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint")
    (location . "/usr/include/sys/types.h:58:22")
    (type
      (tag . ":unsigned-int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "int8_t")
    (location . "/usr/include/sys/_stdint.h:36:19")
    (type (tag . "__int8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int16_t")
    (location . "/usr/include/sys/_stdint.h:41:20")
    (type (tag . "__int16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int32_t")
    (location . "/usr/include/sys/_stdint.h:46:20")
    (type (tag . "__int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int64_t")
    (location . "/usr/include/sys/_stdint.h:51:20")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint8_t")
    (location . "/usr/include/sys/_stdint.h:56:20")
    (type (tag . "__uint8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint16_t")
    (location . "/usr/include/sys/_stdint.h:61:21")
    (type (tag . "__uint16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint32_t")
    (location . "/usr/include/sys/_stdint.h:66:21")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint64_t")
    (location . "/usr/include/sys/_stdint.h:71:21")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "intptr_t")
    (location . "/usr/include/sys/_stdint.h:76:21")
    (type (tag . "__intptr_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uintptr_t")
    (location . "/usr/include/sys/_stdint.h:80:22")
    (type (tag . "__uintptr_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "intmax_t")
    (location . "/usr/include/sys/_stdint.h:84:21")
    (type (tag . "__intmax_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uintmax_t")
    (location . "/usr/include/sys/_stdint.h:88:22")
    (type (tag . "__uintmax_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_int8_t")
    (location . "/usr/include/sys/types.h:67:19")
    (type (tag . "__uint8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_int16_t")
    (location . "/usr/include/sys/types.h:68:20")
    (type (tag . "__uint16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_int32_t")
    (location . "/usr/include/sys/types.h:69:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_int64_t")
    (location . "/usr/include/sys/types.h:70:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_quad_t")
    (location . "/usr/include/sys/types.h:72:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "quad_t")
    (location . "/usr/include/sys/types.h:73:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "qaddr_t")
    (location . "/usr/include/sys/types.h:74:18")
    (type (tag . ":pointer") (type (tag . "quad_t"))))
  ((tag . "typedef")
    (ns . 0)
    (name . "caddr_t")
    (location . "/usr/include/sys/types.h:76:17")
    (type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "typedef")
    (ns . 0)
    (name . "c_caddr_t")
    (location . "/usr/include/sys/types.h:77:22")
    (type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "typedef")
    (ns . 0)
    (name . "blksize_t")
    (location . "/usr/include/sys/types.h:80:21")
    (type (tag . "__blksize_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cpuwhich_t")
    (location . "/usr/include/sys/types.h:84:22")
    (type (tag . "__cpuwhich_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cpulevel_t")
    (location . "/usr/include/sys/types.h:85:22")
    (type (tag . "__cpulevel_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cpusetid_t")
    (location . "/usr/include/sys/types.h:86:22")
    (type (tag . "__cpusetid_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "blkcnt_t")
    (location . "/usr/include/sys/types.h:89:20")
    (type (tag . "__blkcnt_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "clock_t")
    (location . "/usr/include/sys/types.h:94:19")
    (type (tag . "__clock_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "clockid_t")
    (location . "/usr/include/sys/types.h:99:21")
    (type (tag . "__clockid_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "critical_t")
    (location . "/usr/include/sys/types.h:103:22")
    (type (tag . "__critical_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "daddr_t")
    (location . "/usr/include/sys/types.h:104:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "dev_t")
    (location . "/usr/include/sys/types.h:107:18")
    (type (tag . "__dev_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "fflags_t")
    (location . "/usr/include/sys/types.h:112:20")
    (type (tag . "__fflags_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "fixpt_t")
    (location . "/usr/include/sys/types.h:116:19")
    (type (tag . "__fixpt_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "fsblkcnt_t")
    (location . "/usr/include/sys/types.h:119:22")
    (type (tag . "__fsblkcnt_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "fsfilcnt_t")
    (location . "/usr/include/sys/types.h:120:22")
    (type (tag . "__fsfilcnt_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "gid_t")
    (location . "/usr/include/sys/types.h:125:18")
    (type (tag . "__gid_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "in_addr_t")
    (location . "/usr/include/sys/types.h:130:20")
    (type (tag . "__uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "in_port_t")
    (location . "/usr/include/sys/types.h:135:20")
    (type (tag . "__uint16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "id_t")
    (location . "/usr/include/sys/types.h:140:17")
    (type (tag . "__id_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "ino_t")
    (location . "/usr/include/sys/types.h:145:18")
    (type (tag . "__ino_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "key_t")
    (location . "/usr/include/sys/types.h:150:18")
    (type (tag . "__key_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "lwpid_t")
    (location . "/usr/include/sys/types.h:155:19")
    (type (tag . "__lwpid_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "mode_t")
    (location . "/usr/include/sys/types.h:160:18")
    (type (tag . "__mode_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "accmode_t")
    (location . "/usr/include/sys/types.h:165:21")
    (type (tag . "__accmode_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "nlink_t")
    (location . "/usr/include/sys/types.h:170:19")
    (type (tag . "__nlink_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "off_t")
    (location . "/usr/include/sys/types.h:175:18")
    (type (tag . "__off_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "off64_t")
    (location . "/usr/include/sys/types.h:180:19")
    (type (tag . "__off64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "pid_t")
    (location . "/usr/include/sys/types.h:185:18")
    (type (tag . "__pid_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "register_t")
    (location . "/usr/include/sys/types.h:189:22")
    (type (tag . "__register_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "rlim_t")
    (location . "/usr/include/sys/types.h:192:18")
    (type (tag . "__rlim_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "sbintime_t")
    (location . "/usr/include/sys/types.h:196:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "segsz_t")
    (location . "/usr/include/sys/types.h:198:19")
    (type (tag . "__segsz_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "size_t")
    (location . "/usr/include/sys/types.h:201:18")
    (type (tag . "__size_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "ssize_t")
    (location . "/usr/include/sys/types.h:206:19")
    (type (tag . "__ssize_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "suseconds_t")
    (location . "/usr/include/sys/types.h:211:23")
    (type (tag . "__suseconds_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "time_t")
    (location . "/usr/include/sys/types.h:216:18")
    (type (tag . "__time_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "timer_t")
    (location . "/usr/include/sys/types.h:221:19")
    (type (tag . "__timer_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "mqd_t")
    (location . "/usr/include/sys/types.h:226:17")
    (type (tag . "__mqd_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "u_register_t")
    (location . "/usr/include/sys/types.h:230:24")
    (type (tag . "__u_register_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uid_t")
    (location . "/usr/include/sys/types.h:233:18")
    (type (tag . "__uid_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "useconds_t")
    (location . "/usr/include/sys/types.h:238:22")
    (type (tag . "__useconds_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cap_ioctl_t")
    (location . "/usr/include/sys/types.h:244:23")
    (type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "struct") (ns . 0) (name . "cap_rights") (id . 0)
    (location . "/usr/include/sys/types.h:249:8") (bit-size . 0)
    (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "cap_rights_t")
    (location . "/usr/include/sys/types.h:251:27")
    (type (tag . "struct") (ns . 0) (name . "cap_rights") (id . 0)
      (location . "/usr/include/sys/types.h:249:8") (bit-size . 0)
      (bit-alignment . 0) (fields . #())))
  ((tag . "typedef")
    (ns . 0)
    (name . "kvaddr_t")
    (location . "/usr/include/sys/types.h:260:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "ksize_t")
    (location . "/usr/include/sys/types.h:261:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "vm_offset_t")
    (location . "/usr/include/sys/types.h:263:23")
    (type (tag . "__vm_offset_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "vm_ooffset_t")
    (location . "/usr/include/sys/types.h:264:19")
    (type (tag . "__int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "vm_paddr_t")
    (location . "/usr/include/sys/types.h:265:22")
    (type (tag . "__vm_paddr_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "vm_pindex_t")
    (location . "/usr/include/sys/types.h:266:20")
    (type (tag . "__uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "vm_size_t")
    (location . "/usr/include/sys/types.h:267:21")
    (type (tag . "__vm_size_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "rman_res_t")
    (location . "/usr/include/sys/types.h:269:25")
    (type (tag . "__rman_res_t")))
  ((tag . "function") (name . "__bitcount16") (ns . 0)
    (location . "/usr/include/sys/types.h:324:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_x")
          (type (tag . "__uint16_t")))))
    (return-type (tag . "__uint16_t")))
  ((tag . "function") (name . "__bitcount32") (ns . 0)
    (location . "/usr/include/sys/types.h:335:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_x")
          (type (tag . "__uint32_t")))))
    (return-type (tag . "__uint32_t")))
  ((tag . "function") (name . "__bitcount64") (ns . 0)
    (location . "/usr/include/sys/types.h:348:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_x")
          (type (tag . "__uint64_t")))))
    (return-type (tag . "__uint64_t")))
  ((tag . "struct") (ns . 0) (name . "__sigset") (id . 0)
    (location . "/usr/include/sys/_sigset.h:53:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "__bits") (bit-offset . 0) (bit-size . 128)
          (bit-alignment . 32)
          (type
            (tag . ":array")
            (type (tag . "__uint32_t"))
            (size . 4))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "__sigset_t")
    (location . "/usr/include/sys/_sigset.h:55:3")
    (type (tag . ":struct") (name . "__sigset") (id . 18)))
  ((tag . "struct") (ns . 0) (name . "timeval") (id . 0)
    (location . "/usr/include/sys/_timeval.h:49:8")
    (bit-size . 128) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "tv_sec") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "time_t")))
        ((tag . "field") (name . "tv_usec") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "suseconds_t"))))))
  ((tag . "struct") (ns . 0) (name . "timespec") (id . 0)
    (location . "/usr/include/sys/_timespec.h:46:8")
    (bit-size . 128) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "tv_sec") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "time_t")))
        ((tag . "field") (name . "tv_nsec") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64))))))
  ((tag . "struct") (ns . 0) (name . "itimerspec") (id . 0)
    (location . "/usr/include/sys/timespec.h:60:8")
    (bit-size . 256) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "it_interval") (bit-offset . 0) (bit-size . 128)
          (bit-alignment . 64)
          (type (tag . ":struct") (name . "timespec") (id . 19)))
        ((tag . "field") (name . "it_value") (bit-offset . 128) (bit-size . 128)
          (bit-alignment . 64)
          (type (tag . ":struct") (name . "timespec") (id . 19))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "__fd_mask")
    (location . "/usr/include/sys/select.h:44:23")
    (type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "typedef")
    (ns . 0)
    (name . "fd_mask")
    (location . "/usr/include/sys/select.h:46:19")
    (type (tag . "__fd_mask")))
  ((tag . "typedef")
    (ns . 0)
    (name . "sigset_t")
    (location . "/usr/include/sys/select.h:51:20")
    (type (tag . "__sigset_t")))
  ((tag . "struct") (ns . 0) (name . "fd_set") (id . 0)
    (location . "/usr/include/sys/select.h:73:16")
    (bit-size . 1024) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "__fds_bits") (bit-offset . 0) (bit-size . 1024)
          (bit-alignment . 64)
          (type
            (tag . ":array")
            (type (tag . "__fd_mask"))
            (size . 16))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "fd_set")
    (location . "/usr/include/sys/select.h:75:3")
    (type (tag . ":struct") (name . "fd_set") (id . 20)))
  ((tag . "function") (name . "pselect") (ns . 0)
    (location . "/usr/include/sys/select.h:100:5")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fd_set"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fd_set"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fd_set"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":struct") (name . "timespec") (id . 19))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "sigset_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "select") (ns . 0)
    (location . "/usr/include/sys/select.h:105:5")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fd_set"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fd_set"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fd_set"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":struct") (name . "timeval") (id . 21))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__major") (ns . 0)
    (location . "/usr/include/sys/types.h:391:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_d")
          (type (tag . "dev_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__minor") (ns . 0)
    (location . "/usr/include/sys/types.h:397:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_d")
          (type (tag . "dev_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__makedev") (ns . 0)
    (location . "/usr/include/sys/types.h:403:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_M")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "_m")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "dev_t")))
  ((tag . "function") (name . "ftruncate") (ns . 0)
    (location . "/usr/include/sys/types.h:418:6")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "off_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "lseek") (ns . 0)
    (location . "/usr/include/sys/types.h:422:8")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "off_t")))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "off_t")))
  ((tag . "function") (name . "mmap") (ns . 0)
    (location . "/usr/include/sys/types.h:426:9")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "off_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "truncate") (ns . 0)
    (location . "/usr/include/sys/types.h:430:6")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "off_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "fpos_t")
    (location . "/usr/include/stdio.h:47:18")
    (type (tag . "__off_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "rsize_t")
    (location . "/usr/include/stdio.h:56:16")
    (type (tag . "size_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "va_list")
    (location . "/usr/include/stdio.h:77:19")
    (type (tag . "__va_list")))
  ((tag . "struct") (ns . 0) (name . "__sbuf") (id . 0)
    (location . "/usr/include/stdio.h:91:8") (bit-size . 128)
    (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "_base") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))))
        ((tag . "field") (name . "_size") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "struct") (ns . 0) (name . "__sFILE") (id . 0)
    (location . "/usr/include/stdio.h:124:8") (bit-size . 2496)
    (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "_p") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))))
        ((tag . "field") (name . "_r") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "_w") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "_flags") (bit-offset . 128) (bit-size . 16)
          (bit-alignment . 16)
          (type
            (tag . ":short")
            (bit-size . 16)
            (bit-alignment . 16)))
        ((tag . "field") (name . "_file") (bit-offset . 144) (bit-size . 16)
          (bit-alignment . 16)
          (type
            (tag . ":short")
            (bit-size . 16)
            (bit-alignment . 16)))
        ((tag . "field") (name . "_bf") (bit-offset . 192) (bit-size . 128)
          (bit-alignment . 64)
          (type (tag . ":struct") (name . "__sbuf") (id . 22)))
        ((tag . "field") (name . "_lbfsize") (bit-offset . 320) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "_cookie") (bit-offset . 384) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "field") (name . "_close") (bit-offset . 448) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "_read") (bit-offset . 512) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "_seek") (bit-offset . 576) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "_write") (bit-offset . 640) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "_ub") (bit-offset . 704) (bit-size . 128)
          (bit-alignment . 64)
          (type (tag . ":struct") (name . "__sbuf") (id . 22)))
        ((tag . "field") (name . "_up") (bit-offset . 832) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))))
        ((tag . "field") (name . "_ur") (bit-offset . 896) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "_ubuf") (bit-offset . 928) (bit-size . 24)
          (bit-alignment . 8)
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))
            (size . 3)))
        ((tag . "field") (name . "_nbuf") (bit-offset . 952) (bit-size . 8)
          (bit-alignment . 8)
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))
            (size . 1)))
        ((tag . "field") (name . "_lb") (bit-offset . 960) (bit-size . 128)
          (bit-alignment . 64)
          (type (tag . ":struct") (name . "__sbuf") (id . 22)))
        ((tag . "field") (name . "_blksize") (bit-offset . 1088) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "_offset") (bit-offset . 1152) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "fpos_t")))
        ((tag . "field") (name . "_fl_mutex") (bit-offset . 1216) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . "struct") (ns . 0) (name . "pthread_mutex") (id . 0)
              (location . "/usr/include/sys/_pthreadtypes.h:50:8")
              (bit-size . 0) (bit-alignment . 0) (fields . #()))))
        ((tag . "field") (name . "_fl_owner") (bit-offset . 1280) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . "struct") (ns . 0) (name . "pthread") (id . 0)
              (location . "/usr/include/sys/_pthreadtypes.h:46:8")
              (bit-size . 0) (bit-alignment . 0) (fields . #()))))
        ((tag . "field") (name . "_fl_count") (bit-offset . 1344) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "_orientation") (bit-offset . 1376) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "_mbstate") (bit-offset . 1408) (bit-size . 1024)
          (bit-alignment . 64) (type (tag . "__mbstate_t")))
        ((tag . "field") (name . "_flags2") (bit-offset . 2432) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "FILE")
    (location . "/usr/include/stdio.h:165:24")
    (type (tag . ":struct") (name . "__sFILE") (id . 23)))
  ((tag . "extern")
    (name . "__stdinp")
    (ns . 0)
    (location . "/usr/include/stdio.h:169:14")
    (type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "extern")
    (name . "__stdoutp")
    (ns . 0)
    (location . "/usr/include/stdio.h:170:14")
    (type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "extern")
    (name . "__stderrp")
    (ns . 0)
    (location . "/usr/include/stdio.h:171:14")
    (type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "clearerr") (ns . 0)
    (location . "/usr/include/stdio.h:251:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "fclose") (ns . 0)
    (location . "/usr/include/stdio.h:252:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "feof") (ns . 0)
    (location . "/usr/include/stdio.h:253:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ferror") (ns . 0)
    (location . "/usr/include/stdio.h:254:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fflush") (ns . 0)
    (location . "/usr/include/stdio.h:255:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fgetc") (ns . 0)
    (location . "/usr/include/stdio.h:256:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fgetpos") (ns . 0)
    (location . "/usr/include/stdio.h:257:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fpos_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fgets") (ns . 0)
    (location . "/usr/include/stdio.h:258:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fopen") (ns . 0)
    (location . "/usr/include/stdio.h:259:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "fprintf") (ns . 0)
    (location . "/usr/include/stdio.h:260:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fputc") (ns . 0)
    (location . "/usr/include/stdio.h:261:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fputs") (ns . 0)
    (location . "/usr/include/stdio.h:262:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fread") (ns . 0)
    (location . "/usr/include/stdio.h:263:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "freopen") (ns . 0)
    (location . "/usr/include/stdio.h:264:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "fscanf") (ns . 0)
    (location . "/usr/include/stdio.h:265:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fseek") (ns . 0)
    (location . "/usr/include/stdio.h:266:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fsetpos") (ns . 0)
    (location . "/usr/include/stdio.h:267:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "fpos_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ftell") (ns . 0)
    (location . "/usr/include/stdio.h:268:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "fwrite") (ns . 0)
    (location . "/usr/include/stdio.h:269:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "getc") (ns . 0)
    (location . "/usr/include/stdio.h:270:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "getchar") (ns . 0)
    (location . "/usr/include/stdio.h:271:6") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "gets") (ns . 0)
    (location . "/usr/include/stdio.h:272:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "gets_s") (ns . 0)
    (location . "/usr/include/stdio.h:274:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "rsize_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "perror") (ns . 0)
    (location . "/usr/include/stdio.h:276:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "printf") (ns . 0)
    (location . "/usr/include/stdio.h:277:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "putc") (ns . 0)
    (location . "/usr/include/stdio.h:278:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "putchar") (ns . 0)
    (location . "/usr/include/stdio.h:279:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "puts") (ns . 0)
    (location . "/usr/include/stdio.h:280:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "remove") (ns . 0)
    (location . "/usr/include/stdio.h:281:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "rename") (ns . 0)
    (location . "/usr/include/stdio.h:282:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "rewind") (ns . 0)
    (location . "/usr/include/stdio.h:283:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "scanf") (ns . 0)
    (location . "/usr/include/stdio.h:284:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "setbuf") (ns . 0)
    (location . "/usr/include/stdio.h:285:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "setvbuf") (ns . 0)
    (location . "/usr/include/stdio.h:286:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "sprintf") (ns . 0)
    (location . "/usr/include/stdio.h:287:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "sscanf") (ns . 0)
    (location . "/usr/include/stdio.h:288:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tmpfile") (ns . 0)
    (location . "/usr/include/stdio.h:289:7") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "tmpnam") (ns . 0)
    (location . "/usr/include/stdio.h:290:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "ungetc") (ns . 0)
    (location . "/usr/include/stdio.h:291:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vfprintf") (ns . 0)
    (location . "/usr/include/stdio.h:292:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vprintf") (ns . 0)
    (location . "/usr/include/stdio.h:294:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vsprintf") (ns . 0)
    (location . "/usr/include/stdio.h:295:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "snprintf") (ns . 0)
    (location . "/usr/include/stdio.h:299:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vfscanf") (ns . 0)
    (location . "/usr/include/stdio.h:301:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vscanf") (ns . 0)
    (location . "/usr/include/stdio.h:303:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vsnprintf") (ns . 0)
    (location . "/usr/include/stdio.h:304:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vsscanf") (ns . 0)
    (location . "/usr/include/stdio.h:306:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ctermid") (ns . 0)
    (location . "/usr/include/stdio.h:320:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fdopen") (ns . 0)
    (location . "/usr/include/stdio.h:321:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "fileno") (ns . 0)
    (location . "/usr/include/stdio.h:322:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "pclose") (ns . 0)
    (location . "/usr/include/stdio.h:326:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "popen") (ns . 0)
    (location . "/usr/include/stdio.h:327:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "ftrylockfile") (ns . 0)
    (location . "/usr/include/stdio.h:331:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "flockfile") (ns . 0)
    (location . "/usr/include/stdio.h:332:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "funlockfile") (ns . 0)
    (location . "/usr/include/stdio.h:333:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "getc_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:339:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "getchar_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:340:6") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "putc_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:341:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "putchar_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:342:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "clearerr_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:345:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "feof_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:346:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ferror_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:347:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fileno_unlocked") (ns . 0)
    (location . "/usr/include/stdio.h:348:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fseeko") (ns . 0)
    (location . "/usr/include/stdio.h:352:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter") (name . "") (type (tag . "__off_t")))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ftello") (ns . 0)
    (location . "/usr/include/stdio.h:353:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "__off_t")))
  ((tag . "function") (name . "getw") (ns . 0)
    (location . "/usr/include/stdio.h:357:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "putw") (ns . 0)
    (location . "/usr/include/stdio.h:358:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tempnam") (ns . 0)
    (location . "/usr/include/stdio.h:362:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fmemopen") (ns . 0)
    (location . "/usr/include/stdio.h:366:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "getdelim") (ns . 0)
    (location . "/usr/include/stdio.h:367:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "size_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "ssize_t")))
  ((tag . "function") (name . "open_memstream") (ns . 0)
    (location . "/usr/include/stdio.h:369:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "size_t"))))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "renameat") (ns . 0)
    (location . "/usr/include/stdio.h:370:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vdprintf") (ns . 0)
    (location . "/usr/include/stdio.h:371:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "getline") (ns . 0)
    (location . "/usr/include/stdio.h:373:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "size_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "ssize_t")))
  ((tag . "function") (name . "dprintf") (ns . 0)
    (location . "/usr/include/stdio.h:374:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "asprintf") (ns . 0)
    (location . "/usr/include/stdio.h:381:6") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ctermid_r") (ns . 0)
    (location . "/usr/include/stdio.h:382:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fcloseall") (ns . 0)
    (location . "/usr/include/stdio.h:383:7") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type (tag . ":void")))
  ((tag . "function") (name . "fdclose") (ns . 0)
    (location . "/usr/include/stdio.h:384:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fgetln") (ns . 0)
    (location . "/usr/include/stdio.h:385:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "size_t"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fmtcheck") (ns . 0)
    (location . "/usr/include/stdio.h:386:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fpurge") (ns . 0)
    (location . "/usr/include/stdio.h:387:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "setbuffer") (ns . 0)
    (location . "/usr/include/stdio.h:388:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "setlinebuf") (ns . 0)
    (location . "/usr/include/stdio.h:389:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vasprintf") (ns . 0)
    (location . "/usr/include/stdio.h:390:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "extern")
    (name . "sys_nerr")
    (ns . 0)
    (location . "/usr/include/stdio.h:398:18")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "extern")
    (name . "sys_errlist")
    (ns . 0)
    (location . "/usr/include/stdio.h:399:27")
    (type
      (tag . ":pointer")
      (type
        (tag . ":pointer")
        (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
  ((tag . "function") (name . "funopen") (ns . 0)
    (location . "/usr/include/stdio.h:404:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "typedef")
    (ns . 0)
    (name . "cookie_read_function_t")
    (location . "/usr/include/stdio.h:412:19")
    (type (tag . ":function")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cookie_write_function_t")
    (location . "/usr/include/stdio.h:413:19")
    (type (tag . ":function")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cookie_seek_function_t")
    (location . "/usr/include/stdio.h:414:13")
    (type (tag . ":function")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cookie_close_function_t")
    (location . "/usr/include/stdio.h:415:13")
    (type (tag . ":function")))
  ((tag . "typedef")
    (ns . 0)
    (name . "cookie_io_functions_t")
    (location . "/usr/include/stdio.h:421:3")
    (type (tag . "struct") (ns . 8) (name . "") (id . 24)
      (location . "/usr/include/stdio.h:416:9") (bit-size . 256)
      (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "read") (bit-offset . 0) (bit-size . 64)
            (bit-alignment . 64) (type (tag . ":function-pointer")))
          ((tag . "field") (name . "write") (bit-offset . 64) (bit-size . 64)
            (bit-alignment . 64) (type (tag . ":function-pointer")))
          ((tag . "field") (name . "seek") (bit-offset . 128) (bit-size . 64)
            (bit-alignment . 64) (type (tag . ":function-pointer")))
          ((tag . "field") (name . "close") (bit-offset . 192) (bit-size . 64)
            (bit-alignment . 64) (type (tag . ":function-pointer")))))))
  ((tag . "function") (name . "fopencookie") (ns . 0)
    (location . "/usr/include/stdio.h:422:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "cookie_io_functions_t")))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "__srget") (ns . 0)
    (location . "/usr/include/stdio.h:448:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__swbuf") (ns . 0)
    (location . "/usr/include/stdio.h:449:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__sputc") (ns . 0)
    (location . "/usr/include/stdio.h:457:21") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "_p")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "extern")
    (name . "__isthreaded")
    (ns . 0)
    (location . "/usr/include/stdio.h:479:12")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "rune_t")
    (location . "/usr/include/stdlib.h:46:18")
    (type (tag . "__rune_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "wchar_t")
    (location . "/usr/include/stdlib.h:58:20")
    (type (tag . "___wchar_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "div_t")
    (location . "/usr/include/stdlib.h:66:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 25)
      (location . "/usr/include/stdlib.h:63:9") (bit-size . 64)
      (bit-alignment . 32)
      (fields
        .
        #(((tag . "field") (name . "quot") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 32)
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
          ((tag . "field") (name . "rem") (bit-offset . 32) (bit-size . 32)
            (bit-alignment . 32)
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32)))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "ldiv_t")
    (location . "/usr/include/stdlib.h:71:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 26)
      (location . "/usr/include/stdlib.h:68:9") (bit-size . 128)
      (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "quot") (bit-offset . 0) (bit-size . 64)
            (bit-alignment . 64)
            (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
          ((tag . "field") (name . "rem") (bit-offset . 64) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":long")
              (bit-size . 64)
              (bit-alignment . 64)))))))
  ((tag . "extern")
    (name . "__mb_cur_max")
    (ns . 0)
    (location . "/usr/include/stdlib.h:82:12")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "function") (name . "___mb_cur_max") (ns . 0)
    (location . "/usr/include/stdlib.h:83:12") (variadic . #f)
    (inline . #f) (storage-class . "extern") (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "abort") (ns . 0)
    (location . "/usr/include/stdlib.h:86:17") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type (tag . ":void")))
  ((tag . "function") (name . "abs") (ns . 0)
    (location . "/usr/include/stdlib.h:87:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "atexit") (ns . 0)
    (location . "/usr/include/stdlib.h:88:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "atof") (ns . 0)
    (location . "/usr/include/stdlib.h:89:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "atoi") (ns . 0)
    (location . "/usr/include/stdlib.h:90:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "atol") (ns . 0)
    (location . "/usr/include/stdlib.h:91:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "bsearch") (ns . 0)
    (location . "/usr/include/stdlib.h:92:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "calloc") (ns . 0)
    (location . "/usr/include/stdlib.h:94:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "div") (ns . 0)
    (location . "/usr/include/stdlib.h:96:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "div_t")))
  ((tag . "function") (name . "exit") (ns . 0)
    (location . "/usr/include/stdlib.h:97:17") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "free") (ns . 0)
    (location . "/usr/include/stdlib.h:98:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "getenv") (ns . 0)
    (location . "/usr/include/stdlib.h:99:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "labs") (ns . 0)
    (location . "/usr/include/stdlib.h:100:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "ldiv") (ns . 0)
    (location . "/usr/include/stdlib.h:101:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type (tag . "ldiv_t")))
  ((tag . "function") (name . "malloc") (ns . 0)
    (location . "/usr/include/stdlib.h:102:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "mblen") (ns . 0)
    (location . "/usr/include/stdlib.h:103:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "mbstowcs") (ns . 0)
    (location . "/usr/include/stdlib.h:104:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "mbtowc") (ns . 0)
    (location . "/usr/include/stdlib.h:105:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "qsort") (ns . 0)
    (location . "/usr/include/stdlib.h:106:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "rand") (ns . 0)
    (location . "/usr/include/stdlib.h:108:6") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "realloc") (ns . 0)
    (location . "/usr/include/stdlib.h:109:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "srand") (ns . 0)
    (location . "/usr/include/stdlib.h:110:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "strtod") (ns . 0)
    (location . "/usr/include/stdlib.h:111:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "strtof") (ns . 0)
    (location . "/usr/include/stdlib.h:112:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strtol") (ns . 0)
    (location . "/usr/include/stdlib.h:113:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "strtold") (ns . 0)
    (location . "/usr/include/stdlib.h:115:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "strtoul") (ns . 0)
    (location . "/usr/include/stdlib.h:117:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "system") (ns . 0)
    (location . "/usr/include/stdlib.h:118:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wctomb") (ns . 0)
    (location . "/usr/include/stdlib.h:119:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "wchar_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcstombs") (ns . 0)
    (location . "/usr/include/stdlib.h:120:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "lldiv_t")
    (location . "/usr/include/stdlib.h:138:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 27)
      (location . "/usr/include/stdlib.h:135:9") (bit-size . 128)
      (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "quot") (bit-offset . 0) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":long-long")
              (bit-size . 64)
              (bit-alignment . 64)))
          ((tag . "field") (name . "rem") (bit-offset . 64) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":long-long")
              (bit-size . 64)
              (bit-alignment . 64)))))))
  ((tag . "function") (name . "atoll") (ns . 0)
    (location . "/usr/include/stdlib.h:142:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "llabs") (ns . 0)
    (location . "/usr/include/stdlib.h:145:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "lldiv") (ns . 0)
    (location . "/usr/include/stdlib.h:147:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type (tag . "lldiv_t")))
  ((tag . "function") (name . "strtoll") (ns . 0)
    (location . "/usr/include/stdlib.h:150:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "strtoull") (ns . 0)
    (location . "/usr/include/stdlib.h:153:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":unsigned-long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "_Exit") (ns . 0)
    (location . "/usr/include/stdlib.h:156:17") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "aligned_alloc") (ns . 0)
    (location . "/usr/include/stdlib.h:163:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "at_quick_exit") (ns . 0)
    (location . "/usr/include/stdlib.h:165:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "quick_exit") (ns . 0)
    (location . "/usr/include/stdlib.h:167:2") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "realpath") (ns . 0)
    (location . "/usr/include/stdlib.h:173:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "rand_r") (ns . 0)
    (location . "/usr/include/stdlib.h:176:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":unsigned-int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "posix_memalign") (ns . 0)
    (location . "/usr/include/stdlib.h:179:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "setenv") (ns . 0)
    (location . "/usr/include/stdlib.h:180:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "unsetenv") (ns . 0)
    (location . "/usr/include/stdlib.h:181:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "getsubopt") (ns . 0)
    (location . "/usr/include/stdlib.h:185:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "mkdtemp") (ns . 0)
    (location . "/usr/include/stdlib.h:187:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "mkstemp") (ns . 0)
    (location . "/usr/include/stdlib.h:191:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "a64l") (ns . 0)
    (location . "/usr/include/stdlib.h:204:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "drand48") (ns . 0)
    (location . "/usr/include/stdlib.h:205:9") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "erand48") (ns . 0)
    (location . "/usr/include/stdlib.h:207:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-short")
              (bit-size . 16)
              (bit-alignment . 16))
            (size . 3)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "grantpt") (ns . 0)
    (location . "/usr/include/stdlib.h:210:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "initstate") (ns . 0)
    (location . "/usr/include/stdlib.h:211:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "jrand48") (ns . 0)
    (location . "/usr/include/stdlib.h:212:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-short")
              (bit-size . 16)
              (bit-alignment . 16))
            (size . 3)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "l64a") (ns . 0)
    (location . "/usr/include/stdlib.h:213:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "lcong48") (ns . 0)
    (location . "/usr/include/stdlib.h:214:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-short")
              (bit-size . 16)
              (bit-alignment . 16))
            (size . 7)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "lrand48") (ns . 0)
    (location . "/usr/include/stdlib.h:215:7") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "mktemp") (ns . 0)
    (location . "/usr/include/stdlib.h:217:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "mrand48") (ns . 0)
    (location . "/usr/include/stdlib.h:220:7") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "nrand48") (ns . 0)
    (location . "/usr/include/stdlib.h:221:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-short")
              (bit-size . 16)
              (bit-alignment . 16))
            (size . 3)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "posix_openpt") (ns . 0)
    (location . "/usr/include/stdlib.h:222:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ptsname") (ns . 0)
    (location . "/usr/include/stdlib.h:223:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "putenv") (ns . 0)
    (location . "/usr/include/stdlib.h:224:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "random") (ns . 0)
    (location . "/usr/include/stdlib.h:225:7") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "seed48") (ns . 0)
    (location . "/usr/include/stdlib.h:227:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-short")
              (bit-size . 16)
              (bit-alignment . 16))
            (size . 3)))))
    (return-type
      (tag . ":pointer")
      (type
        (tag . ":unsigned-short")
        (bit-size . 16)
        (bit-alignment . 16))))
  ((tag . "function") (name . "setstate") (ns . 0)
    (location . "/usr/include/stdlib.h:228:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "srand48") (ns . 0)
    (location . "/usr/include/stdlib.h:229:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "srandom") (ns . 0)
    (location . "/usr/include/stdlib.h:230:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "unlockpt") (ns . 0)
    (location . "/usr/include/stdlib.h:231:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "extern")
    (name . "malloc_conf")
    (ns . 0)
    (location . "/usr/include/stdlib.h:235:20")
    (type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "extern")
    (name . "malloc_message")
    (ns . 0)
    (location . "/usr/include/stdlib.h:236:15")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "abort2") (ns . 0)
    (location . "/usr/include/stdlib.h:250:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "arc4random") (ns . 0)
    (location . "/usr/include/stdlib.h:252:3") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type (tag . "__uint32_t")))
  ((tag . "function") (name . "arc4random_buf") (ns . 0)
    (location . "/usr/include/stdlib.h:253:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "arc4random_uniform") (ns . 0)
    (location . "/usr/include/stdlib.h:255:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "__uint32_t")))))
    (return-type (tag . "__uint32_t")))
  ((tag . "function") (name . "getbsize") (ns . 0)
    (location . "/usr/include/stdlib.h:262:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":long")
              (bit-size . 64)
              (bit-alignment . 64))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "cgetcap") (ns . 0)
    (location . "/usr/include/stdlib.h:264:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "cgetclose") (ns . 0)
    (location . "/usr/include/stdlib.h:265:6") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetent") (ns . 0)
    (location . "/usr/include/stdlib.h:266:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetfirst") (ns . 0)
    (location . "/usr/include/stdlib.h:267:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetmatch") (ns . 0)
    (location . "/usr/include/stdlib.h:268:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetnext") (ns . 0)
    (location . "/usr/include/stdlib.h:269:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetnum") (ns . 0)
    (location . "/usr/include/stdlib.h:270:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":long")
              (bit-size . 64)
              (bit-alignment . 64))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetset") (ns . 0)
    (location . "/usr/include/stdlib.h:271:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetstr") (ns . 0)
    (location . "/usr/include/stdlib.h:272:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cgetustr") (ns . 0)
    (location . "/usr/include/stdlib.h:273:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "daemon") (ns . 0)
    (location . "/usr/include/stdlib.h:275:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "daemonfd") (ns . 0)
    (location . "/usr/include/stdlib.h:276:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "devname") (ns . 0)
    (location . "/usr/include/stdlib.h:277:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "__dev_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__mode_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "devname_r") (ns . 0)
    (location . "/usr/include/stdlib.h:278:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "__dev_t")))
        ((tag . "parameter") (name . "") (type (tag . "__mode_t")))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fdevname") (ns . 0)
    (location . "/usr/include/stdlib.h:279:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "fdevname_r") (ns . 0)
    (location . "/usr/include/stdlib.h:280:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "getloadavg") (ns . 0)
    (location . "/usr/include/stdlib.h:281:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":double")
              (bit-size . 64)
              (bit-alignment . 64))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "getprogname") (ns . 0)
    (location . "/usr/include/stdlib.h:283:3") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "heapsort") (ns . 0)
    (location . "/usr/include/stdlib.h:285:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "l64a_r") (ns . 0)
    (location . "/usr/include/stdlib.h:293:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "mergesort") (ns . 0)
    (location . "/usr/include/stdlib.h:294:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "mkostemp") (ns . 0)
    (location . "/usr/include/stdlib.h:298:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "mkostemps") (ns . 0)
    (location . "/usr/include/stdlib.h:299:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "qsort_r") (ns . 0)
    (location . "/usr/include/stdlib.h:300:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":function-pointer")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "radixsort") (ns . 0)
    (location . "/usr/include/stdlib.h:302:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":unsigned-char")
                (bit-size . 8)
                (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "reallocarray") (ns . 0)
    (location . "/usr/include/stdlib.h:304:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "reallocf") (ns . 0)
    (location . "/usr/include/stdlib.h:306:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "rpmatch") (ns . 0)
    (location . "/usr/include/stdlib.h:307:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "setprogname") (ns . 0)
    (location . "/usr/include/stdlib.h:308:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "sradixsort") (ns . 0)
    (location . "/usr/include/stdlib.h:309:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":unsigned-char")
                (bit-size . 8)
                (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "sranddev") (ns . 0)
    (location . "/usr/include/stdlib.h:311:7") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type (tag . ":void")))
  ((tag . "function") (name . "srandomdev") (ns . 0)
    (location . "/usr/include/stdlib.h:312:7") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type (tag . ":void")))
  ((tag . "function") (name . "strtonum") (ns . 0)
    (location . "/usr/include/stdlib.h:314:2") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "strtoq") (ns . 0)
    (location . "/usr/include/stdlib.h:318:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "__int64_t")))
  ((tag . "function") (name . "strtouq") (ns . 0)
    (location . "/usr/include/stdlib.h:320:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "__uint64_t")))
  ((tag . "extern")
    (name . "suboptarg")
    (ns . 0)
    (location . "/usr/include/stdlib.h:322:14")
    (type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "typedef")
    (ns . 0)
    (name . "errno_t")
    (location . "/usr/include/stdlib.h:329:13")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "constraint_handler_t")
    (location . "/usr/include/stdlib.h:333:16")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "set_constraint_handler_s") (ns . 0)
    (location . "/usr/include/stdlib.h:336:22") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "handler")
          (type (tag . "constraint_handler_t")))))
    (return-type (tag . "constraint_handler_t")))
  ((tag . "function") (name . "abort_handler_s") (ns . 0)
    (location . "/usr/include/stdlib.h:338:16") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "errno_t")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "ignore_handler_s") (ns . 0)
    (location . "/usr/include/stdlib.h:341:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "errno_t")))))
    (return-type (tag . ":void")))
  ((tag . "typedef")
    (ns . 0)
    (name . "ptrdiff_t")
    (location . "/usr/include/stddef.h:44:21")
    (type (tag . "__ptrdiff_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "max_align_t")
    (location . "/usr/include/stddef.h:69:23")
    (type (tag . "__max_align_t")))
  ((tag . "function") (name . "bcmp") (ns . 0)
    (location . "/usr/include/strings.h:44:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "bcopy") (ns . 0)
    (location . "/usr/include/strings.h:45:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "bzero") (ns . 0)
    (location . "/usr/include/strings.h:46:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "explicit_bzero") (ns . 0)
    (location . "/usr/include/strings.h:49:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "ffs") (ns . 0)
    (location . "/usr/include/strings.h:52:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ffsl") (ns . 0)
    (location . "/usr/include/strings.h:55:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ffsll") (ns . 0)
    (location . "/usr/include/strings.h:56:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fls") (ns . 0)
    (location . "/usr/include/strings.h:57:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "flsl") (ns . 0)
    (location . "/usr/include/strings.h:58:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "flsll") (ns . 0)
    (location . "/usr/include/strings.h:59:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "index") (ns . 0)
    (location . "/usr/include/strings.h:62:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "rindex") (ns . 0)
    (location . "/usr/include/strings.h:63:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strcasecmp") (ns . 0)
    (location . "/usr/include/strings.h:65:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strncasecmp") (ns . 0)
    (location . "/usr/include/strings.h:66:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "struct") (ns . 0) (name . "_xlocale") (id . 0)
    (location . "/usr/include/xlocale/_strings.h:31:16")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "locale_t")
    (location . "/usr/include/xlocale/_strings.h:31:26")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "_xlocale") (id . 0)
        (location . "/usr/include/xlocale/_strings.h:31:16")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "function") (name . "strcasecmp_l") (ns . 0)
    (location . "/usr/include/xlocale/_strings.h:46:6")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strncasecmp_l") (ns . 0)
    (location . "/usr/include/xlocale/_strings.h:47:6")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "memccpy") (ns . 0)
    (location . "/usr/include/string.h:57:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "memchr") (ns . 0)
    (location . "/usr/include/string.h:59:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "memrchr") (ns . 0)
    (location . "/usr/include/string.h:61:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "memcmp") (ns . 0)
    (location . "/usr/include/string.h:63:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "memcpy") (ns . 0)
    (location . "/usr/include/string.h:64:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "memmem") (ns . 0)
    (location . "/usr/include/string.h:66:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "memmove") (ns . 0)
    (location . "/usr/include/string.h:68:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "memset") (ns . 0)
    (location . "/usr/include/string.h:69:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "stpcpy") (ns . 0)
    (location . "/usr/include/string.h:71:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "stpncpy") (ns . 0)
    (location . "/usr/include/string.h:72:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strcasestr") (ns . 0)
    (location . "/usr/include/string.h:75:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strcat") (ns . 0)
    (location . "/usr/include/string.h:77:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strchr") (ns . 0)
    (location . "/usr/include/string.h:78:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strchrnul") (ns . 0)
    (location . "/usr/include/string.h:80:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strcmp") (ns . 0)
    (location . "/usr/include/string.h:82:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strcoll") (ns . 0)
    (location . "/usr/include/string.h:83:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strcpy") (ns . 0)
    (location . "/usr/include/string.h:84:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strcspn") (ns . 0)
    (location . "/usr/include/string.h:85:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "strdup") (ns . 0)
    (location . "/usr/include/string.h:87:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strerror") (ns . 0)
    (location . "/usr/include/string.h:89:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strerror_r") (ns . 0)
    (location . "/usr/include/string.h:91:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strlcat") (ns . 0)
    (location . "/usr/include/string.h:94:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "strlcpy") (ns . 0)
    (location . "/usr/include/string.h:95:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "strlen") (ns . 0)
    (location . "/usr/include/string.h:97:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "strmode") (ns . 0)
    (location . "/usr/include/string.h:99:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "strncat") (ns . 0)
    (location . "/usr/include/string.h:101:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strncmp") (ns . 0)
    (location . "/usr/include/string.h:102:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strncpy") (ns . 0)
    (location . "/usr/include/string.h:103:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strndup") (ns . 0)
    (location . "/usr/include/string.h:105:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strnlen") (ns . 0)
    (location . "/usr/include/string.h:106:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "strnstr") (ns . 0)
    (location . "/usr/include/string.h:109:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strpbrk") (ns . 0)
    (location . "/usr/include/string.h:111:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strrchr") (ns . 0)
    (location . "/usr/include/string.h:112:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strsep") (ns . 0)
    (location . "/usr/include/string.h:114:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strsignal") (ns . 0)
    (location . "/usr/include/string.h:117:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strspn") (ns . 0)
    (location . "/usr/include/string.h:119:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "strstr") (ns . 0)
    (location . "/usr/include/string.h:120:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strtok") (ns . 0)
    (location . "/usr/include/string.h:121:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strtok_r") (ns . 0)
    (location . "/usr/include/string.h:123:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "strxfrm") (ns . 0)
    (location . "/usr/include/string.h:125:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "swab") (ns . 0)
    (location . "/usr/include/string.h:136:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "ssize_t")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "timingsafe_bcmp") (ns . 0)
    (location . "/usr/include/string.h:139:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "timingsafe_memcmp") (ns . 0)
    (location . "/usr/include/string.h:140:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strcoll_l") (ns . 0)
    (location . "/usr/include/xlocale/_string.h:48:6")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "strxfrm_l") (ns . 0)
    (location . "/usr/include/xlocale/_string.h:49:9")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "memset_s") (ns . 0)
    (location . "/usr/include/string.h:160:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "") (type (tag . "rsize_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter") (name . "") (type (tag . "rsize_t")))))
    (return-type (tag . "errno_t")))
  ((tag . "function") (name . "___runetype") (ns . 0)
    (location . "/usr/include/_ctype.h:74:15") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "__ct_rune_t")))))
    (return-type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "___tolower") (ns . 0)
    (location . "/usr/include/_ctype.h:75:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "__ct_rune_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "function") (name . "___toupper") (ns . 0)
    (location . "/usr/include/_ctype.h:76:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "__ct_rune_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "extern")
    (name . "__mb_sb_limit")
    (ns . 0)
    (location . "/usr/include/_ctype.h:89:12")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "_RuneEntry")
    (location . "/usr/include/runetype.h:55:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 29)
      (location . "/usr/include/runetype.h:50:9") (bit-size . 192)
      (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "__min") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 32) (type (tag . "__rune_t")))
          ((tag . "field") (name . "__max") (bit-offset . 32) (bit-size . 32)
            (bit-alignment . 32) (type (tag . "__rune_t")))
          ((tag . "field") (name . "__map") (bit-offset . 64) (bit-size . 32)
            (bit-alignment . 32) (type (tag . "__rune_t")))
          ((tag . "field") (name . "__types") (bit-offset . 128) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":pointer")
              (type
                (tag . ":unsigned-long")
                (bit-size . 64)
                (bit-alignment . 64))))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "_RuneRange")
    (location . "/usr/include/runetype.h:60:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 30)
      (location . "/usr/include/runetype.h:57:9") (bit-size . 128)
      (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "__nranges") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 32)
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
          ((tag . "field") (name . "__ranges") (bit-offset . 64) (bit-size . 64)
            (bit-alignment . 64)
            (type (tag . ":pointer") (type (tag . "_RuneEntry"))))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "_RuneLocale")
    (location . "/usr/include/runetype.h:85:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 31)
      (location . "/usr/include/runetype.h:62:9")
      (bit-size . 33792) (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "__magic") (bit-offset . 0) (bit-size . 64)
            (bit-alignment . 8)
            (type
              (tag . ":array")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))
              (size . 8)))
          ((tag . "field") (name . "__encoding") (bit-offset . 64) (bit-size . 256)
            (bit-alignment . 8)
            (type
              (tag . ":array")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))
              (size . 32)))
          ((tag . "field") (name . "__sgetrune") (bit-offset . 320) (bit-size . 64)
            (bit-alignment . 64) (type (tag . ":function-pointer")))
          ((tag . "field") (name . "__sputrune") (bit-offset . 384) (bit-size . 64)
            (bit-alignment . 64) (type (tag . ":function-pointer")))
          ((tag . "field") (name . "__invalid_rune") (bit-offset . 448)
            (bit-size . 32) (bit-alignment . 32)
            (type (tag . "__rune_t")))
          ((tag . "field") (name . "__runetype") (bit-offset . 512) (bit-size . 16384)
            (bit-alignment . 64)
            (type
              (tag . ":array")
              (type
                (tag . ":unsigned-long")
                (bit-size . 64)
                (bit-alignment . 64))
              (size . 256)))
          ((tag . "field") (name . "__maplower") (bit-offset . 16896)
            (bit-size . 8192) (bit-alignment . 32)
            (type
              (tag . ":array")
              (type (tag . "__rune_t"))
              (size . 256)))
          ((tag . "field") (name . "__mapupper") (bit-offset . 25088)
            (bit-size . 8192) (bit-alignment . 32)
            (type
              (tag . ":array")
              (type (tag . "__rune_t"))
              (size . 256)))
          ((tag . "field") (name . "__runetype_ext") (bit-offset . 33280)
            (bit-size . 128) (bit-alignment . 64)
            (type (tag . "_RuneRange")))
          ((tag . "field") (name . "__maplower_ext") (bit-offset . 33408)
            (bit-size . 128) (bit-alignment . 64)
            (type (tag . "_RuneRange")))
          ((tag . "field") (name . "__mapupper_ext") (bit-offset . 33536)
            (bit-size . 128) (bit-alignment . 64)
            (type (tag . "_RuneRange")))
          ((tag . "field") (name . "__variable") (bit-offset . 33664) (bit-size . 64)
            (bit-alignment . 64)
            (type (tag . ":pointer") (type (tag . ":void"))))
          ((tag . "field") (name . "__variable_len") (bit-offset . 33728)
            (bit-size . 32) (bit-alignment . 32)
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32)))))))
  ((tag . "extern")
    (name . "_DefaultRuneLocale")
    (ns . 0)
    (location . "/usr/include/runetype.h:89:26")
    (type (tag . "_RuneLocale")))
  ((tag . "extern")
    (name . "_CurrentRuneLocale")
    (ns . 0)
    (location . "/usr/include/runetype.h:90:27")
    (type (tag . ":pointer") (type (tag . "_RuneLocale"))))
  ((tag . "extern")
    (name . "_ThreadRuneLocale")
    (ns . 0)
    (location . "/usr/include/runetype.h:94:41")
    (type (tag . ":pointer") (type (tag . "_RuneLocale"))))
  ((tag . "function") (name . "__getCurrentRuneLocale") (ns . 0)
    (location . "/usr/include/runetype.h:95:36") (variadic . #f)
    (inline . #t) (storage-class . "static") (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "_RuneLocale"))))
  ((tag . "function") (name . "__maskrune") (ns . 0)
    (location . "/usr/include/_ctype.h:100:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "_f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__sbmaskrune") (ns . 0)
    (location . "/usr/include/_ctype.h:107:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "_f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__istype") (ns . 0)
    (location . "/usr/include/_ctype.h:114:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "_f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__sbistype") (ns . 0)
    (location . "/usr/include/_ctype.h:120:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "_f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isctype") (ns . 0)
    (location . "/usr/include/_ctype.h:126:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "_f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__toupper") (ns . 0)
    (location . "/usr/include/_ctype.h:133:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "function") (name . "__sbtoupper") (ns . 0)
    (location . "/usr/include/_ctype.h:140:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "function") (name . "__tolower") (ns . 0)
    (location . "/usr/include/_ctype.h:147:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "function") (name . "__sbtolower") (ns . 0)
    (location . "/usr/include/_ctype.h:154:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "function") (name . "__wcwidth") (ns . 0)
    (location . "/usr/include/_ctype.h:161:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "_c")
          (type (tag . "__ct_rune_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "mbstate_t")
    (location . "/usr/include/wchar.h:72:21")
    (type (tag . "__mbstate_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "wint_t")
    (location . "/usr/include/wchar.h:96:18")
    (type (tag . "__wint_t")))
  ((tag . "struct") (ns . 0) (name . "tm") (id . 0)
    (location . "/usr/include/wchar.h:111:8") (bit-size . 0)
    (bit-alignment . 0) (fields . #()))
  ((tag . "function") (name . "btowc") (ns . 0)
    (location . "/usr/include/wchar.h:114:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "fgetwc") (ns . 0)
    (location . "/usr/include/wchar.h:115:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "fgetws") (ns . 0)
    (location . "/usr/include/wchar.h:117:2") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "fputwc") (ns . 0)
    (location . "/usr/include/wchar.h:118:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "wchar_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "fputws") (ns . 0)
    (location . "/usr/include/wchar.h:119:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fwide") (ns . 0)
    (location . "/usr/include/wchar.h:120:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fwprintf") (ns . 0)
    (location . "/usr/include/wchar.h:121:5") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fwscanf") (ns . 0)
    (location . "/usr/include/wchar.h:122:5") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "getwc") (ns . 0)
    (location . "/usr/include/wchar.h:123:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "getwchar") (ns . 0)
    (location . "/usr/include/wchar.h:124:8") (variadic . #f)
    (inline . #f) (storage-class . "none") (parameters . #())
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "mbrlen") (ns . 0)
    (location . "/usr/include/wchar.h:125:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "mbrtowc") (ns . 0)
    (location . "/usr/include/wchar.h:126:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "mbsinit") (ns . 0)
    (location . "/usr/include/wchar.h:128:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "mbsrtowcs") (ns . 0)
    (location . "/usr/include/wchar.h:129:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "putwc") (ns . 0)
    (location . "/usr/include/wchar.h:131:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "wchar_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "putwchar") (ns . 0)
    (location . "/usr/include/wchar.h:132:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "wchar_t")))))
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "swprintf") (ns . 0)
    (location . "/usr/include/wchar.h:133:5") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "n") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "swscanf") (ns . 0)
    (location . "/usr/include/wchar.h:135:5") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ungetwc") (ns . 0)
    (location . "/usr/include/wchar.h:136:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "wint_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))))
    (return-type (tag . "wint_t")))
  ((tag . "function") (name . "vfwprintf") (ns . 0)
    (location . "/usr/include/wchar.h:137:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vswprintf") (ns . 0)
    (location . "/usr/include/wchar.h:139:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "n") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vwprintf") (ns . 0)
    (location . "/usr/include/wchar.h:141:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcrtomb") (ns . 0)
    (location . "/usr/include/wchar.h:142:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter") (name . "") (type (tag . "wchar_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcscat") (ns . 0)
    (location . "/usr/include/wchar.h:143:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcschr") (ns . 0)
    (location . "/usr/include/wchar.h:144:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "wchar_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcscmp") (ns . 0)
    (location . "/usr/include/wchar.h:145:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcscoll") (ns . 0)
    (location . "/usr/include/wchar.h:146:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcscpy") (ns . 0)
    (location . "/usr/include/wchar.h:147:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcscspn") (ns . 0)
    (location . "/usr/include/wchar.h:148:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcsftime") (ns . 0)
    (location . "/usr/include/wchar.h:149:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . "struct") (ns . 0) (name . "tm") (id . 0)
              (location . "/usr/include/wchar.h:111:8") (bit-size . 0)
              (bit-alignment . 0) (fields . #()))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcslen") (ns . 0)
    (location . "/usr/include/wchar.h:151:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcsncat") (ns . 0)
    (location . "/usr/include/wchar.h:152:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcsncmp") (ns . 0)
    (location . "/usr/include/wchar.h:154:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcsncpy") (ns . 0)
    (location . "/usr/include/wchar.h:155:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcspbrk") (ns . 0)
    (location . "/usr/include/wchar.h:156:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcsrchr") (ns . 0)
    (location . "/usr/include/wchar.h:157:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "wchar_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcsrtombs") (ns . 0)
    (location . "/usr/include/wchar.h:158:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcsspn") (ns . 0)
    (location . "/usr/include/wchar.h:160:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcsstr") (ns . 0)
    (location . "/usr/include/wchar.h:161:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcsxfrm") (ns . 0)
    (location . "/usr/include/wchar.h:163:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wctob") (ns . 0)
    (location . "/usr/include/wchar.h:164:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "wint_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcstod") (ns . 0)
    (location . "/usr/include/wchar.h:165:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "wcstok") (ns . 0)
    (location . "/usr/include/wchar.h:166:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcstol") (ns . 0)
    (location . "/usr/include/wchar.h:168:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "wcstoul") (ns . 0)
    (location . "/usr/include/wchar.h:170:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "wmemchr") (ns . 0)
    (location . "/usr/include/wchar.h:171:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "wchar_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wmemcmp") (ns . 0)
    (location . "/usr/include/wchar.h:172:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wmemcpy") (ns . 0)
    (location . "/usr/include/wchar.h:173:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wmemmove") (ns . 0)
    (location . "/usr/include/wchar.h:174:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wmemset") (ns . 0)
    (location . "/usr/include/wchar.h:175:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "wchar_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wprintf") (ns . 0)
    (location . "/usr/include/wchar.h:176:5") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wscanf") (ns . 0)
    (location . "/usr/include/wchar.h:177:5") (variadic . #t)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vfwscanf") (ns . 0)
    (location . "/usr/include/wchar.h:192:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vswscanf") (ns . 0)
    (location . "/usr/include/wchar.h:194:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "vwscanf") (ns . 0)
    (location . "/usr/include/wchar.h:196:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "__va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcstof") (ns . 0)
    (location . "/usr/include/wchar.h:197:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcstold") (ns . 0)
    (location . "/usr/include/wchar.h:199:2") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "wcstoll") (ns . 0)
    (location . "/usr/include/wchar.h:203:2") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "wcstoull") (ns . 0)
    (location . "/usr/include/wchar.h:206:3") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":unsigned-long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "wcswidth") (ns . 0)
    (location . "/usr/include/wchar.h:211:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcwidth") (ns . 0)
    (location . "/usr/include/wchar.h:212:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "wchar_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "mbsnrtowcs") (ns . 0)
    (location . "/usr/include/wchar.h:217:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "open_wmemstream") (ns . 0)
    (location . "/usr/include/wchar.h:219:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "size_t"))))))
    (return-type (tag . ":pointer") (type (tag . "FILE"))))
  ((tag . "function") (name . "wcpcpy") (ns . 0)
    (location . "/usr/include/wchar.h:220:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcpncpy") (ns . 0)
    (location . "/usr/include/wchar.h:221:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcsdup") (ns . 0)
    (location . "/usr/include/wchar.h:222:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcscasecmp") (ns . 0)
    (location . "/usr/include/wchar.h:223:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcsncasecmp") (ns . 0)
    (location . "/usr/include/wchar.h:224:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "n") (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcsnlen") (ns . 0)
    (location . "/usr/include/wchar.h:225:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcsnrtombs") (ns . 0)
    (location . "/usr/include/wchar.h:226:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "mbstate_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "fgetwln") (ns . 0)
    (location . "/usr/include/wchar.h:231:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "size_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "wcslcat") (ns . 0)
    (location . "/usr/include/wchar.h:232:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcslcpy") (ns . 0)
    (location . "/usr/include/wchar.h:233:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "wcscasecmp_l") (ns . 0)
    (location . "/usr/include/xlocale/_wchar.h:41:8")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcsncasecmp_l") (ns . 0)
    (location . "/usr/include/xlocale/_wchar.h:43:8")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcscoll_l") (ns . 0)
    (location . "/usr/include/xlocale/_wchar.h:45:8")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "wcsxfrm_l") (ns . 0)
    (location . "/usr/include/xlocale/_wchar.h:46:11")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter") (name . "") (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type (tag . "size_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_least8_t")
    (location . "/usr/include/sys/stdint.h:40:25")
    (type (tag . "__int_least8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_least16_t")
    (location . "/usr/include/sys/stdint.h:41:26")
    (type (tag . "__int_least16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_least32_t")
    (location . "/usr/include/sys/stdint.h:42:26")
    (type (tag . "__int_least32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_least64_t")
    (location . "/usr/include/sys/stdint.h:43:26")
    (type (tag . "__int_least64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_least8_t")
    (location . "/usr/include/sys/stdint.h:45:26")
    (type (tag . "__uint_least8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_least16_t")
    (location . "/usr/include/sys/stdint.h:46:26")
    (type (tag . "__uint_least16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_least32_t")
    (location . "/usr/include/sys/stdint.h:47:26")
    (type (tag . "__uint_least32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_least64_t")
    (location . "/usr/include/sys/stdint.h:48:26")
    (type (tag . "__uint_least64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_fast8_t")
    (location . "/usr/include/sys/stdint.h:50:24")
    (type (tag . "__int_fast8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_fast16_t")
    (location . "/usr/include/sys/stdint.h:51:25")
    (type (tag . "__int_fast16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_fast32_t")
    (location . "/usr/include/sys/stdint.h:52:25")
    (type (tag . "__int_fast32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "int_fast64_t")
    (location . "/usr/include/sys/stdint.h:53:25")
    (type (tag . "__int_fast64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_fast8_t")
    (location . "/usr/include/sys/stdint.h:55:25")
    (type (tag . "__uint_fast8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_fast16_t")
    (location . "/usr/include/sys/stdint.h:56:26")
    (type (tag . "__uint_fast16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_fast32_t")
    (location . "/usr/include/sys/stdint.h:57:26")
    (type (tag . "__uint_fast32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "uint_fast64_t")
    (location . "/usr/include/sys/stdint.h:58:26")
    (type (tag . "__uint_fast64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "imaxdiv_t")
    (location . "/usr/include/inttypes.h:47:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 33)
      (location . "/usr/include/inttypes.h:44:9") (bit-size . 128)
      (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "quot") (bit-offset . 0) (bit-size . 64)
            (bit-alignment . 64) (type (tag . "intmax_t")))
          ((tag . "field") (name . "rem") (bit-offset . 64) (bit-size . 64)
            (bit-alignment . 64) (type (tag . "intmax_t")))))))
  ((tag . "function") (name . "imaxabs") (ns . 0)
    (location . "/usr/include/inttypes.h:53:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "intmax_t")))))
    (return-type (tag . "intmax_t")))
  ((tag . "function") (name . "imaxdiv") (ns . 0)
    (location . "/usr/include/inttypes.h:54:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "intmax_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "intmax_t")))))
    (return-type (tag . "imaxdiv_t")))
  ((tag . "function") (name . "strtoimax") (ns . 0)
    (location . "/usr/include/inttypes.h:56:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "intmax_t")))
  ((tag . "function") (name . "strtoumax") (ns . 0)
    (location . "/usr/include/inttypes.h:57:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "uintmax_t")))
  ((tag . "function") (name . "wcstoimax") (ns . 0)
    (location . "/usr/include/inttypes.h:58:10") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "intmax_t")))
  ((tag . "function") (name . "wcstoumax") (ns . 0)
    (location . "/usr/include/inttypes.h:60:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "wchar_t")))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "uintmax_t")))
  ((tag . "function") (name . "isalnum") (ns . 0)
    (location . "/usr/include/ctype.h:51:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isalpha") (ns . 0)
    (location . "/usr/include/ctype.h:52:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "iscntrl") (ns . 0)
    (location . "/usr/include/ctype.h:53:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isdigit") (ns . 0)
    (location . "/usr/include/ctype.h:54:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isgraph") (ns . 0)
    (location . "/usr/include/ctype.h:55:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "islower") (ns . 0)
    (location . "/usr/include/ctype.h:56:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isprint") (ns . 0)
    (location . "/usr/include/ctype.h:57:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ispunct") (ns . 0)
    (location . "/usr/include/ctype.h:58:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isspace") (ns . 0)
    (location . "/usr/include/ctype.h:59:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isupper") (ns . 0)
    (location . "/usr/include/ctype.h:60:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isxdigit") (ns . 0)
    (location . "/usr/include/ctype.h:61:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tolower") (ns . 0)
    (location . "/usr/include/ctype.h:62:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "toupper") (ns . 0)
    (location . "/usr/include/ctype.h:63:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isascii") (ns . 0)
    (location . "/usr/include/ctype.h:66:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "toascii") (ns . 0)
    (location . "/usr/include/ctype.h:67:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isblank") (ns . 0)
    (location . "/usr/include/ctype.h:71:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "digittoint") (ns . 0)
    (location . "/usr/include/ctype.h:75:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ishexnumber") (ns . 0)
    (location . "/usr/include/ctype.h:76:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isideogram") (ns . 0)
    (location . "/usr/include/ctype.h:77:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isnumber") (ns . 0)
    (location . "/usr/include/ctype.h:78:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isphonogram") (ns . 0)
    (location . "/usr/include/ctype.h:79:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isrune") (ns . 0)
    (location . "/usr/include/ctype.h:80:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isspecial") (ns . 0)
    (location . "/usr/include/ctype.h:81:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "___runetype_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:51:16")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "___tolower_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:52:14")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "function") (name . "___toupper_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:53:14")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type (tag . "__ct_rune_t")))
  ((tag . "function") (name . "__runes_for_locale") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:54:14")
    (variadic . #f) (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter") (name . "") (type (tag . "locale_t")))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "_RuneLocale"))))
  ((tag . "function") (name . "__sbmaskrune_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:99:1")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "__f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "__loc")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__sbistype_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:101:1")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "__f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "__loc")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__sbmaskrune_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:104:1")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "__f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "__loc")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__sbistype_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:113:1")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . "__ct_rune_t")))
        ((tag . "parameter")
          (name . "__f")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "__loc")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isalnum_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:124:1 <Spelling=<scratch space>:23:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isalnum_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:124:1 <Spelling=<scratch space>:25:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isalpha_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:125:1 <Spelling=<scratch space>:27:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isalpha_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:125:1 <Spelling=<scratch space>:29:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isblank_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:126:1 <Spelling=<scratch space>:31:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isblank_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:126:1 <Spelling=<scratch space>:33:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "iscntrl_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:127:1 <Spelling=<scratch space>:35:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "iscntrl_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:127:1 <Spelling=<scratch space>:37:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isdigit_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:128:1 <Spelling=<scratch space>:39:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isdigit_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:128:1 <Spelling=<scratch space>:41:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isgraph_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:129:1 <Spelling=<scratch space>:43:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isgraph_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:129:1 <Spelling=<scratch space>:45:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ishexnumber_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:130:1 <Spelling=<scratch space>:47:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ishexnumber_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:130:1 <Spelling=<scratch space>:49:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isideogram_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:131:1 <Spelling=<scratch space>:51:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isideogram_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:131:1 <Spelling=<scratch space>:53:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "islower_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:132:1 <Spelling=<scratch space>:55:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "islower_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:132:1 <Spelling=<scratch space>:57:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isnumber_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:133:1 <Spelling=<scratch space>:59:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isnumber_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:133:1 <Spelling=<scratch space>:61:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isphonogram_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:134:1 <Spelling=<scratch space>:63:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isphonogram_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:134:1 <Spelling=<scratch space>:65:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isprint_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:135:1 <Spelling=<scratch space>:67:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isprint_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:135:1 <Spelling=<scratch space>:69:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ispunct_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:136:1 <Spelling=<scratch space>:71:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ispunct_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:136:1 <Spelling=<scratch space>:73:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isrune_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:137:1 <Spelling=<scratch space>:75:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isrune_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:137:1 <Spelling=<scratch space>:77:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isspace_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:138:1 <Spelling=<scratch space>:79:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isspace_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:138:1 <Spelling=<scratch space>:81:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isspecial_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:139:1 <Spelling=<scratch space>:83:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isspecial_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:139:1 <Spelling=<scratch space>:85:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isupper_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:140:1 <Spelling=<scratch space>:87:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isupper_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:140:1 <Spelling=<scratch space>:89:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isxdigit_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:141:1 <Spelling=<scratch space>:91:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isxdigit_l") (ns . 0)
    (location
      .
      "/usr/include/xlocale/_ctype.h:141:1 <Spelling=<scratch space>:93:1>")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "digittoint_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:182:21")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tolower_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:183:21")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "toupper_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:184:21")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "digittoint_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:186:21")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tolower_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:189:21")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "toupper_l") (ns . 0)
    (location . "/usr/include/xlocale/_ctype.h:196:21")
    (variadic . #f) (inline . #t) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "__l")
          (type (tag . "locale_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "union") (ns . 0) (name . "__infinity_un") (id . 0)
    (location . "/usr/include/math.h:27:20") (bit-size . 64)
    (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "__uc") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 8)
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))
            (size . 8)))
        ((tag . "field") (name . "__ud") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64))))))
  ((tag . "extern")
    (name . "__infinity")
    (ns . 0)
    (location . "/usr/include/math.h:30:3")
    (type (tag . ":union") (name . "__infinity_un") (id . 34)))
  ((tag . "union") (ns . 0) (name . "__nan_un") (id . 0)
    (location . "/usr/include/math.h:32:20") (bit-size . 32)
    (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "__uc") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 8)
          (type
            (tag . ":array")
            (type
              (tag . ":unsigned-char")
              (bit-size . 8)
              (bit-alignment . 8))
            (size . 4)))
        ((tag . "field") (name . "__uf") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "extern")
    (name . "__nan")
    (ns . 0)
    (location . "/usr/include/math.h:35:3")
    (type (tag . ":union") (name . "__nan_un") (id . 35)))
  ((tag . "typedef")
    (ns . 0)
    (name . "double_t")
    (location . "/usr/include/math.h:136:20")
    (type (tag . "__double_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "float_t")
    (location . "/usr/include/math.h:137:19")
    (type (tag . "__float_t")))
  ((tag . "extern")
    (name . "signgam")
    (ns . 0)
    (location . "/usr/include/math.h:159:12")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "function") (name . "__fpclassifyd") (ns . 0)
    (location . "/usr/include/math.h:180:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__fpclassifyf") (ns . 0)
    (location . "/usr/include/math.h:181:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__fpclassifyl") (ns . 0)
    (location . "/usr/include/math.h:182:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isfinitef") (ns . 0)
    (location . "/usr/include/math.h:183:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isfinite") (ns . 0)
    (location . "/usr/include/math.h:184:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isfinitel") (ns . 0)
    (location . "/usr/include/math.h:185:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isinff") (ns . 0)
    (location . "/usr/include/math.h:186:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isinf") (ns . 0)
    (location . "/usr/include/math.h:187:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isinfl") (ns . 0)
    (location . "/usr/include/math.h:188:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isnormalf") (ns . 0)
    (location . "/usr/include/math.h:189:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isnormal") (ns . 0)
    (location . "/usr/include/math.h:190:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__isnormall") (ns . 0)
    (location . "/usr/include/math.h:191:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__signbit") (ns . 0)
    (location . "/usr/include/math.h:192:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__signbitf") (ns . 0)
    (location . "/usr/include/math.h:193:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__signbitl") (ns . 0)
    (location . "/usr/include/math.h:194:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__inline_isnan") (ns . 0)
    (location . "/usr/include/math.h:197:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__inline_isnanf") (ns . 0)
    (location . "/usr/include/math.h:204:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "__inline_isnanl") (ns . 0)
    (location . "/usr/include/math.h:211:1") (variadic . #f)
    (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "__x")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "acos") (ns . 0)
    (location . "/usr/include/math.h:232:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "asin") (ns . 0)
    (location . "/usr/include/math.h:233:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "atan") (ns . 0)
    (location . "/usr/include/math.h:234:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "atan2") (ns . 0)
    (location . "/usr/include/math.h:235:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "cos") (ns . 0)
    (location . "/usr/include/math.h:236:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "sin") (ns . 0)
    (location . "/usr/include/math.h:237:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "tan") (ns . 0)
    (location . "/usr/include/math.h:238:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "cosh") (ns . 0)
    (location . "/usr/include/math.h:240:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "sinh") (ns . 0)
    (location . "/usr/include/math.h:241:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "tanh") (ns . 0)
    (location . "/usr/include/math.h:242:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "exp") (ns . 0)
    (location . "/usr/include/math.h:244:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "frexp") (ns . 0)
    (location . "/usr/include/math.h:245:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "ldexp") (ns . 0)
    (location . "/usr/include/math.h:246:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "log") (ns . 0)
    (location . "/usr/include/math.h:247:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "log10") (ns . 0)
    (location . "/usr/include/math.h:248:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "modf") (ns . 0)
    (location . "/usr/include/math.h:249:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":double")
              (bit-size . 64)
              (bit-alignment . 64))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "pow") (ns . 0)
    (location . "/usr/include/math.h:251:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "sqrt") (ns . 0)
    (location . "/usr/include/math.h:252:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "ceil") (ns . 0)
    (location . "/usr/include/math.h:254:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "fabs") (ns . 0)
    (location . "/usr/include/math.h:255:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "floor") (ns . 0)
    (location . "/usr/include/math.h:256:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "fmod") (ns . 0)
    (location . "/usr/include/math.h:257:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "acosh") (ns . 0)
    (location . "/usr/include/math.h:263:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "asinh") (ns . 0)
    (location . "/usr/include/math.h:264:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "atanh") (ns . 0)
    (location . "/usr/include/math.h:265:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "cbrt") (ns . 0)
    (location . "/usr/include/math.h:266:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "erf") (ns . 0)
    (location . "/usr/include/math.h:267:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "erfc") (ns . 0)
    (location . "/usr/include/math.h:268:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "exp2") (ns . 0)
    (location . "/usr/include/math.h:269:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "expm1") (ns . 0)
    (location . "/usr/include/math.h:270:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "fma") (ns . 0)
    (location . "/usr/include/math.h:271:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "hypot") (ns . 0)
    (location . "/usr/include/math.h:272:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "ilogb") (ns . 0)
    (location . "/usr/include/math.h:273:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "lgamma") (ns . 0)
    (location . "/usr/include/math.h:274:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "llrint") (ns . 0)
    (location . "/usr/include/math.h:275:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "llround") (ns . 0)
    (location . "/usr/include/math.h:276:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "log1p") (ns . 0)
    (location . "/usr/include/math.h:277:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "log2") (ns . 0)
    (location . "/usr/include/math.h:278:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "logb") (ns . 0)
    (location . "/usr/include/math.h:279:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "lrint") (ns . 0)
    (location . "/usr/include/math.h:280:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "lround") (ns . 0)
    (location . "/usr/include/math.h:281:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "nan") (ns . 0)
    (location . "/usr/include/math.h:282:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "nextafter") (ns . 0)
    (location . "/usr/include/math.h:283:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "remainder") (ns . 0)
    (location . "/usr/include/math.h:284:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "remquo") (ns . 0)
    (location . "/usr/include/math.h:285:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "rint") (ns . 0)
    (location . "/usr/include/math.h:286:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "j0") (ns . 0)
    (location . "/usr/include/math.h:290:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "j1") (ns . 0)
    (location . "/usr/include/math.h:291:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "jn") (ns . 0)
    (location . "/usr/include/math.h:292:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "y0") (ns . 0)
    (location . "/usr/include/math.h:293:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "y1") (ns . 0)
    (location . "/usr/include/math.h:294:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "yn") (ns . 0)
    (location . "/usr/include/math.h:295:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "gamma") (ns . 0)
    (location . "/usr/include/math.h:298:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "scalb") (ns . 0)
    (location . "/usr/include/math.h:302:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "copysign") (ns . 0)
    (location . "/usr/include/math.h:307:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "fdim") (ns . 0)
    (location . "/usr/include/math.h:308:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "fmax") (ns . 0)
    (location . "/usr/include/math.h:309:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "fmin") (ns . 0)
    (location . "/usr/include/math.h:310:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "nearbyint") (ns . 0)
    (location . "/usr/include/math.h:311:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "round") (ns . 0)
    (location . "/usr/include/math.h:312:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "scalbln") (ns . 0)
    (location . "/usr/include/math.h:313:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "scalbn") (ns . 0)
    (location . "/usr/include/math.h:314:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "tgamma") (ns . 0)
    (location . "/usr/include/math.h:315:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "trunc") (ns . 0)
    (location . "/usr/include/math.h:316:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "drem") (ns . 0)
    (location . "/usr/include/math.h:323:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "finite") (ns . 0)
    (location . "/usr/include/math.h:324:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "isnanf") (ns . 0)
    (location . "/usr/include/math.h:325:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "gamma_r") (ns . 0)
    (location . "/usr/include/math.h:331:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "lgamma_r") (ns . 0)
    (location . "/usr/include/math.h:332:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "significand") (ns . 0)
    (location . "/usr/include/math.h:337:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "acosf") (ns . 0)
    (location . "/usr/include/math.h:342:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "asinf") (ns . 0)
    (location . "/usr/include/math.h:343:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "atanf") (ns . 0)
    (location . "/usr/include/math.h:344:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "atan2f") (ns . 0)
    (location . "/usr/include/math.h:345:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cosf") (ns . 0)
    (location . "/usr/include/math.h:346:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "sinf") (ns . 0)
    (location . "/usr/include/math.h:347:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tanf") (ns . 0)
    (location . "/usr/include/math.h:348:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "coshf") (ns . 0)
    (location . "/usr/include/math.h:350:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "sinhf") (ns . 0)
    (location . "/usr/include/math.h:351:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tanhf") (ns . 0)
    (location . "/usr/include/math.h:352:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "exp2f") (ns . 0)
    (location . "/usr/include/math.h:354:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "expf") (ns . 0)
    (location . "/usr/include/math.h:355:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "expm1f") (ns . 0)
    (location . "/usr/include/math.h:356:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "frexpf") (ns . 0)
    (location . "/usr/include/math.h:357:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ilogbf") (ns . 0)
    (location . "/usr/include/math.h:358:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ldexpf") (ns . 0)
    (location . "/usr/include/math.h:359:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "log10f") (ns . 0)
    (location . "/usr/include/math.h:360:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "log1pf") (ns . 0)
    (location . "/usr/include/math.h:361:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "log2f") (ns . 0)
    (location . "/usr/include/math.h:362:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "logf") (ns . 0)
    (location . "/usr/include/math.h:363:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "modff") (ns . 0)
    (location . "/usr/include/math.h:364:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "powf") (ns . 0)
    (location . "/usr/include/math.h:366:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "sqrtf") (ns . 0)
    (location . "/usr/include/math.h:367:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ceilf") (ns . 0)
    (location . "/usr/include/math.h:369:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fabsf") (ns . 0)
    (location . "/usr/include/math.h:370:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "floorf") (ns . 0)
    (location . "/usr/include/math.h:371:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fmodf") (ns . 0)
    (location . "/usr/include/math.h:372:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "roundf") (ns . 0)
    (location . "/usr/include/math.h:373:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "erff") (ns . 0)
    (location . "/usr/include/math.h:375:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "erfcf") (ns . 0)
    (location . "/usr/include/math.h:376:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "hypotf") (ns . 0)
    (location . "/usr/include/math.h:377:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "lgammaf") (ns . 0)
    (location . "/usr/include/math.h:378:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "tgammaf") (ns . 0)
    (location . "/usr/include/math.h:379:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "acoshf") (ns . 0)
    (location . "/usr/include/math.h:381:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "asinhf") (ns . 0)
    (location . "/usr/include/math.h:382:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "atanhf") (ns . 0)
    (location . "/usr/include/math.h:383:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "cbrtf") (ns . 0)
    (location . "/usr/include/math.h:384:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "logbf") (ns . 0)
    (location . "/usr/include/math.h:385:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "copysignf") (ns . 0)
    (location . "/usr/include/math.h:386:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "llrintf") (ns . 0)
    (location . "/usr/include/math.h:387:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "llroundf") (ns . 0)
    (location . "/usr/include/math.h:388:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "lrintf") (ns . 0)
    (location . "/usr/include/math.h:389:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "lroundf") (ns . 0)
    (location . "/usr/include/math.h:390:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "nanf") (ns . 0)
    (location . "/usr/include/math.h:391:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "nearbyintf") (ns . 0)
    (location . "/usr/include/math.h:392:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "nextafterf") (ns . 0)
    (location . "/usr/include/math.h:393:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "remainderf") (ns . 0)
    (location . "/usr/include/math.h:394:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "remquof") (ns . 0)
    (location . "/usr/include/math.h:395:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "rintf") (ns . 0)
    (location . "/usr/include/math.h:396:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "scalblnf") (ns . 0)
    (location . "/usr/include/math.h:397:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "scalbnf") (ns . 0)
    (location . "/usr/include/math.h:398:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "truncf") (ns . 0)
    (location . "/usr/include/math.h:399:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fdimf") (ns . 0)
    (location . "/usr/include/math.h:401:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fmaf") (ns . 0)
    (location . "/usr/include/math.h:402:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fmaxf") (ns . 0)
    (location . "/usr/include/math.h:403:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "fminf") (ns . 0)
    (location . "/usr/include/math.h:404:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "dremf") (ns . 0)
    (location . "/usr/include/math.h:411:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "finitef") (ns . 0)
    (location . "/usr/include/math.h:412:5") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "gammaf") (ns . 0)
    (location . "/usr/include/math.h:413:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "j0f") (ns . 0)
    (location . "/usr/include/math.h:414:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "j1f") (ns . 0)
    (location . "/usr/include/math.h:415:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "jnf") (ns . 0)
    (location . "/usr/include/math.h:416:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "scalbf") (ns . 0)
    (location . "/usr/include/math.h:417:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "y0f") (ns . 0)
    (location . "/usr/include/math.h:418:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "y1f") (ns . 0)
    (location . "/usr/include/math.h:419:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ynf") (ns . 0)
    (location . "/usr/include/math.h:420:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "gammaf_r") (ns . 0)
    (location . "/usr/include/math.h:427:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "lgammaf_r") (ns . 0)
    (location . "/usr/include/math.h:428:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "significandf") (ns . 0)
    (location . "/usr/include/math.h:433:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "acoshl") (ns . 0)
    (location . "/usr/include/math.h:440:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "acosl") (ns . 0)
    (location . "/usr/include/math.h:441:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "asinhl") (ns . 0)
    (location . "/usr/include/math.h:442:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "asinl") (ns . 0)
    (location . "/usr/include/math.h:443:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "atan2l") (ns . 0)
    (location . "/usr/include/math.h:444:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "atanhl") (ns . 0)
    (location . "/usr/include/math.h:445:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "atanl") (ns . 0)
    (location . "/usr/include/math.h:446:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "cbrtl") (ns . 0)
    (location . "/usr/include/math.h:447:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "ceill") (ns . 0)
    (location . "/usr/include/math.h:448:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "copysignl") (ns . 0)
    (location . "/usr/include/math.h:449:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "coshl") (ns . 0)
    (location . "/usr/include/math.h:450:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "cosl") (ns . 0)
    (location . "/usr/include/math.h:451:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "erfcl") (ns . 0)
    (location . "/usr/include/math.h:452:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "erfl") (ns . 0)
    (location . "/usr/include/math.h:453:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "exp2l") (ns . 0)
    (location . "/usr/include/math.h:454:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "expl") (ns . 0)
    (location . "/usr/include/math.h:455:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "expm1l") (ns . 0)
    (location . "/usr/include/math.h:456:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "fabsl") (ns . 0)
    (location . "/usr/include/math.h:457:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "fdiml") (ns . 0)
    (location . "/usr/include/math.h:458:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "floorl") (ns . 0)
    (location . "/usr/include/math.h:459:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "fmal") (ns . 0)
    (location . "/usr/include/math.h:460:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "fmaxl") (ns . 0)
    (location . "/usr/include/math.h:461:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "fminl") (ns . 0)
    (location . "/usr/include/math.h:462:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "fmodl") (ns . 0)
    (location . "/usr/include/math.h:463:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "frexpl") (ns . 0)
    (location . "/usr/include/math.h:464:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "hypotl") (ns . 0)
    (location . "/usr/include/math.h:465:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "ilogbl") (ns . 0)
    (location . "/usr/include/math.h:466:6") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "ldexpl") (ns . 0)
    (location . "/usr/include/math.h:467:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "lgammal") (ns . 0)
    (location . "/usr/include/math.h:468:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "llrintl") (ns . 0)
    (location . "/usr/include/math.h:469:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "llroundl") (ns . 0)
    (location . "/usr/include/math.h:470:11") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "log10l") (ns . 0)
    (location . "/usr/include/math.h:471:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "log1pl") (ns . 0)
    (location . "/usr/include/math.h:472:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "log2l") (ns . 0)
    (location . "/usr/include/math.h:473:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "logbl") (ns . 0)
    (location . "/usr/include/math.h:474:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "logl") (ns . 0)
    (location . "/usr/include/math.h:475:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "lrintl") (ns . 0)
    (location . "/usr/include/math.h:476:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "lroundl") (ns . 0)
    (location . "/usr/include/math.h:477:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "modfl") (ns . 0)
    (location . "/usr/include/math.h:478:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":long-double")
              (bit-size . 128)
              (bit-alignment . 128))))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "nanl") (ns . 0)
    (location . "/usr/include/math.h:479:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "nearbyintl") (ns . 0)
    (location . "/usr/include/math.h:480:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "nextafterl") (ns . 0)
    (location . "/usr/include/math.h:481:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "nexttoward") (ns . 0)
    (location . "/usr/include/math.h:482:9") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "nexttowardf") (ns . 0)
    (location . "/usr/include/math.h:483:8") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "nexttowardl") (ns . 0)
    (location . "/usr/include/math.h:484:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "powl") (ns . 0)
    (location . "/usr/include/math.h:485:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "remainderl") (ns . 0)
    (location . "/usr/include/math.h:486:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "remquol") (ns . 0)
    (location . "/usr/include/math.h:487:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "rintl") (ns . 0)
    (location . "/usr/include/math.h:488:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "roundl") (ns . 0)
    (location . "/usr/include/math.h:489:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "scalblnl") (ns . 0)
    (location . "/usr/include/math.h:490:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":long")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "scalbnl") (ns . 0)
    (location . "/usr/include/math.h:491:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "sinhl") (ns . 0)
    (location . "/usr/include/math.h:492:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "sinl") (ns . 0)
    (location . "/usr/include/math.h:493:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "sqrtl") (ns . 0)
    (location . "/usr/include/math.h:494:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "tanhl") (ns . 0)
    (location . "/usr/include/math.h:495:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "tanl") (ns . 0)
    (location . "/usr/include/math.h:496:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "tgammal") (ns . 0)
    (location . "/usr/include/math.h:497:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "truncl") (ns . 0)
    (location . "/usr/include/math.h:498:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "lgammal_r") (ns . 0)
    (location . "/usr/include/math.h:502:13") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":long-double")
      (bit-size . 128)
      (bit-alignment . 128)))
  ((tag . "function") (name . "sincos") (ns . 0)
    (location . "/usr/include/math.h:503:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":double")
              (bit-size . 64)
              (bit-alignment . 64))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":double")
              (bit-size . 64)
              (bit-alignment . 64))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "sincosf") (ns . 0)
    (location . "/usr/include/math.h:504:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "sincosl") (ns . 0)
    (location . "/usr/include/math.h:505:7") (variadic . #f)
    (inline . #f) (storage-class . "none")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type
            (tag . ":long-double")
            (bit-size . 128)
            (bit-alignment . 128)))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":long-double")
              (bit-size . 128)
              (bit-alignment . 128))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type
              (tag . ":long-double")
              (bit-size . 128)
              (bit-alignment . 128))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "__flt_rounds") (ns . 0)
    (location . "/usr/include/x86/float.h:41:12")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "enum") (ns . 0) (name . "") (id . 36)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:161:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_FALSE") (value . 0))
        ((tag . "field") (name . "SDL_TRUE") (value . 1)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_bool")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:165:3")
    (type (tag . ":enum") (name . "") (id . 36)))
  ((tag . "typedef")
    (ns . 0)
    (name . "Sint8")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:173:16")
    (type (tag . "int8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "Uint8")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:179:17")
    (type (tag . "uint8_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "Sint16")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:185:17")
    (type (tag . "int16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "Uint16")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:191:18")
    (type (tag . "uint16_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "Sint32")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:197:17")
    (type (tag . "int32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "Uint32")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:203:18")
    (type (tag . "uint32_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "Sint64")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:210:17")
    (type (tag . "int64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "Uint64")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:216:18")
    (type (tag . "uint64_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_uint8")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:316:1 <Spelling=<scratch space>:95:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_sint8")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:317:1 <Spelling=<scratch space>:96:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_uint16")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:318:1 <Spelling=<scratch space>:97:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_sint16")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:319:1 <Spelling=<scratch space>:98:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_uint32")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:320:1 <Spelling=<scratch space>:99:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_sint32")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:321:1 <Spelling=<scratch space>:100:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_uint64")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:322:1 <Spelling=<scratch space>:101:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_sint64")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:323:1 <Spelling=<scratch space>:102:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "enum") (ns . 0) (name . "") (id . 37)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:337:9")
    (fields
      .
      #(((tag . "field")
          (name . "DUMMY_ENUM_VALUE")
          (value . 0)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_DUMMY_ENUM")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:340:3")
    (type (tag . ":enum") (name . "") (id . 37)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_compile_time_assert_enum")
    (location
      .
      "/usr/local/include/SDL2/SDL_stdinc.h:342:1 <Spelling=<scratch space>:103:1>")
    (type
      (tag . ":array")
      (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))
      (size . 1)))
  ((tag . "function") (name . "SDL_malloc") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:361:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "size")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_calloc") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:362:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "nmemb")
          (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "size")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_realloc") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:363:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mem")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "size")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_free") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:364:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mem")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_malloc_func")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:366:25")
    (type (tag . ":function-pointer")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_calloc_func")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:367:25")
    (type (tag . ":function-pointer")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_realloc_func")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:368:25")
    (type (tag . ":function-pointer")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_free_func")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:369:24")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "SDL_GetMemoryFunctions") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:374:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "malloc_func")
          (type (tag . ":pointer") (type (tag . "SDL_malloc_func"))))
        ((tag . "parameter")
          (name . "calloc_func")
          (type (tag . ":pointer") (type (tag . "SDL_calloc_func"))))
        ((tag . "parameter")
          (name . "realloc_func")
          (type (tag . ":pointer") (type (tag . "SDL_realloc_func"))))
        ((tag . "parameter")
          (name . "free_func")
          (type (tag . ":pointer") (type (tag . "SDL_free_func"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetMemoryFunctions") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:387:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "malloc_func")
          (type (tag . "SDL_malloc_func")))
        ((tag . "parameter")
          (name . "calloc_func")
          (type (tag . "SDL_calloc_func")))
        ((tag . "parameter")
          (name . "realloc_func")
          (type (tag . "SDL_realloc_func")))
        ((tag . "parameter")
          (name . "free_func")
          (type (tag . "SDL_free_func")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetNumAllocations") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:395:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_getenv") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:397:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_setenv") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:398:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "value")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "overwrite")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_qsort") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:400:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "base")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "nmemb")
          (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "size")
          (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "compare")
          (type (tag . ":function-pointer")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_abs") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:402:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_isdigit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:409:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_isspace") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:410:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_toupper") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:411:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_tolower") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:412:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_memset") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:414:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "c")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "len")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_memset4") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:420:23")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter") (name . "val") (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "dwords")
          (type (tag . "size_t")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_memcpy") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:448:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "len")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_memmove") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:450:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "len")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_memcmp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:451:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "s1")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "s2")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "len")
          (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_wcsdup") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:453:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "wstr")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . ":pointer") (type (tag . "wchar_t"))))
  ((tag . "function") (name . "SDL_wcslen") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:454:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "wstr")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_wcslcpy") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:455:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "maxlen")
          (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_wcslcat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:456:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "maxlen")
          (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_wcscmp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:457:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str1")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))
        ((tag . "parameter")
          (name . "str2")
          (type (tag . ":pointer") (type (tag . "wchar_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_strlen") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:459:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_strlcpy") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:460:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "src")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "maxlen")
          (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_utf8strlcpy") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:461:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "src")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "dst_bytes")
          (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_strlcat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:462:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "src")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "maxlen")
          (type (tag . "size_t")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_strdup") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:463:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_strrev") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:464:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_strupr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:465:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_strlwr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:466:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_strchr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:467:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "c")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_strrchr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:468:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "c")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_strstr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:469:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haystack")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "needle")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_utf8strlen") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:470:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_itoa") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:472:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "value")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "radix")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_uitoa") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:473:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "value")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "radix")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_ltoa") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:474:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "value")
          (type (tag . ":long") (bit-size . 64) (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "radix")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_ultoa") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:475:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "value")
          (type
            (tag . ":unsigned-long")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "radix")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_lltoa") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:476:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "value")
          (type (tag . "Sint64")))
        ((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "radix")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_ulltoa") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:477:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "value")
          (type (tag . "Uint64")))
        ((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "radix")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_atoi") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:479:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_atof") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:480:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_strtol") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:481:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "endp")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "base")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_strtoul") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:482:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "endp")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "base")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_strtoll") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:483:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "endp")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "base")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Sint64")))
  ((tag . "function") (name . "SDL_strtoull") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:484:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "endp")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "base")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint64")))
  ((tag . "function") (name . "SDL_strtod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:485:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "endp")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_strcmp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:487:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str1")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "str2")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_strncmp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:488:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str1")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "str2")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "maxlen")
          (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_strcasecmp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:489:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str1")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "str2")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_strncasecmp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:490:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "str1")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "str2")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "len")
          (type (tag . "size_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_sscanf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:492:29")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "text")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_vsscanf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:493:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "text")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "ap")
          (type (tag . "va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_snprintf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:494:29")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "text")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "maxlen")
          (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_vsnprintf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:495:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "text")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "maxlen")
          (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "ap")
          (type (tag . "va_list")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_acos") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:503:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_acosf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:504:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_asin") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:505:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_asinf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:506:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_atan") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:507:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_atanf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:508:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_atan2") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:509:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_atan2f") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:510:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_ceil") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:511:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_ceilf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:512:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_copysign") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:513:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_copysignf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:514:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_cos") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:515:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_cosf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:516:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_exp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:517:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_expf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:518:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_fabs") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:519:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_fabsf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:520:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_floor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:521:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_floorf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:522:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_fmod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:523:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_fmodf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:524:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_log") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:525:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_logf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:526:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_log10") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:527:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_log10f") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:528:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_pow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:529:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_powf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:530:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_scalbn") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:531:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "n")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_scalbnf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:532:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "n")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_sin") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:533:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_sinf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:534:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_sqrt") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:535:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_sqrtf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:536:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_tan") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:537:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))))
    (return-type
      (tag . ":double")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "function") (name . "SDL_tanf") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:538:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "struct") (ns . 0) (name . "_SDL_iconv_t") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:547:16")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_iconv_t")
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:547:30")
    (type
      (tag . ":pointer")
      (type (tag . "struct") (ns . 0) (name . "_SDL_iconv_t") (id . 0)
        (location . "/usr/local/include/SDL2/SDL_stdinc.h:547:16")
        (bit-size . 0) (bit-alignment . 0) (fields . #()))))
  ((tag . "function") (name . "SDL_iconv_open") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:548:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "tocode")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "fromcode")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_iconv_t")))
  ((tag . "function") (name . "SDL_iconv_close") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:550:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cd")
          (type (tag . "SDL_iconv_t")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_iconv") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:551:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cd")
          (type (tag . "SDL_iconv_t")))
        ((tag . "parameter")
          (name . "inbuf")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "inbytesleft")
          (type (tag . ":pointer") (type (tag . "size_t"))))
        ((tag . "parameter")
          (name . "outbuf")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8)))))
        ((tag . "parameter")
          (name . "outbytesleft")
          (type (tag . ":pointer") (type (tag . "size_t"))))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_iconv_string") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:558:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "tocode")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "fromcode")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "inbuf")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "inbytesleft")
          (type (tag . "size_t")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_memcpy4") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_stdinc.h:594:24")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "dwords")
          (type (tag . "size_t")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_main") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_main.h:117:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "argc")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "argv")
          (type
            (tag . ":pointer")
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8)))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetMainReady") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_main.h:132:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "enum") (ns . 0) (name . "") (id . 39)
    (location . "/usr/local/include/SDL2/SDL_assert.h:102:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_ASSERTION_RETRY") (value . 0))
        ((tag . "field") (name . "SDL_ASSERTION_BREAK") (value . 1))
        ((tag . "field") (name . "SDL_ASSERTION_ABORT") (value . 2))
        ((tag . "field")
          (name . "SDL_ASSERTION_IGNORE")
          (value . 3))
        ((tag . "field")
          (name . "SDL_ASSERTION_ALWAYS_IGNORE")
          (value . 4)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AssertState")
    (location . "/usr/local/include/SDL2/SDL_assert.h:109:3")
    (type (tag . ":enum") (name . "") (id . 39)))
  ((tag . "struct") (ns . 0) (name . "SDL_AssertData") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_assert.h:111:16")
    (bit-size . 384) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "always_ignore") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "trigger_count") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "condition") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "field") (name . "filename") (bit-offset . 128) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "field") (name . "linenum") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "function") (bit-offset . 256) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "field") (name . "next") (bit-offset . 320) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type
              (tag . ":struct")
              (name . "SDL_AssertData")
              (id . 40)))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AssertData")
    (location . "/usr/local/include/SDL2/SDL_assert.h:120:3")
    (type
      (tag . ":struct")
      (name . "SDL_AssertData")
      (id . 40)))
  ((tag . "function") (name . "SDL_ReportAssertion") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_assert.h:125:41")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "")
          (type (tag . ":pointer") (type (tag . "SDL_AssertData"))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_AssertState")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AssertionHandler")
    (location . "/usr/local/include/SDL2/SDL_assert.h:188:35")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "SDL_SetAssertionHandler") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_assert.h:211:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "handler")
          (type (tag . "SDL_AssertionHandler")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetDefaultAssertionHandler") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_assert.h:225:46")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type (tag . "SDL_AssertionHandler")))
  ((tag . "function") (name . "SDL_GetAssertionHandler") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_assert.h:242:46")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "puserdata")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))))
    (return-type (tag . "SDL_AssertionHandler")))
  ((tag . "function") (name . "SDL_GetAssertionReport") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_assert.h:266:48")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_AssertData"))))
  ((tag . "function") (name . "SDL_ResetAssertionReport") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_assert.h:275:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_SpinLock")
    (location . "/usr/local/include/SDL2/SDL_atomic.h:89:13")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AtomicTryLock") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:98:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "lock")
          (type (tag . ":pointer") (type (tag . "SDL_SpinLock"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_AtomicLock") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:105:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "lock")
          (type (tag . ":pointer") (type (tag . "SDL_SpinLock"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_AtomicUnlock") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:112:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "lock")
          (type (tag . ":pointer") (type (tag . "SDL_SpinLock"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_MemoryBarrierReleaseFunction") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:155:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_MemoryBarrierAcquireFunction") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:156:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_atomic_t")
    (location . "/usr/local/include/SDL2/SDL_atomic.h:198:31")
    (type (tag . "struct") (ns . 0) (name . "") (id . 41)
      (location . "/usr/local/include/SDL2/SDL_atomic.h:198:9")
      (bit-size . 32) (bit-alignment . 32)
      (fields
        .
        #(((tag . "field") (name . "value") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 32)
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32)))))))
  ((tag . "function") (name . "SDL_AtomicCAS") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:207:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type (tag . ":pointer") (type (tag . "SDL_atomic_t"))))
        ((tag . "parameter")
          (name . "oldval")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "newval")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_AtomicSet") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:214:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type (tag . ":pointer") (type (tag . "SDL_atomic_t"))))
        ((tag . "parameter")
          (name . "v")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AtomicGet") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:219:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type (tag . ":pointer") (type (tag . "SDL_atomic_t"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AtomicAdd") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:228:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type (tag . ":pointer") (type (tag . "SDL_atomic_t"))))
        ((tag . "parameter")
          (name . "v")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AtomicCASPtr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:254:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))
        ((tag . "parameter")
          (name . "oldval")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "newval")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_AtomicSetPtr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:261:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))
        ((tag . "parameter")
          (name . "v")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_AtomicGetPtr") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_atomic.h:266:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_SetError") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_error.h:41:29")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetError") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_error.h:42:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_ClearError") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_error.h:43:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "enum") (ns . 0) (name . "") (id . 42)
    (location . "/usr/local/include/SDL2/SDL_error.h:55:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_ENOMEM") (value . 0))
        ((tag . "field") (name . "SDL_EFREAD") (value . 1))
        ((tag . "field") (name . "SDL_EFWRITE") (value . 2))
        ((tag . "field") (name . "SDL_EFSEEK") (value . 3))
        ((tag . "field") (name . "SDL_UNSUPPORTED") (value . 4))
        ((tag . "field") (name . "SDL_LASTERROR") (value . 5)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_errorcode")
    (location . "/usr/local/include/SDL2/SDL_error.h:63:3")
    (type (tag . ":enum") (name . "") (id . 42)))
  ((tag . "function") (name . "SDL_Error") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_error.h:65:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "code")
          (type (tag . "SDL_errorcode")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_Swap16") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_endian.h:78:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type (tag . "Uint16")))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_Swap32") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_endian.h:122:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type (tag . "Uint32")))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_Swap64") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_endian.h:189:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type (tag . "Uint64")))))
    (return-type (tag . "Uint64")))
  ((tag . "function") (name . "SDL_SwapFloat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_endian.h:213:1")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "struct") (ns . 0) (name . "SDL_mutex") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:58:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_mutex")
    (location . "/usr/local/include/SDL2/SDL_mutex.h:59:26")
    (type (tag . "struct") (ns . 0) (name . "SDL_mutex") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_mutex.h:58:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "function") (name . "SDL_CreateMutex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:64:36")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type (tag . ":pointer") (type (tag . "SDL_mutex"))))
  ((tag . "function") (name . "SDL_LockMutex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:72:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mutex")
          (type (tag . ":pointer") (type (tag . "SDL_mutex"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_TryLockMutex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:79:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mutex")
          (type (tag . ":pointer") (type (tag . "SDL_mutex"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UnlockMutex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:90:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mutex")
          (type (tag . ":pointer") (type (tag . "SDL_mutex"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_DestroyMutex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:95:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mutex")
          (type (tag . ":pointer") (type (tag . "SDL_mutex"))))))
    (return-type (tag . ":void")))
  ((tag . "struct") (ns . 0) (name . "SDL_semaphore") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:106:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_sem")
    (location . "/usr/local/include/SDL2/SDL_mutex.h:107:30")
    (type (tag . "struct") (ns . 0) (name . "SDL_semaphore") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_mutex.h:106:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "function") (name . "SDL_CreateSemaphore") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:112:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "initial_value")
          (type (tag . "Uint32")))))
    (return-type (tag . ":pointer") (type (tag . "SDL_sem"))))
  ((tag . "function") (name . "SDL_DestroySemaphore") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:117:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sem")
          (type (tag . ":pointer") (type (tag . "SDL_sem"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SemWait") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:124:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sem")
          (type (tag . ":pointer") (type (tag . "SDL_sem"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SemTryWait") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:132:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sem")
          (type (tag . ":pointer") (type (tag . "SDL_sem"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SemWaitTimeout") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:143:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sem")
          (type (tag . ":pointer") (type (tag . "SDL_sem"))))
        ((tag . "parameter")
          (name . "ms")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SemPost") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:150:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sem")
          (type (tag . ":pointer") (type (tag . "SDL_sem"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SemValue") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:155:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sem")
          (type (tag . ":pointer") (type (tag . "SDL_sem"))))))
    (return-type (tag . "Uint32")))
  ((tag . "struct") (ns . 0) (name . "SDL_cond") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:166:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_cond")
    (location . "/usr/local/include/SDL2/SDL_mutex.h:167:25")
    (type (tag . "struct") (ns . 0) (name . "SDL_cond") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_mutex.h:166:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "function") (name . "SDL_CreateCond") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:197:35")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type (tag . ":pointer") (type (tag . "SDL_cond"))))
  ((tag . "function") (name . "SDL_DestroyCond") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:202:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cond")
          (type (tag . ":pointer") (type (tag . "SDL_cond"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_CondSignal") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:209:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cond")
          (type (tag . ":pointer") (type (tag . "SDL_cond"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_CondBroadcast") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:216:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cond")
          (type (tag . ":pointer") (type (tag . "SDL_cond"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_CondWait") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:227:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cond")
          (type (tag . ":pointer") (type (tag . "SDL_cond"))))
        ((tag . "parameter")
          (name . "mutex")
          (type (tag . ":pointer") (type (tag . "SDL_mutex"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_CondWaitTimeout") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mutex.h:237:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cond")
          (type (tag . ":pointer") (type (tag . "SDL_cond"))))
        ((tag . "parameter")
          (name . "mutex")
          (type (tag . ":pointer") (type (tag . "SDL_mutex"))))
        ((tag . "parameter")
          (name . "ms")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "struct") (ns . 0) (name . "SDL_Thread") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:45:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Thread")
    (location . "/usr/local/include/SDL2/SDL_thread.h:46:27")
    (type (tag . "struct") (ns . 0) (name . "SDL_Thread") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_thread.h:45:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_threadID")
    (location . "/usr/local/include/SDL2/SDL_thread.h:49:23")
    (type
      (tag . ":unsigned-long")
      (bit-size . 64)
      (bit-alignment . 64)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TLSID")
    (location . "/usr/local/include/SDL2/SDL_thread.h:52:22")
    (type
      (tag . ":unsigned-int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "enum") (ns . 0) (name . "") (id . 47)
    (location . "/usr/local/include/SDL2/SDL_thread.h:59:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_THREAD_PRIORITY_LOW")
          (value . 0))
        ((tag . "field")
          (name . "SDL_THREAD_PRIORITY_NORMAL")
          (value . 1))
        ((tag . "field")
          (name . "SDL_THREAD_PRIORITY_HIGH")
          (value . 2))
        ((tag . "field")
          (name . "SDL_THREAD_PRIORITY_TIME_CRITICAL")
          (value . 3)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_ThreadPriority")
    (location . "/usr/local/include/SDL2/SDL_thread.h:64:3")
    (type (tag . ":enum") (name . "") (id . 47)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_ThreadFunction")
    (location . "/usr/local/include/SDL2/SDL_thread.h:70:24")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "SDL_CreateThread") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:169:1")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "fn")
          (type (tag . "SDL_ThreadFunction")))
        ((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "data")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Thread"))))
  ((tag . "function") (name . "SDL_CreateThreadWithStackSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:198:1")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "fn")
          (type (tag . "SDL_ThreadFunction")))
        ((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "stacksize")
          (type (tag . "size_t")))
        ((tag . "parameter")
          (name . "data")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Thread"))))
  ((tag . "function") (name . "SDL_GetThreadName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:209:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "thread")
          (type (tag . ":pointer") (type (tag . "SDL_Thread"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_ThreadID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:214:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_threadID")))
  ((tag . "function") (name . "SDL_GetThreadID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:221:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "thread")
          (type (tag . ":pointer") (type (tag . "SDL_Thread"))))))
    (return-type (tag . "SDL_threadID")))
  ((tag . "function") (name . "SDL_SetThreadPriority") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:226:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "priority")
          (type (tag . "SDL_ThreadPriority")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_WaitThread") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:246:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "thread")
          (type (tag . ":pointer") (type (tag . "SDL_Thread"))))
        ((tag . "parameter")
          (name . "status")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_DetachThread") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:274:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "thread")
          (type (tag . ":pointer") (type (tag . "SDL_Thread"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_TLSCreate") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:306:35")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_TLSID")))
  ((tag . "function") (name . "SDL_TLSGet") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:318:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "id")
          (type (tag . "SDL_TLSID")))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_TLSSet") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_thread.h:332:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "id")
          (type (tag . "SDL_TLSID")))
        ((tag . "parameter")
          (name . "value")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "destructor")
          (type (tag . ":function-pointer")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "struct") (ns . 0) (name . "SDL_RWops") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:52:16")
    (bit-size . 576) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "size") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "seek") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "read") (bit-offset . 128) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "write") (bit-offset . 192) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "close") (bit-offset . 256) (bit-size . 64)
          (bit-alignment . 64) (type (tag . ":function-pointer")))
        ((tag . "field") (name . "type") (bit-offset . 320) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "hidden") (bit-offset . 384) (bit-size . 192)
          (bit-alignment . 64)
          (type (tag . "union") (ns . 0) (name . "") (id . 48)
            (location . "/usr/local/include/SDL2/SDL_rwops.h:94:5")
            (bit-size . 192) (bit-alignment . 64)
            (fields
              .
              #(((tag . "field") (name . "stdio") (bit-offset . 0) (bit-size . 128)
                  (bit-alignment . 64)
                  (type (tag . "struct") (ns . 0) (name . "") (id . 49)
                    (location
                      .
                      "/usr/local/include/SDL2/SDL_rwops.h:124:9")
                    (bit-size . 128) (bit-alignment . 64)
                    (fields
                      .
                      #(((tag . "field") (name . "autoclose") (bit-offset . 0)
                          (bit-size . 32) (bit-alignment . 32)
                          (type (tag . "SDL_bool")))
                        ((tag . "field") (name . "fp") (bit-offset . 64) (bit-size . 64)
                          (bit-alignment . 64)
                          (type
                            (tag . ":pointer")
                            (type (tag . "FILE"))))))))
                ((tag . "field") (name . "mem") (bit-offset . 0) (bit-size . 192)
                  (bit-alignment . 64)
                  (type (tag . "struct") (ns . 0) (name . "") (id . 50)
                    (location
                      .
                      "/usr/local/include/SDL2/SDL_rwops.h:130:9")
                    (bit-size . 192) (bit-alignment . 64)
                    (fields
                      .
                      #(((tag . "field") (name . "base") (bit-offset . 0) (bit-size . 64)
                          (bit-alignment . 64)
                          (type (tag . ":pointer") (type (tag . "Uint8"))))
                        ((tag . "field") (name . "here") (bit-offset . 64) (bit-size . 64)
                          (bit-alignment . 64)
                          (type (tag . ":pointer") (type (tag . "Uint8"))))
                        ((tag . "field") (name . "stop") (bit-offset . 128)
                          (bit-size . 64) (bit-alignment . 64)
                          (type
                            (tag . ":pointer")
                            (type (tag . "Uint8"))))))))
                ((tag . "field") (name . "unknown") (bit-offset . 0) (bit-size . 128)
                  (bit-alignment . 64)
                  (type (tag . "struct") (ns . 0) (name . "") (id . 51)
                    (location
                      .
                      "/usr/local/include/SDL2/SDL_rwops.h:136:9")
                    (bit-size . 128) (bit-alignment . 64)
                    (fields
                      .
                      #(((tag . "field") (name . "data1") (bit-offset . 0) (bit-size . 64)
                          (bit-alignment . 64)
                          (type (tag . ":pointer") (type (tag . ":void"))))
                        ((tag . "field") (name . "data2") (bit-offset . 64)
                          (bit-size . 64) (bit-alignment . 64)
                          (type
                            (tag . ":pointer")
                            (type (tag . ":void")))))))))))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_RWops")
    (location . "/usr/local/include/SDL2/SDL_rwops.h:143:3")
    (type (tag . ":struct") (name . "SDL_RWops") (id . 52)))
  ((tag . "function") (name . "SDL_RWFromFile") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:153:36")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "file")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "mode")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . "SDL_RWops"))))
  ((tag . "function") (name . "SDL_RWFromFP") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:157:36")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "fp")
          (type (tag . ":pointer") (type (tag . "FILE"))))
        ((tag . "parameter")
          (name . "autoclose")
          (type (tag . "SDL_bool")))))
    (return-type (tag . ":pointer") (type (tag . "SDL_RWops"))))
  ((tag . "function") (name . "SDL_RWFromMem") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:164:36")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mem")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "size")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":pointer") (type (tag . "SDL_RWops"))))
  ((tag . "function") (name . "SDL_RWFromConstMem") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:165:36")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mem")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "size")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":pointer") (type (tag . "SDL_RWops"))))
  ((tag . "function") (name . "SDL_AllocRW") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:171:36")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type (tag . ":pointer") (type (tag . "SDL_RWops"))))
  ((tag . "function") (name . "SDL_FreeRW") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:172:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "area")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LoadFile_RW") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:206:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "datasize")
          (type (tag . ":pointer") (type (tag . "size_t"))))
        ((tag . "parameter")
          (name . "freesrc")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_ReadU8") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:222:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . "Uint8")))
  ((tag . "function") (name . "SDL_ReadLE16") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:223:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_ReadBE16") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:224:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_ReadLE32") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:225:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_ReadBE32") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:226:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_ReadLE64") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:227:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . "Uint64")))
  ((tag . "function") (name . "SDL_ReadBE64") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:228:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type (tag . "Uint64")))
  ((tag . "function") (name . "SDL_WriteU8") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:237:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "value")
          (type (tag . "Uint8")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_WriteLE16") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:238:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "value")
          (type (tag . "Uint16")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_WriteBE16") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:239:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "value")
          (type (tag . "Uint16")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_WriteLE32") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:240:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "value")
          (type (tag . "Uint32")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_WriteBE32") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:241:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "value")
          (type (tag . "Uint32")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_WriteLE64") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:242:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "value")
          (type (tag . "Uint64")))))
    (return-type (tag . "size_t")))
  ((tag . "function") (name . "SDL_WriteBE64") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rwops.h:243:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "value")
          (type (tag . "Uint64")))))
    (return-type (tag . "size_t")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioFormat")
    (location . "/usr/local/include/SDL2/SDL_audio.h:64:16")
    (type (tag . "Uint16")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioCallback")
    (location . "/usr/local/include/SDL2/SDL_audio.h:163:25")
    (type (tag . ":function-pointer")))
  ((tag . "struct") (ns . 0) (name . "SDL_AudioSpec") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:178:16")
    (bit-size . 256) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "freq") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "format") (bit-offset . 32) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "SDL_AudioFormat")))
        ((tag . "field") (name . "channels") (bit-offset . 48) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "silence") (bit-offset . 56) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "samples") (bit-offset . 64) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "padding") (bit-offset . 80) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "size") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "callback") (bit-offset . 128) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "SDL_AudioCallback")))
        ((tag . "field") (name . "userdata") (bit-offset . 192) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . ":void")))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioSpec")
    (location . "/usr/local/include/SDL2/SDL_audio.h:189:3")
    (type (tag . ":struct") (name . "SDL_AudioSpec") (id . 53)))
  ((tag . "struct") (ns . 0) (name . "SDL_AudioCVT") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:192:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioFilter")
    (location . "/usr/local/include/SDL2/SDL_audio.h:193:25")
    (type (tag . ":function-pointer")))
  ((tag . "struct") (ns . 0) (name . "SDL_AudioCVT") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:226:16")
    (bit-size . 1024) (bit-alignment . 8)
    (fields
      .
      #(((tag . "field") (name . "needed") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "src_format") (bit-offset . 32) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "SDL_AudioFormat")))
        ((tag . "field") (name . "dst_format") (bit-offset . 48) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "SDL_AudioFormat")))
        ((tag . "field") (name . "rate_incr") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "field") (name . "buf") (bit-offset . 128) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "field") (name . "len") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "len_cvt") (bit-offset . 224) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "len_mult") (bit-offset . 256) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "len_ratio") (bit-offset . 288) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "field") (name . "filters") (bit-offset . 352) (bit-size . 640)
          (bit-alignment . 64)
          (type
            (tag . ":array")
            (type (tag . "SDL_AudioFilter"))
            (size . 10)))
        ((tag . "field") (name . "filter_index") (bit-offset . 992) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioCVT")
    (location . "/usr/local/include/SDL2/SDL_audio.h:239:23")
    (type (tag . ":struct") (name . "SDL_AudioCVT") (id . 54)))
  ((tag . "function") (name . "SDL_GetNumAudioDrivers") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:251:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetAudioDriver") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:252:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_AudioInit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:263:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "driver_name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AudioQuit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:264:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetCurrentAudioDriver") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:271:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_OpenAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:318:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "desired")
          (type (tag . ":pointer") (type (tag . "SDL_AudioSpec"))))
        ((tag . "parameter")
          (name . "obtained")
          (type (tag . ":pointer") (type (tag . "SDL_AudioSpec"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioDeviceID")
    (location . "/usr/local/include/SDL2/SDL_audio.h:330:16")
    (type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetNumAudioDevices") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:344:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "iscapture")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetAudioDeviceName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:359:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "index")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "iscapture")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_OpenAudioDevice") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:376:43")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "iscapture")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "desired")
          (type (tag . ":pointer") (type (tag . "SDL_AudioSpec"))))
        ((tag . "parameter")
          (name . "obtained")
          (type (tag . ":pointer") (type (tag . "SDL_AudioSpec"))))
        ((tag . "parameter")
          (name . "allowed_changes")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_AudioDeviceID")))
  ((tag . "enum") (ns . 0) (name . "") (id . 55)
    (location . "/usr/local/include/SDL2/SDL_audio.h:395:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_AUDIO_STOPPED") (value . 0))
        ((tag . "field") (name . "SDL_AUDIO_PLAYING") (value . 1))
        ((tag . "field") (name . "SDL_AUDIO_PAUSED") (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioStatus")
    (location . "/usr/local/include/SDL2/SDL_audio.h:400:3")
    (type (tag . ":enum") (name . "") (id . 55)))
  ((tag . "function") (name . "SDL_GetAudioStatus") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:401:41")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_AudioStatus")))
  ((tag . "function") (name . "SDL_GetAudioDeviceStatus") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:404:1")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))))
    (return-type (tag . "SDL_AudioStatus")))
  ((tag . "function") (name . "SDL_PauseAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:417:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pause_on")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_PauseAudioDevice") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:418:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))
        ((tag . "parameter")
          (name . "pause_on")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LoadWAV_RW") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:441:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "freesrc")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "spec")
          (type (tag . ":pointer") (type (tag . "SDL_AudioSpec"))))
        ((tag . "parameter")
          (name . "audio_buf")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "Uint8")))))
        ((tag . "parameter")
          (name . "audio_len")
          (type (tag . ":pointer") (type (tag . "Uint32"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_AudioSpec"))))
  ((tag . "function") (name . "SDL_FreeWAV") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:457:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "audio_buf")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_BuildAudioCVT") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:468:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cvt")
          (type (tag . ":pointer") (type (tag . "SDL_AudioCVT"))))
        ((tag . "parameter")
          (name . "src_format")
          (type (tag . "SDL_AudioFormat")))
        ((tag . "parameter")
          (name . "src_channels")
          (type (tag . "Uint8")))
        ((tag . "parameter")
          (name . "src_rate")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "dst_format")
          (type (tag . "SDL_AudioFormat")))
        ((tag . "parameter")
          (name . "dst_channels")
          (type (tag . "Uint8")))
        ((tag . "parameter")
          (name . "dst_rate")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_ConvertAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:488:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cvt")
          (type (tag . ":pointer") (type (tag . "SDL_AudioCVT"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "struct") (ns . 0) (name . "_SDL_AudioStream") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:498:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioStream")
    (location . "/usr/local/include/SDL2/SDL_audio.h:499:33")
    (type (tag . "struct") (ns . 0) (name . "_SDL_AudioStream")
      (id . 0)
      (location . "/usr/local/include/SDL2/SDL_audio.h:498:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "function") (name . "SDL_NewAudioStream") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:519:43")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src_format")
          (type (tag . "SDL_AudioFormat")))
        ((tag . "parameter")
          (name . "src_channels")
          (type (tag . "Uint8")))
        ((tag . "parameter")
          (name . "src_rate")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "dst_format")
          (type (tag . "SDL_AudioFormat")))
        ((tag . "parameter")
          (name . "dst_channels")
          (type (tag . "Uint8")))
        ((tag . "parameter")
          (name . "dst_rate")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_AudioStream"))))
  ((tag . "function") (name . "SDL_AudioStreamPut") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:541:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "stream")
          (type (tag . ":pointer") (type (tag . "SDL_AudioStream"))))
        ((tag . "parameter")
          (name . "buf")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "len")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AudioStreamGet") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:558:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "stream")
          (type (tag . ":pointer") (type (tag . "SDL_AudioStream"))))
        ((tag . "parameter")
          (name . "buf")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "len")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AudioStreamAvailable") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:573:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "stream")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_AudioStream"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AudioStreamFlush") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:590:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "stream")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_AudioStream"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AudioStreamClear") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:602:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "stream")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_AudioStream"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_FreeAudioStream") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:614:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "stream")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_AudioStream"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_MixAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:624:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter") (name . "len") (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "volume")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_MixAudioFormat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:632:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "format")
          (type (tag . "SDL_AudioFormat")))
        ((tag . "parameter") (name . "len") (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "volume")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_QueueAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:676:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))
        ((tag . "parameter")
          (name . "data")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "len")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_DequeueAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:722:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))
        ((tag . "parameter")
          (name . "data")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "len")
          (type (tag . "Uint32")))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetQueuedAudioSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:758:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_ClearQueuedAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:794:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LockAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:806:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LockAudioDevice") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:807:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_UnlockAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:808:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_UnlockAudioDevice") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:809:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_CloseAudio") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:815:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_CloseAudioDevice") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_audio.h:816:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dev")
          (type (tag . "SDL_AudioDeviceID")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetClipboardText") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_clipboard.h:46:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "text")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetClipboardText") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_clipboard.h:53:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_HasClipboardText") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_clipboard.h:60:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GetCPUCount") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:100:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetCPUCacheLineSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:108:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HasRDTSC") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:113:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasAltiVec") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:118:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasMMX") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:123:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_Has3DNow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:128:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasSSE") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:133:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasSSE2") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:138:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasSSE3") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:143:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasSSE41") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:148:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasSSE42") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:153:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasAVX") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:158:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasAVX2") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:163:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasAVX512F") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:168:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasNEON") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:173:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GetSystemRAM") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_cpuinfo.h:178:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "enum") (ns . 0) (name . "") (id . 57)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:51:1")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_PIXELTYPE_UNKNOWN")
          (value . 0))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_INDEX1")
          (value . 1))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_INDEX4")
          (value . 2))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_INDEX8")
          (value . 3))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_PACKED8")
          (value . 4))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_PACKED16")
          (value . 5))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_PACKED32")
          (value . 6))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_ARRAYU8")
          (value . 7))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_ARRAYU16")
          (value . 8))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_ARRAYU32")
          (value . 9))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_ARRAYF16")
          (value . 10))
        ((tag . "field")
          (name . "SDL_PIXELTYPE_ARRAYF32")
          (value . 11)))))
  ((tag . "enum") (ns . 0) (name . "") (id . 58)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:68:1")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_BITMAPORDER_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_BITMAPORDER_4321")
          (value . 1))
        ((tag . "field")
          (name . "SDL_BITMAPORDER_1234")
          (value . 2)))))
  ((tag . "enum") (ns . 0) (name . "") (id . 59)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:76:1")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_PACKEDORDER_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_XRGB")
          (value . 1))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_RGBX")
          (value . 2))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_ARGB")
          (value . 3))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_RGBA")
          (value . 4))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_XBGR")
          (value . 5))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_BGRX")
          (value . 6))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_ABGR")
          (value . 7))
        ((tag . "field")
          (name . "SDL_PACKEDORDER_BGRA")
          (value . 8)))))
  ((tag . "enum") (ns . 0) (name . "") (id . 60)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:92:1")
    (fields
      .
      #(((tag . "field") (name . "SDL_ARRAYORDER_NONE") (value . 0))
        ((tag . "field") (name . "SDL_ARRAYORDER_RGB") (value . 1))
        ((tag . "field") (name . "SDL_ARRAYORDER_RGBA") (value . 2))
        ((tag . "field") (name . "SDL_ARRAYORDER_ARGB") (value . 3))
        ((tag . "field") (name . "SDL_ARRAYORDER_BGR") (value . 4))
        ((tag . "field") (name . "SDL_ARRAYORDER_BGRA") (value . 5))
        ((tag . "field")
          (name . "SDL_ARRAYORDER_ABGR")
          (value . 6)))))
  ((tag . "enum") (ns . 0) (name . "") (id . 61)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:104:1")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_PACKEDLAYOUT_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_332")
          (value . 1))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_4444")
          (value . 2))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_1555")
          (value . 3))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_5551")
          (value . 4))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_565")
          (value . 5))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_8888")
          (value . 6))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_2101010")
          (value . 7))
        ((tag . "field")
          (name . "SDL_PACKEDLAYOUT_1010102")
          (value . 8)))))
  ((tag . "enum") (ns . 0) (name . "") (id . 62)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:171:1")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_PIXELFORMAT_UNKNOWN")
          (value . 0))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_INDEX1LSB")
          (value . 286261504))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_INDEX1MSB")
          (value . 287310080))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_INDEX4LSB")
          (value . 303039488))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_INDEX4MSB")
          (value . 304088064))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_INDEX8")
          (value . 318769153))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGB332")
          (value . 336660481))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGB444")
          (value . 353504258))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGB555")
          (value . 353570562))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGR555")
          (value . 357764866))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ARGB4444")
          (value . 355602434))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGBA4444")
          (value . 356651010))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ABGR4444")
          (value . 359796738))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGRA4444")
          (value . 360845314))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ARGB1555")
          (value . 355667970))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGBA5551")
          (value . 356782082))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ABGR1555")
          (value . 359862274))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGRA5551")
          (value . 360976386))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGB565")
          (value . 353701890))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGR565")
          (value . 357896194))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGB24")
          (value . 386930691))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGR24")
          (value . 390076419))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGB888")
          (value . 370546692))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGBX8888")
          (value . 371595268))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGR888")
          (value . 374740996))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGRX8888")
          (value . 375789572))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ARGB8888")
          (value . 372645892))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGBA8888")
          (value . 373694468))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ABGR8888")
          (value . 376840196))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGRA8888")
          (value . 377888772))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ARGB2101010")
          (value . 372711428))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_RGBA32")
          (value . 376840196))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ARGB32")
          (value . 377888772))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_BGRA32")
          (value . 372645892))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_ABGR32")
          (value . 373694468))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_YV12")
          (value . 842094169))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_IYUV")
          (value . 1448433993))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_YUY2")
          (value . 844715353))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_UYVY")
          (value . 1498831189))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_YVYU")
          (value . 1431918169))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_NV12")
          (value . 842094158))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_NV21")
          (value . 825382478))
        ((tag . "field")
          (name . "SDL_PIXELFORMAT_EXTERNAL_OES")
          (value . 542328143)))))
  ((tag . "struct") (ns . 0) (name . "SDL_Color") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:295:16")
    (bit-size . 32) (bit-alignment . 8)
    (fields
      .
      #(((tag . "field") (name . "r") (bit-offset . 0)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "g") (bit-offset . 8)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "b") (bit-offset . 16)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "a") (bit-offset . 24)
          (bit-size . 8) (bit-alignment . 8)
          (type (tag . "Uint8"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Color")
    (location . "/usr/local/include/SDL2/SDL_pixels.h:301:3")
    (type (tag . ":struct") (name . "SDL_Color") (id . 63)))
  ((tag . "struct") (ns . 0) (name . "SDL_Palette") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:304:16")
    (bit-size . 192) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "ncolors") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "colors") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . "SDL_Color"))))
        ((tag . "field") (name . "version") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "refcount") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Palette")
    (location . "/usr/local/include/SDL2/SDL_pixels.h:310:3")
    (type (tag . ":struct") (name . "SDL_Palette") (id . 64)))
  ((tag . "struct") (ns . 0) (name . "SDL_PixelFormat") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:315:16")
    (bit-size . 448) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "format") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "palette") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . "SDL_Palette"))))
        ((tag . "field") (name . "BitsPerPixel") (bit-offset . 128) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "BytesPerPixel") (bit-offset . 136) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding") (bit-offset . 144) (bit-size . 16)
          (bit-alignment . 8)
          (type (tag . ":array") (type (tag . "Uint8")) (size . 2)))
        ((tag . "field") (name . "Rmask") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "Gmask") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "Bmask") (bit-offset . 224) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "Amask") (bit-offset . 256) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "Rloss") (bit-offset . 288) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "Gloss") (bit-offset . 296) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "Bloss") (bit-offset . 304) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "Aloss") (bit-offset . 312) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "Rshift") (bit-offset . 320) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "Gshift") (bit-offset . 328) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "Bshift") (bit-offset . 336) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "Ashift") (bit-offset . 344) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "refcount") (bit-offset . 352) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "next") (bit-offset . 384) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type
              (tag . ":struct")
              (name . "SDL_PixelFormat")
              (id . 65)))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_PixelFormat")
    (location . "/usr/local/include/SDL2/SDL_pixels.h:336:3")
    (type
      (tag . ":struct")
      (name . "SDL_PixelFormat")
      (id . 65)))
  ((tag . "function") (name . "SDL_GetPixelFormatName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:341:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "format")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_PixelFormatEnumToMasks") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:350:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "format")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "bpp")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "Rmask")
          (type (tag . ":pointer") (type (tag . "Uint32"))))
        ((tag . "parameter")
          (name . "Gmask")
          (type (tag . ":pointer") (type (tag . "Uint32"))))
        ((tag . "parameter")
          (name . "Bmask")
          (type (tag . ":pointer") (type (tag . "Uint32"))))
        ((tag . "parameter")
          (name . "Amask")
          (type (tag . ":pointer") (type (tag . "Uint32"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_MasksToPixelFormatEnum") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:365:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "bpp")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "Rmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Gmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Bmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Amask")
          (type (tag . "Uint32")))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_AllocFormat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:374:43")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pixel_format")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_PixelFormat"))))
  ((tag . "function") (name . "SDL_FreeFormat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:379:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "format")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_PixelFormat"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_AllocPalette") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:391:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "ncolors")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Palette"))))
  ((tag . "function") (name . "SDL_SetPixelFormatPalette") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:396:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "format")
          (type (tag . ":pointer") (type (tag . "SDL_PixelFormat"))))
        ((tag . "parameter")
          (name . "palette")
          (type (tag . ":pointer") (type (tag . "SDL_Palette"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetPaletteColors") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:409:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "palette")
          (type (tag . ":pointer") (type (tag . "SDL_Palette"))))
        ((tag . "parameter")
          (name . "colors")
          (type (tag . ":pointer") (type (tag . "SDL_Color"))))
        ((tag . "parameter")
          (name . "firstcolor")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "ncolors")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_FreePalette") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:418:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "palette")
          (type (tag . ":pointer") (type (tag . "SDL_Palette"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_MapRGB") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:425:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "format")
          (type (tag . ":pointer") (type (tag . "SDL_PixelFormat"))))
        ((tag . "parameter") (name . "r") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "g") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "b") (type (tag . "Uint8")))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_MapRGBA") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:433:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "format")
          (type (tag . ":pointer") (type (tag . "SDL_PixelFormat"))))
        ((tag . "parameter") (name . "r") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "g") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "b") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "a") (type (tag . "Uint8")))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetRGB") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:442:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pixel")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "format")
          (type (tag . ":pointer") (type (tag . "SDL_PixelFormat"))))
        ((tag . "parameter")
          (name . "r")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "g")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "b")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetRGBA") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:451:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pixel")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "format")
          (type (tag . ":pointer") (type (tag . "SDL_PixelFormat"))))
        ((tag . "parameter")
          (name . "r")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "g")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "b")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "a")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_CalculateGammaRamp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_pixels.h:459:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamma")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "ramp")
          (type (tag . ":pointer") (type (tag . "Uint16"))))))
    (return-type (tag . ":void")))
  ((tag . "struct") (ns . 0) (name . "SDL_Point") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:48:16")
    (bit-size . 64) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "x") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "y") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Point")
    (location . "/usr/local/include/SDL2/SDL_rect.h:52:3")
    (type (tag . ":struct") (name . "SDL_Point") (id . 66)))
  ((tag . "struct") (ns . 0) (name . "SDL_Rect") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:64:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "x") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "y") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "w") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "h") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Rect")
    (location . "/usr/local/include/SDL2/SDL_rect.h:68:3")
    (type (tag . ":struct") (name . "SDL_Rect") (id . 67)))
  ((tag . "function") (name . "SDL_PointInRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:73:27")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "p")
          (type (tag . ":pointer") (type (tag . "SDL_Point"))))
        ((tag . "parameter")
          (name . "r")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_RectEmpty") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:82:27")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "r")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_RectEquals") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:90:27")
    (variadic . #f) (inline . #t) (storage-class . "static")
    (parameters
      .
      #(((tag . "parameter")
          (name . "a")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "b")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasIntersection") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:101:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "A")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "B")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_IntersectRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:109:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "A")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "B")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "result")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_UnionRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:116:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "A")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "B")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "result")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_EnclosePoints") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:125:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "points")
          (type (tag . ":pointer") (type (tag . "SDL_Point"))))
        ((tag . "parameter")
          (name . "count")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "clip")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "result")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_IntersectRectAndLine") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_rect.h:135:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "X1")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "Y1")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "X2")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "Y2")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "enum") (ns . 0) (name . "") (id . 68)
    (location . "/usr/local/include/SDL2/SDL_blendmode.h:40:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_BLENDMODE_NONE") (value . 0))
        ((tag . "field") (name . "SDL_BLENDMODE_BLEND") (value . 1))
        ((tag . "field") (name . "SDL_BLENDMODE_ADD") (value . 2))
        ((tag . "field") (name . "SDL_BLENDMODE_MOD") (value . 4))
        ((tag . "field")
          (name . "SDL_BLENDMODE_INVALID")
          (value . 2147483647)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_BlendMode")
    (location . "/usr/local/include/SDL2/SDL_blendmode.h:57:3")
    (type (tag . ":enum") (name . "") (id . 68)))
  ((tag . "enum") (ns . 0) (name . "") (id . 69)
    (location . "/usr/local/include/SDL2/SDL_blendmode.h:62:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_BLENDOPERATION_ADD")
          (value . 1))
        ((tag . "field")
          (name . "SDL_BLENDOPERATION_SUBTRACT")
          (value . 2))
        ((tag . "field")
          (name . "SDL_BLENDOPERATION_REV_SUBTRACT")
          (value . 3))
        ((tag . "field")
          (name . "SDL_BLENDOPERATION_MINIMUM")
          (value . 4))
        ((tag . "field")
          (name . "SDL_BLENDOPERATION_MAXIMUM")
          (value . 5)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_BlendOperation")
    (location . "/usr/local/include/SDL2/SDL_blendmode.h:70:3")
    (type (tag . ":enum") (name . "") (id . 69)))
  ((tag . "enum") (ns . 0) (name . "") (id . 70)
    (location . "/usr/local/include/SDL2/SDL_blendmode.h:75:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_BLENDFACTOR_ZERO")
          (value . 1))
        ((tag . "field") (name . "SDL_BLENDFACTOR_ONE") (value . 2))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_SRC_COLOR")
          (value . 3))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR")
          (value . 4))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_SRC_ALPHA")
          (value . 5))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA")
          (value . 6))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_DST_COLOR")
          (value . 7))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR")
          (value . 8))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_DST_ALPHA")
          (value . 9))
        ((tag . "field")
          (name . "SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA")
          (value . 10)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_BlendFactor")
    (location . "/usr/local/include/SDL2/SDL_blendmode.h:88:3")
    (type (tag . ":enum") (name . "") (id . 70)))
  ((tag . "function") (name . "SDL_ComposeCustomBlendMode") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_blendmode.h:105:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "srcColorFactor")
          (type (tag . "SDL_BlendFactor")))
        ((tag . "parameter")
          (name . "dstColorFactor")
          (type (tag . "SDL_BlendFactor")))
        ((tag . "parameter")
          (name . "colorOperation")
          (type (tag . "SDL_BlendOperation")))
        ((tag . "parameter")
          (name . "srcAlphaFactor")
          (type (tag . "SDL_BlendFactor")))
        ((tag . "parameter")
          (name . "dstAlphaFactor")
          (type (tag . "SDL_BlendFactor")))
        ((tag . "parameter")
          (name . "alphaOperation")
          (type (tag . "SDL_BlendOperation")))))
    (return-type (tag . "SDL_BlendMode")))
  ((tag . "struct") (ns . 0) (name . "SDL_Surface") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:69:16")
    (bit-size . 768) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "flags") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "format") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . "SDL_PixelFormat"))))
        ((tag . "field") (name . "w") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "h") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "pitch") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "pixels") (bit-offset . 256) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "field") (name . "userdata") (bit-offset . 320) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "field") (name . "locked") (bit-offset . 384) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "lock_data") (bit-offset . 448) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "field") (name . "clip_rect") (bit-offset . 512) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_Rect")))
        ((tag . "field") (name . "map") (bit-offset . 640) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . "struct") (ns . 0) (name . "SDL_BlitMap") (id . 0)
              (location . "/usr/local/include/SDL2/SDL_surface.h:88:12")
              (bit-size . 0) (bit-alignment . 0) (fields . #()))))
        ((tag . "field") (name . "refcount") (bit-offset . 704) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "struct") (ns . 72) (name . "SDL_BlitMap") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:88:12")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Surface")
    (location . "/usr/local/include/SDL2/SDL_surface.h:92:3")
    (type (tag . ":struct") (name . "SDL_Surface") (id . 72)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_blit")
    (location . "/usr/local/include/SDL2/SDL_surface.h:97:23")
    (type (tag . ":function-pointer")))
  ((tag . "enum") (ns . 0) (name . "") (id . 73)
    (location . "/usr/local/include/SDL2/SDL_surface.h:103:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_YUV_CONVERSION_JPEG")
          (value . 0))
        ((tag . "field")
          (name . "SDL_YUV_CONVERSION_BT601")
          (value . 1))
        ((tag . "field")
          (name . "SDL_YUV_CONVERSION_BT709")
          (value . 2))
        ((tag . "field")
          (name . "SDL_YUV_CONVERSION_AUTOMATIC")
          (value . 3)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_YUV_CONVERSION_MODE")
    (location . "/usr/local/include/SDL2/SDL_surface.h:109:3")
    (type (tag . ":enum") (name . "") (id . 73)))
  ((tag . "function") (name . "SDL_CreateRGBSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:129:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "width")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "height")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "depth")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "Rmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Gmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Bmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Amask")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_CreateRGBSurfaceWithFormat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:134:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "width")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "height")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "depth")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "format")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_CreateRGBSurfaceFrom") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:137:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pixels")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "width")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "height")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "depth")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "pitch")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "Rmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Gmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Bmask")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "Amask")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_CreateRGBSurfaceWithFormatFrom") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:146:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pixels")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "width")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "height")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "depth")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "pitch")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "format")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_FreeSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:148:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetSurfacePalette") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:157:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "palette")
          (type (tag . ":pointer") (type (tag . "SDL_Palette"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_LockSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:179:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UnlockSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:181:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LoadBMP_RW") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:192:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "freesrc")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_SaveBMP_RW") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:215:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "freedst")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetSurfaceRLE") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:234:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "flag")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetColorKey") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:248:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "flag")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "key")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HasColorKey") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:256:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GetColorKey") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:268:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "key")
          (type (tag . ":pointer") (type (tag . "Uint32"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetSurfaceColorMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:283:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter") (name . "r") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "g") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "b") (type (tag . "Uint8")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetSurfaceColorMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:299:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "r")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "g")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "b")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetSurfaceAlphaMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:313:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "alpha")
          (type (tag . "Uint8")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetSurfaceAlphaMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:326:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "alpha")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetSurfaceBlendMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:339:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "blendMode")
          (type (tag . "SDL_BlendMode")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetSurfaceBlendMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:352:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "blendMode")
          (type (tag . ":pointer") (type (tag . "SDL_BlendMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetClipRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:368:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GetClipRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:377:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_DuplicateSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:383:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_ConvertSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:395:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "fmt")
          (type (tag . ":pointer") (type (tag . "SDL_PixelFormat"))))
        ((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_ConvertSurfaceFormat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:397:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "pixel_format")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_ConvertPixels") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:405:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "width")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "height")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "src_format")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "src_pitch")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "dst_format")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "dst_pitch")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_FillRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:421:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "color")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_FillRects") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:423:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "rects")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "count")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "color")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UpperBlit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:489:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "srcrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "dstrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_LowerBlit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:497:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "srcrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "dstrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SoftStretch") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:507:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "srcrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "dstrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UpperBlitScaled") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:518:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "srcrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "dstrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_LowerBlitScaled") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:526:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "srcrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "dstrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetYUVConversionMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:533:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mode")
          (type (tag . "SDL_YUV_CONVERSION_MODE")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetYUVConversionMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:538:49")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type (tag . "SDL_YUV_CONVERSION_MODE")))
  ((tag . "function") (name . "SDL_GetYUVConversionModeForResolution") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_surface.h:543:49")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "width")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "height")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_YUV_CONVERSION_MODE")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_DisplayMode")
    (location . "/usr/local/include/SDL2/SDL_video.h:60:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 74)
      (location . "/usr/local/include/SDL2/SDL_video.h:53:9")
      (bit-size . 192) (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "format") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 32) (type (tag . "Uint32")))
          ((tag . "field") (name . "w") (bit-offset . 32) (bit-size . 32)
            (bit-alignment . 32)
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
          ((tag . "field") (name . "h") (bit-offset . 64) (bit-size . 32)
            (bit-alignment . 32)
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
          ((tag . "field") (name . "refresh_rate") (bit-offset . 96) (bit-size . 32)
            (bit-alignment . 32)
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
          ((tag . "field") (name . "driverdata") (bit-offset . 128) (bit-size . 64)
            (bit-alignment . 64)
            (type (tag . ":pointer") (type (tag . ":void"))))))))
  ((tag . "struct") (ns . 0) (name . "SDL_Window") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:90:16")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Window")
    (location . "/usr/local/include/SDL2/SDL_video.h:90:27")
    (type (tag . "struct") (ns . 0) (name . "SDL_Window") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_video.h:90:16")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "enum") (ns . 0) (name . "") (id . 76)
    (location . "/usr/local/include/SDL2/SDL_video.h:97:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_WINDOW_FULLSCREEN")
          (value . 1))
        ((tag . "field") (name . "SDL_WINDOW_OPENGL") (value . 2))
        ((tag . "field") (name . "SDL_WINDOW_SHOWN") (value . 4))
        ((tag . "field") (name . "SDL_WINDOW_HIDDEN") (value . 8))
        ((tag . "field")
          (name . "SDL_WINDOW_BORDERLESS")
          (value . 16))
        ((tag . "field")
          (name . "SDL_WINDOW_RESIZABLE")
          (value . 32))
        ((tag . "field")
          (name . "SDL_WINDOW_MINIMIZED")
          (value . 64))
        ((tag . "field")
          (name . "SDL_WINDOW_MAXIMIZED")
          (value . 128))
        ((tag . "field")
          (name . "SDL_WINDOW_INPUT_GRABBED")
          (value . 256))
        ((tag . "field")
          (name . "SDL_WINDOW_INPUT_FOCUS")
          (value . 512))
        ((tag . "field")
          (name . "SDL_WINDOW_MOUSE_FOCUS")
          (value . 1024))
        ((tag . "field")
          (name . "SDL_WINDOW_FULLSCREEN_DESKTOP")
          (value . 4097))
        ((tag . "field")
          (name . "SDL_WINDOW_FOREIGN")
          (value . 2048))
        ((tag . "field")
          (name . "SDL_WINDOW_ALLOW_HIGHDPI")
          (value . 8192))
        ((tag . "field")
          (name . "SDL_WINDOW_MOUSE_CAPTURE")
          (value . 16384))
        ((tag . "field")
          (name . "SDL_WINDOW_ALWAYS_ON_TOP")
          (value . 32768))
        ((tag . "field")
          (name . "SDL_WINDOW_SKIP_TASKBAR")
          (value . 65536))
        ((tag . "field")
          (name . "SDL_WINDOW_UTILITY")
          (value . 131072))
        ((tag . "field")
          (name . "SDL_WINDOW_TOOLTIP")
          (value . 262144))
        ((tag . "field")
          (name . "SDL_WINDOW_POPUP_MENU")
          (value . 524288))
        ((tag . "field")
          (name . "SDL_WINDOW_VULKAN")
          (value . 268435456)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_WindowFlags")
    (location . "/usr/local/include/SDL2/SDL_video.h:123:3")
    (type (tag . ":enum") (name . "") (id . 76)))
  ((tag . "enum") (ns . 0) (name . "") (id . 77)
    (location . "/usr/local/include/SDL2/SDL_video.h:146:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_WINDOWEVENT_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_SHOWN")
          (value . 1))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_HIDDEN")
          (value . 2))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_EXPOSED")
          (value . 3))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_MOVED")
          (value . 4))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_RESIZED")
          (value . 5))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_SIZE_CHANGED")
          (value . 6))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_MINIMIZED")
          (value . 7))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_MAXIMIZED")
          (value . 8))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_RESTORED")
          (value . 9))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_ENTER")
          (value . 10))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_LEAVE")
          (value . 11))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_FOCUS_GAINED")
          (value . 12))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_FOCUS_LOST")
          (value . 13))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_CLOSE")
          (value . 14))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_TAKE_FOCUS")
          (value . 15))
        ((tag . "field")
          (name . "SDL_WINDOWEVENT_HIT_TEST")
          (value . 16)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_WindowEventID")
    (location . "/usr/local/include/SDL2/SDL_video.h:170:3")
    (type (tag . ":enum") (name . "") (id . 77)))
  ((tag . "enum") (ns . 0) (name . "") (id . 78)
    (location . "/usr/local/include/SDL2/SDL_video.h:175:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_DISPLAYEVENT_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_DISPLAYEVENT_ORIENTATION")
          (value . 1)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_DisplayEventID")
    (location . "/usr/local/include/SDL2/SDL_video.h:179:3")
    (type (tag . ":enum") (name . "") (id . 78)))
  ((tag . "enum") (ns . 0) (name . "") (id . 79)
    (location . "/usr/local/include/SDL2/SDL_video.h:181:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_ORIENTATION_UNKNOWN")
          (value . 0))
        ((tag . "field")
          (name . "SDL_ORIENTATION_LANDSCAPE")
          (value . 1))
        ((tag . "field")
          (name . "SDL_ORIENTATION_LANDSCAPE_FLIPPED")
          (value . 2))
        ((tag . "field")
          (name . "SDL_ORIENTATION_PORTRAIT")
          (value . 3))
        ((tag . "field")
          (name . "SDL_ORIENTATION_PORTRAIT_FLIPPED")
          (value . 4)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_DisplayOrientation")
    (location . "/usr/local/include/SDL2/SDL_video.h:188:3")
    (type (tag . ":enum") (name . "") (id . 79)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GLContext")
    (location . "/usr/local/include/SDL2/SDL_video.h:193:15")
    (type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "enum") (ns . 0) (name . "") (id . 80)
    (location . "/usr/local/include/SDL2/SDL_video.h:198:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_GL_RED_SIZE") (value . 0))
        ((tag . "field") (name . "SDL_GL_GREEN_SIZE") (value . 1))
        ((tag . "field") (name . "SDL_GL_BLUE_SIZE") (value . 2))
        ((tag . "field") (name . "SDL_GL_ALPHA_SIZE") (value . 3))
        ((tag . "field") (name . "SDL_GL_BUFFER_SIZE") (value . 4))
        ((tag . "field") (name . "SDL_GL_DOUBLEBUFFER") (value . 5))
        ((tag . "field") (name . "SDL_GL_DEPTH_SIZE") (value . 6))
        ((tag . "field") (name . "SDL_GL_STENCIL_SIZE") (value . 7))
        ((tag . "field")
          (name . "SDL_GL_ACCUM_RED_SIZE")
          (value . 8))
        ((tag . "field")
          (name . "SDL_GL_ACCUM_GREEN_SIZE")
          (value . 9))
        ((tag . "field")
          (name . "SDL_GL_ACCUM_BLUE_SIZE")
          (value . 10))
        ((tag . "field")
          (name . "SDL_GL_ACCUM_ALPHA_SIZE")
          (value . 11))
        ((tag . "field") (name . "SDL_GL_STEREO") (value . 12))
        ((tag . "field")
          (name . "SDL_GL_MULTISAMPLEBUFFERS")
          (value . 13))
        ((tag . "field")
          (name . "SDL_GL_MULTISAMPLESAMPLES")
          (value . 14))
        ((tag . "field")
          (name . "SDL_GL_ACCELERATED_VISUAL")
          (value . 15))
        ((tag . "field")
          (name . "SDL_GL_RETAINED_BACKING")
          (value . 16))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_MAJOR_VERSION")
          (value . 17))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_MINOR_VERSION")
          (value . 18))
        ((tag . "field") (name . "SDL_GL_CONTEXT_EGL") (value . 19))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_FLAGS")
          (value . 20))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_PROFILE_MASK")
          (value . 21))
        ((tag . "field")
          (name . "SDL_GL_SHARE_WITH_CURRENT_CONTEXT")
          (value . 22))
        ((tag . "field")
          (name . "SDL_GL_FRAMEBUFFER_SRGB_CAPABLE")
          (value . 23))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_RELEASE_BEHAVIOR")
          (value . 24))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_RESET_NOTIFICATION")
          (value . 25))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_NO_ERROR")
          (value . 26)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GLattr")
    (location . "/usr/local/include/SDL2/SDL_video.h:227:3")
    (type (tag . ":enum") (name . "") (id . 80)))
  ((tag . "enum") (ns . 0) (name . "") (id . 81)
    (location . "/usr/local/include/SDL2/SDL_video.h:229:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_GL_CONTEXT_PROFILE_CORE")
          (value . 1))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_PROFILE_COMPATIBILITY")
          (value . 2))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_PROFILE_ES")
          (value . 4)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GLprofile")
    (location . "/usr/local/include/SDL2/SDL_video.h:234:3")
    (type (tag . ":enum") (name . "") (id . 81)))
  ((tag . "enum") (ns . 0) (name . "") (id . 82)
    (location . "/usr/local/include/SDL2/SDL_video.h:236:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_GL_CONTEXT_DEBUG_FLAG")
          (value . 1))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG")
          (value . 2))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG")
          (value . 4))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_RESET_ISOLATION_FLAG")
          (value . 8)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GLcontextFlag")
    (location . "/usr/local/include/SDL2/SDL_video.h:242:3")
    (type (tag . ":enum") (name . "") (id . 82)))
  ((tag . "enum") (ns . 0) (name . "") (id . 83)
    (location . "/usr/local/include/SDL2/SDL_video.h:244:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH")
          (value . 1)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GLcontextReleaseFlag")
    (location . "/usr/local/include/SDL2/SDL_video.h:248:3")
    (type (tag . ":enum") (name . "") (id . 83)))
  ((tag . "enum") (ns . 0) (name . "") (id . 84)
    (location . "/usr/local/include/SDL2/SDL_video.h:250:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_GL_CONTEXT_RESET_NO_NOTIFICATION")
          (value . 0))
        ((tag . "field")
          (name . "SDL_GL_CONTEXT_RESET_LOSE_CONTEXT")
          (value . 1)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GLContextResetNotification")
    (location . "/usr/local/include/SDL2/SDL_video.h:254:3")
    (type (tag . ":enum") (name . "") (id . 84)))
  ((tag . "function") (name . "SDL_GetNumVideoDrivers") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:263:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetVideoDriver") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:273:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_VideoInit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:289:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "driver_name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_VideoQuit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:298:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetCurrentVideoDriver") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:309:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GetNumVideoDisplays") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:316:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetDisplayName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:325:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GetDisplayBounds") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:335:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetDisplayUsableBounds") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:354:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetDisplayDPI") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:366:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "ddpi")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "hdpi")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "vdpi")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetDisplayOrientation") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:375:48")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_DisplayOrientation")))
  ((tag . "function") (name . "SDL_GetNumDisplayModes") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:382:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetDisplayMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:395:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "modeIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "mode")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_DisplayMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetDesktopDisplayMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:401:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "mode")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_DisplayMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetCurrentDisplayMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:406:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "mode")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_DisplayMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetClosestDisplayMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:430:43")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "displayIndex")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "mode")
          (type (tag . ":pointer") (type (tag . "SDL_DisplayMode"))))
        ((tag . "parameter")
          (name . "closest")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_DisplayMode"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_DisplayMode"))))
  ((tag . "function") (name . "SDL_GetWindowDisplayIndex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:438:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetWindowDisplayMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:454:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "mode")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_DisplayMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetWindowDisplayMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:465:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "mode")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_DisplayMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetWindowPixelFormat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:471:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_CreateWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:515:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "title")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "x")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "w")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "h")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_CreateWindowFrom") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:528:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "data")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_GetWindowID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:533:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetWindowFromID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:538:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "id")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_GetWindowFlags") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:543:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_SetWindowTitle") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:550:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "title")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetWindowTitle") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:558:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_SetWindowIcon") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:566:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "icon")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetWindowData") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:582:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_GetWindowData") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:596:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_SetWindowPosition") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:612:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "x")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetWindowPosition") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:626:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "x")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetWindowSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:647:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "w")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetWindowSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:666:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetWindowBordersSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:684:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "top")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "left")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "bottom")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "right")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetWindowMinimumSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:701:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "min_w")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "min_h")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetWindowMinimumSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:714:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetWindowMaximumSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:730:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "max_w")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "max_h")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetWindowMaximumSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:743:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetWindowBordered") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:760:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "bordered")
          (type (tag . "SDL_bool")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetWindowResizable") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:777:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "resizable")
          (type (tag . "SDL_bool")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_ShowWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:785:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_HideWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:792:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_RaiseWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:797:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_MaximizeWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:804:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_MinimizeWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:811:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_RestoreWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:819:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetWindowFullscreen") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:829:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetWindowSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:845:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Surface"))))
  ((tag . "function") (name . "SDL_UpdateWindowSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:855:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UpdateWindowSurfaceRects") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:865:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "rects")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "numrects")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetWindowGrab") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:880:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "grabbed")
          (type (tag . "SDL_bool")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetWindowGrab") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:890:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GetGrabbedWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:899:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_SetWindowBrightness") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:909:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "brightness")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetWindowBrightness") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:918:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":float")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetWindowOpacity") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:931:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "opacity")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetWindowOpacity") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:946:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "out_opacity")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetWindowModalFor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:956:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "modal_window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "parent_window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetWindowInputFocus") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:970:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetWindowGammaRamp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:990:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "red")
          (type (tag . ":pointer") (type (tag . "Uint16"))))
        ((tag . "parameter")
          (name . "green")
          (type (tag . ":pointer") (type (tag . "Uint16"))))
        ((tag . "parameter")
          (name . "blue")
          (type (tag . ":pointer") (type (tag . "Uint16"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetWindowGammaRamp") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1010:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "red")
          (type (tag . ":pointer") (type (tag . "Uint16"))))
        ((tag . "parameter")
          (name . "green")
          (type (tag . ":pointer") (type (tag . "Uint16"))))
        ((tag . "parameter")
          (name . "blue")
          (type (tag . ":pointer") (type (tag . "Uint16"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "enum") (ns . 0) (name . "") (id . 85)
    (location . "/usr/local/include/SDL2/SDL_video.h:1020:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_HITTEST_NORMAL") (value . 0))
        ((tag . "field")
          (name . "SDL_HITTEST_DRAGGABLE")
          (value . 1))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_TOPLEFT")
          (value . 2))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_TOP")
          (value . 3))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_TOPRIGHT")
          (value . 4))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_RIGHT")
          (value . 5))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_BOTTOMRIGHT")
          (value . 6))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_BOTTOM")
          (value . 7))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_BOTTOMLEFT")
          (value . 8))
        ((tag . "field")
          (name . "SDL_HITTEST_RESIZE_LEFT")
          (value . 9)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HitTestResult")
    (location . "/usr/local/include/SDL2/SDL_video.h:1032:3")
    (type (tag . ":enum") (name . "") (id . 85)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HitTest")
    (location . "/usr/local/include/SDL2/SDL_video.h:1039:37")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "SDL_SetWindowHitTest") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1080:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "callback")
          (type (tag . "SDL_HitTest")))
        ((tag . "parameter")
          (name . "callback_data")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_DestroyWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1087:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_IsScreenSaverEnabled") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1096:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_EnableScreenSaver") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1104:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_DisableScreenSaver") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1112:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GL_LoadLibrary") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1138:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "path")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GL_GetProcAddress") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1143:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "proc")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_GL_UnloadLibrary") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1150:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GL_ExtensionSupported") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1156:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "extension")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GL_ResetAttributes") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1162:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GL_SetAttribute") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1169:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "attr")
          (type (tag . "SDL_GLattr")))
        ((tag . "parameter")
          (name . "value")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GL_GetAttribute") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1177:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "attr")
          (type (tag . "SDL_GLattr")))
        ((tag . "parameter")
          (name . "value")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GL_CreateContext") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1185:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . "SDL_GLContext")))
  ((tag . "function") (name . "SDL_GL_MakeCurrent") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1193:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "context")
          (type (tag . "SDL_GLContext")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GL_GetCurrentWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1199:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_GL_GetCurrentContext") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1204:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_GLContext")))
  ((tag . "function") (name . "SDL_GL_GetDrawableSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1222:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GL_SetSwapInterval") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1237:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "interval")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GL_GetSwapInterval") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1250:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GL_SwapWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1256:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GL_DeleteContext") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_video.h:1263:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "context")
          (type (tag . "SDL_GLContext")))))
    (return-type (tag . ":void")))
  ((tag . "enum") (ns . 0) (name . "") (id . 86)
    (location . "/usr/local/include/SDL2/SDL_scancode.h:43:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_SCANCODE_UNKNOWN")
          (value . 0))
        ((tag . "field") (name . "SDL_SCANCODE_A") (value . 4))
        ((tag . "field") (name . "SDL_SCANCODE_B") (value . 5))
        ((tag . "field") (name . "SDL_SCANCODE_C") (value . 6))
        ((tag . "field") (name . "SDL_SCANCODE_D") (value . 7))
        ((tag . "field") (name . "SDL_SCANCODE_E") (value . 8))
        ((tag . "field") (name . "SDL_SCANCODE_F") (value . 9))
        ((tag . "field") (name . "SDL_SCANCODE_G") (value . 10))
        ((tag . "field") (name . "SDL_SCANCODE_H") (value . 11))
        ((tag . "field") (name . "SDL_SCANCODE_I") (value . 12))
        ((tag . "field") (name . "SDL_SCANCODE_J") (value . 13))
        ((tag . "field") (name . "SDL_SCANCODE_K") (value . 14))
        ((tag . "field") (name . "SDL_SCANCODE_L") (value . 15))
        ((tag . "field") (name . "SDL_SCANCODE_M") (value . 16))
        ((tag . "field") (name . "SDL_SCANCODE_N") (value . 17))
        ((tag . "field") (name . "SDL_SCANCODE_O") (value . 18))
        ((tag . "field") (name . "SDL_SCANCODE_P") (value . 19))
        ((tag . "field") (name . "SDL_SCANCODE_Q") (value . 20))
        ((tag . "field") (name . "SDL_SCANCODE_R") (value . 21))
        ((tag . "field") (name . "SDL_SCANCODE_S") (value . 22))
        ((tag . "field") (name . "SDL_SCANCODE_T") (value . 23))
        ((tag . "field") (name . "SDL_SCANCODE_U") (value . 24))
        ((tag . "field") (name . "SDL_SCANCODE_V") (value . 25))
        ((tag . "field") (name . "SDL_SCANCODE_W") (value . 26))
        ((tag . "field") (name . "SDL_SCANCODE_X") (value . 27))
        ((tag . "field") (name . "SDL_SCANCODE_Y") (value . 28))
        ((tag . "field") (name . "SDL_SCANCODE_Z") (value . 29))
        ((tag . "field") (name . "SDL_SCANCODE_1") (value . 30))
        ((tag . "field") (name . "SDL_SCANCODE_2") (value . 31))
        ((tag . "field") (name . "SDL_SCANCODE_3") (value . 32))
        ((tag . "field") (name . "SDL_SCANCODE_4") (value . 33))
        ((tag . "field") (name . "SDL_SCANCODE_5") (value . 34))
        ((tag . "field") (name . "SDL_SCANCODE_6") (value . 35))
        ((tag . "field") (name . "SDL_SCANCODE_7") (value . 36))
        ((tag . "field") (name . "SDL_SCANCODE_8") (value . 37))
        ((tag . "field") (name . "SDL_SCANCODE_9") (value . 38))
        ((tag . "field") (name . "SDL_SCANCODE_0") (value . 39))
        ((tag . "field")
          (name . "SDL_SCANCODE_RETURN")
          (value . 40))
        ((tag . "field")
          (name . "SDL_SCANCODE_ESCAPE")
          (value . 41))
        ((tag . "field")
          (name . "SDL_SCANCODE_BACKSPACE")
          (value . 42))
        ((tag . "field") (name . "SDL_SCANCODE_TAB") (value . 43))
        ((tag . "field") (name . "SDL_SCANCODE_SPACE") (value . 44))
        ((tag . "field") (name . "SDL_SCANCODE_MINUS") (value . 45))
        ((tag . "field")
          (name . "SDL_SCANCODE_EQUALS")
          (value . 46))
        ((tag . "field")
          (name . "SDL_SCANCODE_LEFTBRACKET")
          (value . 47))
        ((tag . "field")
          (name . "SDL_SCANCODE_RIGHTBRACKET")
          (value . 48))
        ((tag . "field")
          (name . "SDL_SCANCODE_BACKSLASH")
          (value . 49))
        ((tag . "field")
          (name . "SDL_SCANCODE_NONUSHASH")
          (value . 50))
        ((tag . "field")
          (name . "SDL_SCANCODE_SEMICOLON")
          (value . 51))
        ((tag . "field")
          (name . "SDL_SCANCODE_APOSTROPHE")
          (value . 52))
        ((tag . "field") (name . "SDL_SCANCODE_GRAVE") (value . 53))
        ((tag . "field") (name . "SDL_SCANCODE_COMMA") (value . 54))
        ((tag . "field")
          (name . "SDL_SCANCODE_PERIOD")
          (value . 55))
        ((tag . "field") (name . "SDL_SCANCODE_SLASH") (value . 56))
        ((tag . "field")
          (name . "SDL_SCANCODE_CAPSLOCK")
          (value . 57))
        ((tag . "field") (name . "SDL_SCANCODE_F1") (value . 58))
        ((tag . "field") (name . "SDL_SCANCODE_F2") (value . 59))
        ((tag . "field") (name . "SDL_SCANCODE_F3") (value . 60))
        ((tag . "field") (name . "SDL_SCANCODE_F4") (value . 61))
        ((tag . "field") (name . "SDL_SCANCODE_F5") (value . 62))
        ((tag . "field") (name . "SDL_SCANCODE_F6") (value . 63))
        ((tag . "field") (name . "SDL_SCANCODE_F7") (value . 64))
        ((tag . "field") (name . "SDL_SCANCODE_F8") (value . 65))
        ((tag . "field") (name . "SDL_SCANCODE_F9") (value . 66))
        ((tag . "field") (name . "SDL_SCANCODE_F10") (value . 67))
        ((tag . "field") (name . "SDL_SCANCODE_F11") (value . 68))
        ((tag . "field") (name . "SDL_SCANCODE_F12") (value . 69))
        ((tag . "field")
          (name . "SDL_SCANCODE_PRINTSCREEN")
          (value . 70))
        ((tag . "field")
          (name . "SDL_SCANCODE_SCROLLLOCK")
          (value . 71))
        ((tag . "field") (name . "SDL_SCANCODE_PAUSE") (value . 72))
        ((tag . "field")
          (name . "SDL_SCANCODE_INSERT")
          (value . 73))
        ((tag . "field") (name . "SDL_SCANCODE_HOME") (value . 74))
        ((tag . "field")
          (name . "SDL_SCANCODE_PAGEUP")
          (value . 75))
        ((tag . "field")
          (name . "SDL_SCANCODE_DELETE")
          (value . 76))
        ((tag . "field") (name . "SDL_SCANCODE_END") (value . 77))
        ((tag . "field")
          (name . "SDL_SCANCODE_PAGEDOWN")
          (value . 78))
        ((tag . "field") (name . "SDL_SCANCODE_RIGHT") (value . 79))
        ((tag . "field") (name . "SDL_SCANCODE_LEFT") (value . 80))
        ((tag . "field") (name . "SDL_SCANCODE_DOWN") (value . 81))
        ((tag . "field") (name . "SDL_SCANCODE_UP") (value . 82))
        ((tag . "field")
          (name . "SDL_SCANCODE_NUMLOCKCLEAR")
          (value . 83))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_DIVIDE")
          (value . 84))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MULTIPLY")
          (value . 85))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MINUS")
          (value . 86))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_PLUS")
          (value . 87))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_ENTER")
          (value . 88))
        ((tag . "field") (name . "SDL_SCANCODE_KP_1") (value . 89))
        ((tag . "field") (name . "SDL_SCANCODE_KP_2") (value . 90))
        ((tag . "field") (name . "SDL_SCANCODE_KP_3") (value . 91))
        ((tag . "field") (name . "SDL_SCANCODE_KP_4") (value . 92))
        ((tag . "field") (name . "SDL_SCANCODE_KP_5") (value . 93))
        ((tag . "field") (name . "SDL_SCANCODE_KP_6") (value . 94))
        ((tag . "field") (name . "SDL_SCANCODE_KP_7") (value . 95))
        ((tag . "field") (name . "SDL_SCANCODE_KP_8") (value . 96))
        ((tag . "field") (name . "SDL_SCANCODE_KP_9") (value . 97))
        ((tag . "field") (name . "SDL_SCANCODE_KP_0") (value . 98))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_PERIOD")
          (value . 99))
        ((tag . "field")
          (name . "SDL_SCANCODE_NONUSBACKSLASH")
          (value . 100))
        ((tag . "field")
          (name . "SDL_SCANCODE_APPLICATION")
          (value . 101))
        ((tag . "field")
          (name . "SDL_SCANCODE_POWER")
          (value . 102))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_EQUALS")
          (value . 103))
        ((tag . "field") (name . "SDL_SCANCODE_F13") (value . 104))
        ((tag . "field") (name . "SDL_SCANCODE_F14") (value . 105))
        ((tag . "field") (name . "SDL_SCANCODE_F15") (value . 106))
        ((tag . "field") (name . "SDL_SCANCODE_F16") (value . 107))
        ((tag . "field") (name . "SDL_SCANCODE_F17") (value . 108))
        ((tag . "field") (name . "SDL_SCANCODE_F18") (value . 109))
        ((tag . "field") (name . "SDL_SCANCODE_F19") (value . 110))
        ((tag . "field") (name . "SDL_SCANCODE_F20") (value . 111))
        ((tag . "field") (name . "SDL_SCANCODE_F21") (value . 112))
        ((tag . "field") (name . "SDL_SCANCODE_F22") (value . 113))
        ((tag . "field") (name . "SDL_SCANCODE_F23") (value . 114))
        ((tag . "field") (name . "SDL_SCANCODE_F24") (value . 115))
        ((tag . "field")
          (name . "SDL_SCANCODE_EXECUTE")
          (value . 116))
        ((tag . "field") (name . "SDL_SCANCODE_HELP") (value . 117))
        ((tag . "field") (name . "SDL_SCANCODE_MENU") (value . 118))
        ((tag . "field")
          (name . "SDL_SCANCODE_SELECT")
          (value . 119))
        ((tag . "field") (name . "SDL_SCANCODE_STOP") (value . 120))
        ((tag . "field")
          (name . "SDL_SCANCODE_AGAIN")
          (value . 121))
        ((tag . "field") (name . "SDL_SCANCODE_UNDO") (value . 122))
        ((tag . "field") (name . "SDL_SCANCODE_CUT") (value . 123))
        ((tag . "field") (name . "SDL_SCANCODE_COPY") (value . 124))
        ((tag . "field")
          (name . "SDL_SCANCODE_PASTE")
          (value . 125))
        ((tag . "field") (name . "SDL_SCANCODE_FIND") (value . 126))
        ((tag . "field") (name . "SDL_SCANCODE_MUTE") (value . 127))
        ((tag . "field")
          (name . "SDL_SCANCODE_VOLUMEUP")
          (value . 128))
        ((tag . "field")
          (name . "SDL_SCANCODE_VOLUMEDOWN")
          (value . 129))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_COMMA")
          (value . 133))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_EQUALSAS400")
          (value . 134))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL1")
          (value . 135))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL2")
          (value . 136))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL3")
          (value . 137))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL4")
          (value . 138))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL5")
          (value . 139))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL6")
          (value . 140))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL7")
          (value . 141))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL8")
          (value . 142))
        ((tag . "field")
          (name . "SDL_SCANCODE_INTERNATIONAL9")
          (value . 143))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG1")
          (value . 144))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG2")
          (value . 145))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG3")
          (value . 146))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG4")
          (value . 147))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG5")
          (value . 148))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG6")
          (value . 149))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG7")
          (value . 150))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG8")
          (value . 151))
        ((tag . "field")
          (name . "SDL_SCANCODE_LANG9")
          (value . 152))
        ((tag . "field")
          (name . "SDL_SCANCODE_ALTERASE")
          (value . 153))
        ((tag . "field")
          (name . "SDL_SCANCODE_SYSREQ")
          (value . 154))
        ((tag . "field")
          (name . "SDL_SCANCODE_CANCEL")
          (value . 155))
        ((tag . "field")
          (name . "SDL_SCANCODE_CLEAR")
          (value . 156))
        ((tag . "field")
          (name . "SDL_SCANCODE_PRIOR")
          (value . 157))
        ((tag . "field")
          (name . "SDL_SCANCODE_RETURN2")
          (value . 158))
        ((tag . "field")
          (name . "SDL_SCANCODE_SEPARATOR")
          (value . 159))
        ((tag . "field") (name . "SDL_SCANCODE_OUT") (value . 160))
        ((tag . "field") (name . "SDL_SCANCODE_OPER") (value . 161))
        ((tag . "field")
          (name . "SDL_SCANCODE_CLEARAGAIN")
          (value . 162))
        ((tag . "field")
          (name . "SDL_SCANCODE_CRSEL")
          (value . 163))
        ((tag . "field")
          (name . "SDL_SCANCODE_EXSEL")
          (value . 164))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_00")
          (value . 176))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_000")
          (value . 177))
        ((tag . "field")
          (name . "SDL_SCANCODE_THOUSANDSSEPARATOR")
          (value . 178))
        ((tag . "field")
          (name . "SDL_SCANCODE_DECIMALSEPARATOR")
          (value . 179))
        ((tag . "field")
          (name . "SDL_SCANCODE_CURRENCYUNIT")
          (value . 180))
        ((tag . "field")
          (name . "SDL_SCANCODE_CURRENCYSUBUNIT")
          (value . 181))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_LEFTPAREN")
          (value . 182))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_RIGHTPAREN")
          (value . 183))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_LEFTBRACE")
          (value . 184))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_RIGHTBRACE")
          (value . 185))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_TAB")
          (value . 186))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_BACKSPACE")
          (value . 187))
        ((tag . "field") (name . "SDL_SCANCODE_KP_A") (value . 188))
        ((tag . "field") (name . "SDL_SCANCODE_KP_B") (value . 189))
        ((tag . "field") (name . "SDL_SCANCODE_KP_C") (value . 190))
        ((tag . "field") (name . "SDL_SCANCODE_KP_D") (value . 191))
        ((tag . "field") (name . "SDL_SCANCODE_KP_E") (value . 192))
        ((tag . "field") (name . "SDL_SCANCODE_KP_F") (value . 193))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_XOR")
          (value . 194))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_POWER")
          (value . 195))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_PERCENT")
          (value . 196))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_LESS")
          (value . 197))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_GREATER")
          (value . 198))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_AMPERSAND")
          (value . 199))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_DBLAMPERSAND")
          (value . 200))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_VERTICALBAR")
          (value . 201))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_DBLVERTICALBAR")
          (value . 202))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_COLON")
          (value . 203))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_HASH")
          (value . 204))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_SPACE")
          (value . 205))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_AT")
          (value . 206))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_EXCLAM")
          (value . 207))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MEMSTORE")
          (value . 208))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MEMRECALL")
          (value . 209))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MEMCLEAR")
          (value . 210))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MEMADD")
          (value . 211))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MEMSUBTRACT")
          (value . 212))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MEMMULTIPLY")
          (value . 213))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_MEMDIVIDE")
          (value . 214))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_PLUSMINUS")
          (value . 215))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_CLEAR")
          (value . 216))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_CLEARENTRY")
          (value . 217))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_BINARY")
          (value . 218))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_OCTAL")
          (value . 219))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_DECIMAL")
          (value . 220))
        ((tag . "field")
          (name . "SDL_SCANCODE_KP_HEXADECIMAL")
          (value . 221))
        ((tag . "field")
          (name . "SDL_SCANCODE_LCTRL")
          (value . 224))
        ((tag . "field")
          (name . "SDL_SCANCODE_LSHIFT")
          (value . 225))
        ((tag . "field") (name . "SDL_SCANCODE_LALT") (value . 226))
        ((tag . "field") (name . "SDL_SCANCODE_LGUI") (value . 227))
        ((tag . "field")
          (name . "SDL_SCANCODE_RCTRL")
          (value . 228))
        ((tag . "field")
          (name . "SDL_SCANCODE_RSHIFT")
          (value . 229))
        ((tag . "field") (name . "SDL_SCANCODE_RALT") (value . 230))
        ((tag . "field") (name . "SDL_SCANCODE_RGUI") (value . 231))
        ((tag . "field") (name . "SDL_SCANCODE_MODE") (value . 257))
        ((tag . "field")
          (name . "SDL_SCANCODE_AUDIONEXT")
          (value . 258))
        ((tag . "field")
          (name . "SDL_SCANCODE_AUDIOPREV")
          (value . 259))
        ((tag . "field")
          (name . "SDL_SCANCODE_AUDIOSTOP")
          (value . 260))
        ((tag . "field")
          (name . "SDL_SCANCODE_AUDIOPLAY")
          (value . 261))
        ((tag . "field")
          (name . "SDL_SCANCODE_AUDIOMUTE")
          (value . 262))
        ((tag . "field")
          (name . "SDL_SCANCODE_MEDIASELECT")
          (value . 263))
        ((tag . "field") (name . "SDL_SCANCODE_WWW") (value . 264))
        ((tag . "field") (name . "SDL_SCANCODE_MAIL") (value . 265))
        ((tag . "field")
          (name . "SDL_SCANCODE_CALCULATOR")
          (value . 266))
        ((tag . "field")
          (name . "SDL_SCANCODE_COMPUTER")
          (value . 267))
        ((tag . "field")
          (name . "SDL_SCANCODE_AC_SEARCH")
          (value . 268))
        ((tag . "field")
          (name . "SDL_SCANCODE_AC_HOME")
          (value . 269))
        ((tag . "field")
          (name . "SDL_SCANCODE_AC_BACK")
          (value . 270))
        ((tag . "field")
          (name . "SDL_SCANCODE_AC_FORWARD")
          (value . 271))
        ((tag . "field")
          (name . "SDL_SCANCODE_AC_STOP")
          (value . 272))
        ((tag . "field")
          (name . "SDL_SCANCODE_AC_REFRESH")
          (value . 273))
        ((tag . "field")
          (name . "SDL_SCANCODE_AC_BOOKMARKS")
          (value . 274))
        ((tag . "field")
          (name . "SDL_SCANCODE_BRIGHTNESSDOWN")
          (value . 275))
        ((tag . "field")
          (name . "SDL_SCANCODE_BRIGHTNESSUP")
          (value . 276))
        ((tag . "field")
          (name . "SDL_SCANCODE_DISPLAYSWITCH")
          (value . 277))
        ((tag . "field")
          (name . "SDL_SCANCODE_KBDILLUMTOGGLE")
          (value . 278))
        ((tag . "field")
          (name . "SDL_SCANCODE_KBDILLUMDOWN")
          (value . 279))
        ((tag . "field")
          (name . "SDL_SCANCODE_KBDILLUMUP")
          (value . 280))
        ((tag . "field")
          (name . "SDL_SCANCODE_EJECT")
          (value . 281))
        ((tag . "field")
          (name . "SDL_SCANCODE_SLEEP")
          (value . 282))
        ((tag . "field") (name . "SDL_SCANCODE_APP1") (value . 283))
        ((tag . "field") (name . "SDL_SCANCODE_APP2") (value . 284))
        ((tag . "field")
          (name . "SDL_SCANCODE_AUDIOREWIND")
          (value . 285))
        ((tag . "field")
          (name . "SDL_SCANCODE_AUDIOFASTFORWARD")
          (value . 286))
        ((tag . "field")
          (name . "SDL_NUM_SCANCODES")
          (value . 512)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Scancode")
    (location . "/usr/local/include/SDL2/SDL_scancode.h:409:3")
    (type (tag . ":enum") (name . "") (id . 86)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Keycode")
    (location . "/usr/local/include/SDL2/SDL_keycode.h:45:16")
    (type (tag . "Sint32")))
  ((tag . "enum") (ns . 0) (name . "") (id . 87)
    (location . "/usr/local/include/SDL2/SDL_keycode.h:50:1")
    (fields
      .
      #(((tag . "field") (name . "SDLK_UNKNOWN") (value . 0))
        ((tag . "field") (name . "SDLK_RETURN") (value . 13))
        ((tag . "field") (name . "SDLK_ESCAPE") (value . 27))
        ((tag . "field") (name . "SDLK_BACKSPACE") (value . 8))
        ((tag . "field") (name . "SDLK_TAB") (value . 9))
        ((tag . "field") (name . "SDLK_SPACE") (value . 32))
        ((tag . "field") (name . "SDLK_EXCLAIM") (value . 33))
        ((tag . "field") (name . "SDLK_QUOTEDBL") (value . 34))
        ((tag . "field") (name . "SDLK_HASH") (value . 35))
        ((tag . "field") (name . "SDLK_PERCENT") (value . 37))
        ((tag . "field") (name . "SDLK_DOLLAR") (value . 36))
        ((tag . "field") (name . "SDLK_AMPERSAND") (value . 38))
        ((tag . "field") (name . "SDLK_QUOTE") (value . 39))
        ((tag . "field") (name . "SDLK_LEFTPAREN") (value . 40))
        ((tag . "field") (name . "SDLK_RIGHTPAREN") (value . 41))
        ((tag . "field") (name . "SDLK_ASTERISK") (value . 42))
        ((tag . "field") (name . "SDLK_PLUS") (value . 43))
        ((tag . "field") (name . "SDLK_COMMA") (value . 44))
        ((tag . "field") (name . "SDLK_MINUS") (value . 45))
        ((tag . "field") (name . "SDLK_PERIOD") (value . 46))
        ((tag . "field") (name . "SDLK_SLASH") (value . 47))
        ((tag . "field") (name . "SDLK_0") (value . 48))
        ((tag . "field") (name . "SDLK_1") (value . 49))
        ((tag . "field") (name . "SDLK_2") (value . 50))
        ((tag . "field") (name . "SDLK_3") (value . 51))
        ((tag . "field") (name . "SDLK_4") (value . 52))
        ((tag . "field") (name . "SDLK_5") (value . 53))
        ((tag . "field") (name . "SDLK_6") (value . 54))
        ((tag . "field") (name . "SDLK_7") (value . 55))
        ((tag . "field") (name . "SDLK_8") (value . 56))
        ((tag . "field") (name . "SDLK_9") (value . 57))
        ((tag . "field") (name . "SDLK_COLON") (value . 58))
        ((tag . "field") (name . "SDLK_SEMICOLON") (value . 59))
        ((tag . "field") (name . "SDLK_LESS") (value . 60))
        ((tag . "field") (name . "SDLK_EQUALS") (value . 61))
        ((tag . "field") (name . "SDLK_GREATER") (value . 62))
        ((tag . "field") (name . "SDLK_QUESTION") (value . 63))
        ((tag . "field") (name . "SDLK_AT") (value . 64))
        ((tag . "field") (name . "SDLK_LEFTBRACKET") (value . 91))
        ((tag . "field") (name . "SDLK_BACKSLASH") (value . 92))
        ((tag . "field") (name . "SDLK_RIGHTBRACKET") (value . 93))
        ((tag . "field") (name . "SDLK_CARET") (value . 94))
        ((tag . "field") (name . "SDLK_UNDERSCORE") (value . 95))
        ((tag . "field") (name . "SDLK_BACKQUOTE") (value . 96))
        ((tag . "field") (name . "SDLK_a") (value . 97))
        ((tag . "field") (name . "SDLK_b") (value . 98))
        ((tag . "field") (name . "SDLK_c") (value . 99))
        ((tag . "field") (name . "SDLK_d") (value . 100))
        ((tag . "field") (name . "SDLK_e") (value . 101))
        ((tag . "field") (name . "SDLK_f") (value . 102))
        ((tag . "field") (name . "SDLK_g") (value . 103))
        ((tag . "field") (name . "SDLK_h") (value . 104))
        ((tag . "field") (name . "SDLK_i") (value . 105))
        ((tag . "field") (name . "SDLK_j") (value . 106))
        ((tag . "field") (name . "SDLK_k") (value . 107))
        ((tag . "field") (name . "SDLK_l") (value . 108))
        ((tag . "field") (name . "SDLK_m") (value . 109))
        ((tag . "field") (name . "SDLK_n") (value . 110))
        ((tag . "field") (name . "SDLK_o") (value . 111))
        ((tag . "field") (name . "SDLK_p") (value . 112))
        ((tag . "field") (name . "SDLK_q") (value . 113))
        ((tag . "field") (name . "SDLK_r") (value . 114))
        ((tag . "field") (name . "SDLK_s") (value . 115))
        ((tag . "field") (name . "SDLK_t") (value . 116))
        ((tag . "field") (name . "SDLK_u") (value . 117))
        ((tag . "field") (name . "SDLK_v") (value . 118))
        ((tag . "field") (name . "SDLK_w") (value . 119))
        ((tag . "field") (name . "SDLK_x") (value . 120))
        ((tag . "field") (name . "SDLK_y") (value . 121))
        ((tag . "field") (name . "SDLK_z") (value . 122))
        ((tag . "field")
          (name . "SDLK_CAPSLOCK")
          (value . 1073741881))
        ((tag . "field") (name . "SDLK_F1") (value . 1073741882))
        ((tag . "field") (name . "SDLK_F2") (value . 1073741883))
        ((tag . "field") (name . "SDLK_F3") (value . 1073741884))
        ((tag . "field") (name . "SDLK_F4") (value . 1073741885))
        ((tag . "field") (name . "SDLK_F5") (value . 1073741886))
        ((tag . "field") (name . "SDLK_F6") (value . 1073741887))
        ((tag . "field") (name . "SDLK_F7") (value . 1073741888))
        ((tag . "field") (name . "SDLK_F8") (value . 1073741889))
        ((tag . "field") (name . "SDLK_F9") (value . 1073741890))
        ((tag . "field") (name . "SDLK_F10") (value . 1073741891))
        ((tag . "field") (name . "SDLK_F11") (value . 1073741892))
        ((tag . "field") (name . "SDLK_F12") (value . 1073741893))
        ((tag . "field")
          (name . "SDLK_PRINTSCREEN")
          (value . 1073741894))
        ((tag . "field")
          (name . "SDLK_SCROLLLOCK")
          (value . 1073741895))
        ((tag . "field") (name . "SDLK_PAUSE") (value . 1073741896))
        ((tag . "field")
          (name . "SDLK_INSERT")
          (value . 1073741897))
        ((tag . "field") (name . "SDLK_HOME") (value . 1073741898))
        ((tag . "field")
          (name . "SDLK_PAGEUP")
          (value . 1073741899))
        ((tag . "field") (name . "SDLK_DELETE") (value . 127))
        ((tag . "field") (name . "SDLK_END") (value . 1073741901))
        ((tag . "field")
          (name . "SDLK_PAGEDOWN")
          (value . 1073741902))
        ((tag . "field") (name . "SDLK_RIGHT") (value . 1073741903))
        ((tag . "field") (name . "SDLK_LEFT") (value . 1073741904))
        ((tag . "field") (name . "SDLK_DOWN") (value . 1073741905))
        ((tag . "field") (name . "SDLK_UP") (value . 1073741906))
        ((tag . "field")
          (name . "SDLK_NUMLOCKCLEAR")
          (value . 1073741907))
        ((tag . "field")
          (name . "SDLK_KP_DIVIDE")
          (value . 1073741908))
        ((tag . "field")
          (name . "SDLK_KP_MULTIPLY")
          (value . 1073741909))
        ((tag . "field")
          (name . "SDLK_KP_MINUS")
          (value . 1073741910))
        ((tag . "field")
          (name . "SDLK_KP_PLUS")
          (value . 1073741911))
        ((tag . "field")
          (name . "SDLK_KP_ENTER")
          (value . 1073741912))
        ((tag . "field") (name . "SDLK_KP_1") (value . 1073741913))
        ((tag . "field") (name . "SDLK_KP_2") (value . 1073741914))
        ((tag . "field") (name . "SDLK_KP_3") (value . 1073741915))
        ((tag . "field") (name . "SDLK_KP_4") (value . 1073741916))
        ((tag . "field") (name . "SDLK_KP_5") (value . 1073741917))
        ((tag . "field") (name . "SDLK_KP_6") (value . 1073741918))
        ((tag . "field") (name . "SDLK_KP_7") (value . 1073741919))
        ((tag . "field") (name . "SDLK_KP_8") (value . 1073741920))
        ((tag . "field") (name . "SDLK_KP_9") (value . 1073741921))
        ((tag . "field") (name . "SDLK_KP_0") (value . 1073741922))
        ((tag . "field")
          (name . "SDLK_KP_PERIOD")
          (value . 1073741923))
        ((tag . "field")
          (name . "SDLK_APPLICATION")
          (value . 1073741925))
        ((tag . "field") (name . "SDLK_POWER") (value . 1073741926))
        ((tag . "field")
          (name . "SDLK_KP_EQUALS")
          (value . 1073741927))
        ((tag . "field") (name . "SDLK_F13") (value . 1073741928))
        ((tag . "field") (name . "SDLK_F14") (value . 1073741929))
        ((tag . "field") (name . "SDLK_F15") (value . 1073741930))
        ((tag . "field") (name . "SDLK_F16") (value . 1073741931))
        ((tag . "field") (name . "SDLK_F17") (value . 1073741932))
        ((tag . "field") (name . "SDLK_F18") (value . 1073741933))
        ((tag . "field") (name . "SDLK_F19") (value . 1073741934))
        ((tag . "field") (name . "SDLK_F20") (value . 1073741935))
        ((tag . "field") (name . "SDLK_F21") (value . 1073741936))
        ((tag . "field") (name . "SDLK_F22") (value . 1073741937))
        ((tag . "field") (name . "SDLK_F23") (value . 1073741938))
        ((tag . "field") (name . "SDLK_F24") (value . 1073741939))
        ((tag . "field")
          (name . "SDLK_EXECUTE")
          (value . 1073741940))
        ((tag . "field") (name . "SDLK_HELP") (value . 1073741941))
        ((tag . "field") (name . "SDLK_MENU") (value . 1073741942))
        ((tag . "field")
          (name . "SDLK_SELECT")
          (value . 1073741943))
        ((tag . "field") (name . "SDLK_STOP") (value . 1073741944))
        ((tag . "field") (name . "SDLK_AGAIN") (value . 1073741945))
        ((tag . "field") (name . "SDLK_UNDO") (value . 1073741946))
        ((tag . "field") (name . "SDLK_CUT") (value . 1073741947))
        ((tag . "field") (name . "SDLK_COPY") (value . 1073741948))
        ((tag . "field") (name . "SDLK_PASTE") (value . 1073741949))
        ((tag . "field") (name . "SDLK_FIND") (value . 1073741950))
        ((tag . "field") (name . "SDLK_MUTE") (value . 1073741951))
        ((tag . "field")
          (name . "SDLK_VOLUMEUP")
          (value . 1073741952))
        ((tag . "field")
          (name . "SDLK_VOLUMEDOWN")
          (value . 1073741953))
        ((tag . "field")
          (name . "SDLK_KP_COMMA")
          (value . 1073741957))
        ((tag . "field")
          (name . "SDLK_KP_EQUALSAS400")
          (value . 1073741958))
        ((tag . "field")
          (name . "SDLK_ALTERASE")
          (value . 1073741977))
        ((tag . "field")
          (name . "SDLK_SYSREQ")
          (value . 1073741978))
        ((tag . "field")
          (name . "SDLK_CANCEL")
          (value . 1073741979))
        ((tag . "field") (name . "SDLK_CLEAR") (value . 1073741980))
        ((tag . "field") (name . "SDLK_PRIOR") (value . 1073741981))
        ((tag . "field")
          (name . "SDLK_RETURN2")
          (value . 1073741982))
        ((tag . "field")
          (name . "SDLK_SEPARATOR")
          (value . 1073741983))
        ((tag . "field") (name . "SDLK_OUT") (value . 1073741984))
        ((tag . "field") (name . "SDLK_OPER") (value . 1073741985))
        ((tag . "field")
          (name . "SDLK_CLEARAGAIN")
          (value . 1073741986))
        ((tag . "field") (name . "SDLK_CRSEL") (value . 1073741987))
        ((tag . "field") (name . "SDLK_EXSEL") (value . 1073741988))
        ((tag . "field") (name . "SDLK_KP_00") (value . 1073742000))
        ((tag . "field")
          (name . "SDLK_KP_000")
          (value . 1073742001))
        ((tag . "field")
          (name . "SDLK_THOUSANDSSEPARATOR")
          (value . 1073742002))
        ((tag . "field")
          (name . "SDLK_DECIMALSEPARATOR")
          (value . 1073742003))
        ((tag . "field")
          (name . "SDLK_CURRENCYUNIT")
          (value . 1073742004))
        ((tag . "field")
          (name . "SDLK_CURRENCYSUBUNIT")
          (value . 1073742005))
        ((tag . "field")
          (name . "SDLK_KP_LEFTPAREN")
          (value . 1073742006))
        ((tag . "field")
          (name . "SDLK_KP_RIGHTPAREN")
          (value . 1073742007))
        ((tag . "field")
          (name . "SDLK_KP_LEFTBRACE")
          (value . 1073742008))
        ((tag . "field")
          (name . "SDLK_KP_RIGHTBRACE")
          (value . 1073742009))
        ((tag . "field")
          (name . "SDLK_KP_TAB")
          (value . 1073742010))
        ((tag . "field")
          (name . "SDLK_KP_BACKSPACE")
          (value . 1073742011))
        ((tag . "field") (name . "SDLK_KP_A") (value . 1073742012))
        ((tag . "field") (name . "SDLK_KP_B") (value . 1073742013))
        ((tag . "field") (name . "SDLK_KP_C") (value . 1073742014))
        ((tag . "field") (name . "SDLK_KP_D") (value . 1073742015))
        ((tag . "field") (name . "SDLK_KP_E") (value . 1073742016))
        ((tag . "field") (name . "SDLK_KP_F") (value . 1073742017))
        ((tag . "field")
          (name . "SDLK_KP_XOR")
          (value . 1073742018))
        ((tag . "field")
          (name . "SDLK_KP_POWER")
          (value . 1073742019))
        ((tag . "field")
          (name . "SDLK_KP_PERCENT")
          (value . 1073742020))
        ((tag . "field")
          (name . "SDLK_KP_LESS")
          (value . 1073742021))
        ((tag . "field")
          (name . "SDLK_KP_GREATER")
          (value . 1073742022))
        ((tag . "field")
          (name . "SDLK_KP_AMPERSAND")
          (value . 1073742023))
        ((tag . "field")
          (name . "SDLK_KP_DBLAMPERSAND")
          (value . 1073742024))
        ((tag . "field")
          (name . "SDLK_KP_VERTICALBAR")
          (value . 1073742025))
        ((tag . "field")
          (name . "SDLK_KP_DBLVERTICALBAR")
          (value . 1073742026))
        ((tag . "field")
          (name . "SDLK_KP_COLON")
          (value . 1073742027))
        ((tag . "field")
          (name . "SDLK_KP_HASH")
          (value . 1073742028))
        ((tag . "field")
          (name . "SDLK_KP_SPACE")
          (value . 1073742029))
        ((tag . "field") (name . "SDLK_KP_AT") (value . 1073742030))
        ((tag . "field")
          (name . "SDLK_KP_EXCLAM")
          (value . 1073742031))
        ((tag . "field")
          (name . "SDLK_KP_MEMSTORE")
          (value . 1073742032))
        ((tag . "field")
          (name . "SDLK_KP_MEMRECALL")
          (value . 1073742033))
        ((tag . "field")
          (name . "SDLK_KP_MEMCLEAR")
          (value . 1073742034))
        ((tag . "field")
          (name . "SDLK_KP_MEMADD")
          (value . 1073742035))
        ((tag . "field")
          (name . "SDLK_KP_MEMSUBTRACT")
          (value . 1073742036))
        ((tag . "field")
          (name . "SDLK_KP_MEMMULTIPLY")
          (value . 1073742037))
        ((tag . "field")
          (name . "SDLK_KP_MEMDIVIDE")
          (value . 1073742038))
        ((tag . "field")
          (name . "SDLK_KP_PLUSMINUS")
          (value . 1073742039))
        ((tag . "field")
          (name . "SDLK_KP_CLEAR")
          (value . 1073742040))
        ((tag . "field")
          (name . "SDLK_KP_CLEARENTRY")
          (value . 1073742041))
        ((tag . "field")
          (name . "SDLK_KP_BINARY")
          (value . 1073742042))
        ((tag . "field")
          (name . "SDLK_KP_OCTAL")
          (value . 1073742043))
        ((tag . "field")
          (name . "SDLK_KP_DECIMAL")
          (value . 1073742044))
        ((tag . "field")
          (name . "SDLK_KP_HEXADECIMAL")
          (value . 1073742045))
        ((tag . "field") (name . "SDLK_LCTRL") (value . 1073742048))
        ((tag . "field")
          (name . "SDLK_LSHIFT")
          (value . 1073742049))
        ((tag . "field") (name . "SDLK_LALT") (value . 1073742050))
        ((tag . "field") (name . "SDLK_LGUI") (value . 1073742051))
        ((tag . "field") (name . "SDLK_RCTRL") (value . 1073742052))
        ((tag . "field")
          (name . "SDLK_RSHIFT")
          (value . 1073742053))
        ((tag . "field") (name . "SDLK_RALT") (value . 1073742054))
        ((tag . "field") (name . "SDLK_RGUI") (value . 1073742055))
        ((tag . "field") (name . "SDLK_MODE") (value . 1073742081))
        ((tag . "field")
          (name . "SDLK_AUDIONEXT")
          (value . 1073742082))
        ((tag . "field")
          (name . "SDLK_AUDIOPREV")
          (value . 1073742083))
        ((tag . "field")
          (name . "SDLK_AUDIOSTOP")
          (value . 1073742084))
        ((tag . "field")
          (name . "SDLK_AUDIOPLAY")
          (value . 1073742085))
        ((tag . "field")
          (name . "SDLK_AUDIOMUTE")
          (value . 1073742086))
        ((tag . "field")
          (name . "SDLK_MEDIASELECT")
          (value . 1073742087))
        ((tag . "field") (name . "SDLK_WWW") (value . 1073742088))
        ((tag . "field") (name . "SDLK_MAIL") (value . 1073742089))
        ((tag . "field")
          (name . "SDLK_CALCULATOR")
          (value . 1073742090))
        ((tag . "field")
          (name . "SDLK_COMPUTER")
          (value . 1073742091))
        ((tag . "field")
          (name . "SDLK_AC_SEARCH")
          (value . 1073742092))
        ((tag . "field")
          (name . "SDLK_AC_HOME")
          (value . 1073742093))
        ((tag . "field")
          (name . "SDLK_AC_BACK")
          (value . 1073742094))
        ((tag . "field")
          (name . "SDLK_AC_FORWARD")
          (value . 1073742095))
        ((tag . "field")
          (name . "SDLK_AC_STOP")
          (value . 1073742096))
        ((tag . "field")
          (name . "SDLK_AC_REFRESH")
          (value . 1073742097))
        ((tag . "field")
          (name . "SDLK_AC_BOOKMARKS")
          (value . 1073742098))
        ((tag . "field")
          (name . "SDLK_BRIGHTNESSDOWN")
          (value . 1073742099))
        ((tag . "field")
          (name . "SDLK_BRIGHTNESSUP")
          (value . 1073742100))
        ((tag . "field")
          (name . "SDLK_DISPLAYSWITCH")
          (value . 1073742101))
        ((tag . "field")
          (name . "SDLK_KBDILLUMTOGGLE")
          (value . 1073742102))
        ((tag . "field")
          (name . "SDLK_KBDILLUMDOWN")
          (value . 1073742103))
        ((tag . "field")
          (name . "SDLK_KBDILLUMUP")
          (value . 1073742104))
        ((tag . "field") (name . "SDLK_EJECT") (value . 1073742105))
        ((tag . "field") (name . "SDLK_SLEEP") (value . 1073742106))
        ((tag . "field") (name . "SDLK_APP1") (value . 1073742107))
        ((tag . "field") (name . "SDLK_APP2") (value . 1073742108))
        ((tag . "field")
          (name . "SDLK_AUDIOREWIND")
          (value . 1073742109))
        ((tag . "field")
          (name . "SDLK_AUDIOFASTFORWARD")
          (value . 1073742110)))))
  ((tag . "enum") (ns . 0) (name . "") (id . 88)
    (location . "/usr/local/include/SDL2/SDL_keycode.h:325:9")
    (fields
      .
      #(((tag . "field") (name . "KMOD_NONE") (value . 0))
        ((tag . "field") (name . "KMOD_LSHIFT") (value . 1))
        ((tag . "field") (name . "KMOD_RSHIFT") (value . 2))
        ((tag . "field") (name . "KMOD_LCTRL") (value . 64))
        ((tag . "field") (name . "KMOD_RCTRL") (value . 128))
        ((tag . "field") (name . "KMOD_LALT") (value . 256))
        ((tag . "field") (name . "KMOD_RALT") (value . 512))
        ((tag . "field") (name . "KMOD_LGUI") (value . 1024))
        ((tag . "field") (name . "KMOD_RGUI") (value . 2048))
        ((tag . "field") (name . "KMOD_NUM") (value . 4096))
        ((tag . "field") (name . "KMOD_CAPS") (value . 8192))
        ((tag . "field") (name . "KMOD_MODE") (value . 16384))
        ((tag . "field")
          (name . "KMOD_RESERVED")
          (value . 32768)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Keymod")
    (location . "/usr/local/include/SDL2/SDL_keycode.h:340:3")
    (type (tag . ":enum") (name . "") (id . 88)))
  ((tag . "struct") (ns . 0) (name . "SDL_Keysym") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:47:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "scancode") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_Scancode")))
        ((tag . "field") (name . "sym") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_Keycode")))
        ((tag . "field") (name . "mod") (bit-offset . 64) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "unused") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Keysym")
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:53:3")
    (type (tag . ":struct") (name . "SDL_Keysym") (id . 89)))
  ((tag . "function") (name . "SDL_GetKeyboardFocus") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:60:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_GetKeyboardState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:77:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "numkeys")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":pointer") (type (tag . "Uint8"))))
  ((tag . "function") (name . "SDL_GetModState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:82:36")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_Keymod")))
  ((tag . "function") (name . "SDL_SetModState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:89:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "modstate")
          (type (tag . "SDL_Keymod")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetKeyFromScancode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:99:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "scancode")
          (type (tag . "SDL_Scancode")))))
    (return-type (tag . "SDL_Keycode")))
  ((tag . "function") (name . "SDL_GetScancodeFromKey") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:109:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "key")
          (type (tag . "SDL_Keycode")))))
    (return-type (tag . "SDL_Scancode")))
  ((tag . "function") (name . "SDL_GetScancodeName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:120:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "scancode")
          (type (tag . "SDL_Scancode")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GetScancodeFromName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:129:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_Scancode")))
  ((tag . "function") (name . "SDL_GetKeyName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:141:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "key")
          (type (tag . "SDL_Keycode")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GetKeyFromName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:150:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_Keycode")))
  ((tag . "function") (name . "SDL_StartTextInput") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:160:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_IsTextInputActive") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:168:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_StopTextInput") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:177:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetTextInputRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:185:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_HasScreenKeyboardSupport") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:196:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_IsScreenKeyboardShown") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_keyboard.h:207:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "struct") (ns . 0) (name . "SDL_Cursor") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:41:16")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Cursor")
    (location . "/usr/local/include/SDL2/SDL_mouse.h:41:27")
    (type (tag . "struct") (ns . 0) (name . "SDL_Cursor") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_mouse.h:41:16")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "enum") (ns . 0) (name . "") (id . 91)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:46:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_ARROW")
          (value . 0))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_IBEAM")
          (value . 1))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_WAIT")
          (value . 2))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_CROSSHAIR")
          (value . 3))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_WAITARROW")
          (value . 4))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_SIZENWSE")
          (value . 5))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_SIZENESW")
          (value . 6))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_SIZEWE")
          (value . 7))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_SIZENS")
          (value . 8))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_SIZEALL")
          (value . 9))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_NO")
          (value . 10))
        ((tag . "field")
          (name . "SDL_SYSTEM_CURSOR_HAND")
          (value . 11))
        ((tag . "field")
          (name . "SDL_NUM_SYSTEM_CURSORS")
          (value . 12)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_SystemCursor")
    (location . "/usr/local/include/SDL2/SDL_mouse.h:61:3")
    (type (tag . ":enum") (name . "") (id . 91)))
  ((tag . "enum") (ns . 0) (name . "") (id . 92)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:66:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_MOUSEWHEEL_NORMAL")
          (value . 0))
        ((tag . "field")
          (name . "SDL_MOUSEWHEEL_FLIPPED")
          (value . 1)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MouseWheelDirection")
    (location . "/usr/local/include/SDL2/SDL_mouse.h:70:3")
    (type (tag . ":enum") (name . "") (id . 92)))
  ((tag . "function") (name . "SDL_GetMouseFocus") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:77:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_GetMouseState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:87:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetGlobalMouseState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:112:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetRelativeMouseState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:121:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_WarpMouseInWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:132:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "x")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_WarpMouseGlobal") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:144:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "x")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetRelativeMouseMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:162:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "enabled")
          (type (tag . "SDL_bool")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_CaptureMouse") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:193:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "enabled")
          (type (tag . "SDL_bool")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetRelativeMouseMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:200:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_CreateCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:220:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "data")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "mask")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "w")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "h")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "hot_x")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "hot_y")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Cursor"))))
  ((tag . "function") (name . "SDL_CreateColorCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:230:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "hot_x")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "hot_y")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Cursor"))))
  ((tag . "function") (name . "SDL_CreateSystemCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:239:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "id")
          (type (tag . "SDL_SystemCursor")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Cursor"))))
  ((tag . "function") (name . "SDL_SetCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:244:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cursor")
          (type (tag . ":pointer") (type (tag . "SDL_Cursor"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:249:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Cursor"))))
  ((tag . "function") (name . "SDL_GetDefaultCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:254:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Cursor"))))
  ((tag . "function") (name . "SDL_FreeCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:263:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "cursor")
          (type (tag . ":pointer") (type (tag . "SDL_Cursor"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_ShowCursor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_mouse.h:273:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "toggle")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "struct") (ns . 0) (name . "_SDL_Joystick") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:66:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Joystick")
    (location . "/usr/local/include/SDL2/SDL_joystick.h:67:30")
    (type (tag . "struct") (ns . 0) (name . "_SDL_Joystick") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_joystick.h:66:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoystickGUID")
    (location . "/usr/local/include/SDL2/SDL_joystick.h:72:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 94)
      (location . "/usr/local/include/SDL2/SDL_joystick.h:70:9")
      (bit-size . 128) (bit-alignment . 8)
      (fields
        .
        #(((tag . "field") (name . "data") (bit-offset . 0) (bit-size . 128)
            (bit-alignment . 8)
            (type
              (tag . ":array")
              (type (tag . "Uint8"))
              (size . 16)))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoystickID")
    (location . "/usr/local/include/SDL2/SDL_joystick.h:81:16")
    (type (tag . "Sint32")))
  ((tag . "enum") (ns . 0) (name . "") (id . 95)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:83:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_UNKNOWN")
          (value . 0))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_GAMECONTROLLER")
          (value . 1))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_WHEEL")
          (value . 2))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_ARCADE_STICK")
          (value . 3))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_FLIGHT_STICK")
          (value . 4))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_DANCE_PAD")
          (value . 5))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_GUITAR")
          (value . 6))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_DRUM_KIT")
          (value . 7))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_ARCADE_PAD")
          (value . 8))
        ((tag . "field")
          (name . "SDL_JOYSTICK_TYPE_THROTTLE")
          (value . 9)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoystickType")
    (location . "/usr/local/include/SDL2/SDL_joystick.h:95:3")
    (type (tag . ":enum") (name . "") (id . 95)))
  ((tag . "enum") (ns . 0) (name . "") (id . 96)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:97:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_JOYSTICK_POWER_UNKNOWN")
          (value . 4294967295))
        ((tag . "field")
          (name . "SDL_JOYSTICK_POWER_EMPTY")
          (value . 0))
        ((tag . "field")
          (name . "SDL_JOYSTICK_POWER_LOW")
          (value . 1))
        ((tag . "field")
          (name . "SDL_JOYSTICK_POWER_MEDIUM")
          (value . 2))
        ((tag . "field")
          (name . "SDL_JOYSTICK_POWER_FULL")
          (value . 3))
        ((tag . "field")
          (name . "SDL_JOYSTICK_POWER_WIRED")
          (value . 4))
        ((tag . "field")
          (name . "SDL_JOYSTICK_POWER_MAX")
          (value . 5)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoystickPowerLevel")
    (location . "/usr/local/include/SDL2/SDL_joystick.h:106:3")
    (type (tag . ":enum") (name . "") (id . 96)))
  ((tag . "function") (name . "SDL_LockJoysticks") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:120:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_UnlockJoysticks") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:121:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_NumJoysticks") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:126:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickNameForIndex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:133:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_JoystickGetDevicePlayerIndex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:139:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickGetDeviceGUID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:145:42")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_JoystickGUID")))
  ((tag . "function") (name . "SDL_JoystickGetDeviceVendor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:152:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_JoystickGetDeviceProduct") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:159:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_JoystickGetDeviceProductVersion") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:166:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_JoystickGetDeviceType") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:172:42")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_JoystickType")))
  ((tag . "function") (name . "SDL_JoystickGetDeviceInstanceID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:179:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_JoystickID")))
  ((tag . "function") (name . "SDL_JoystickOpen") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:190:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Joystick"))))
  ((tag . "function") (name . "SDL_JoystickFromInstanceID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:195:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joyid")
          (type (tag . "SDL_JoystickID")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Joystick"))))
  ((tag . "function") (name . "SDL_JoystickName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:201:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_JoystickGetPlayerIndex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:208:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickGetGUID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:213:42")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "SDL_JoystickGUID")))
  ((tag . "function") (name . "SDL_JoystickGetVendor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:219:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_JoystickGetProduct") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:225:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_JoystickGetProductVersion") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:231:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_JoystickGetType") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:236:42")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "SDL_JoystickType")))
  ((tag . "function") (name . "SDL_JoystickGetGUIDString") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:242:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "guid")
          (type (tag . "SDL_JoystickGUID")))
        ((tag . "parameter")
          (name . "pszGUID")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "cbGUID")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_JoystickGetGUIDFromString") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:247:42")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pchGUID")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_JoystickGUID")))
  ((tag . "function") (name . "SDL_JoystickGetAttached") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:252:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_JoystickInstanceID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:257:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "SDL_JoystickID")))
  ((tag . "function") (name . "SDL_JoystickNumAxes") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:262:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickNumBalls") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:270:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickNumHats") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:275:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickNumButtons") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:280:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickUpdate") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:288:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_JoystickEventState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:299:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "state")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickGetAxis") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:310:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))
        ((tag . "parameter")
          (name . "axis")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Sint16")))
  ((tag . "function") (name . "SDL_JoystickGetAxisInitialState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:322:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))
        ((tag . "parameter")
          (name . "axis")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "state")
          (type (tag . ":pointer") (type (tag . "Sint16"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_JoystickGetHat") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:356:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))
        ((tag . "parameter")
          (name . "hat")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint8")))
  ((tag . "function") (name . "SDL_JoystickGetBall") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:366:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))
        ((tag . "parameter")
          (name . "ball")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "dx")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "dy")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickGetButton") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:374:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))
        ((tag . "parameter")
          (name . "button")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint8")))
  ((tag . "function") (name . "SDL_JoystickRumble") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:388:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))
        ((tag . "parameter")
          (name . "low_frequency_rumble")
          (type (tag . "Uint16")))
        ((tag . "parameter")
          (name . "high_frequency_rumble")
          (type (tag . "Uint16")))
        ((tag . "parameter")
          (name . "duration_ms")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_JoystickClose") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:393:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_JoystickCurrentPowerLevel") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_joystick.h:398:48")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type (tag . "SDL_JoystickPowerLevel")))
  ((tag . "struct") (ns . 0) (name . "_SDL_GameController") (id . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:57:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GameController")
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:58:36")
    (type (tag . "struct") (ns . 0) (name . "_SDL_GameController")
      (id . 0)
      (location
        .
        "/usr/local/include/SDL2/SDL_gamecontroller.h:57:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "enum") (ns . 0) (name . "") (id . 98)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:61:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_CONTROLLER_BINDTYPE_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BINDTYPE_BUTTON")
          (value . 1))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BINDTYPE_AXIS")
          (value . 2))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BINDTYPE_HAT")
          (value . 3)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GameControllerBindType")
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:67:3")
    (type (tag . ":enum") (name . "") (id . 98)))
  ((tag . "struct") (ns . 0) (name . "SDL_GameControllerButtonBind") (id . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:72:16")
    (bit-size . 96) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "bindType") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32)
          (type (tag . "SDL_GameControllerBindType")))
        ((tag . "field") (name . "value") (bit-offset . 32) (bit-size . 64)
          (bit-alignment . 32)
          (type (tag . "union") (ns . 0) (name . "") (id . 99)
            (location
              .
              "/usr/local/include/SDL2/SDL_gamecontroller.h:75:5")
            (bit-size . 64) (bit-alignment . 32)
            (fields
              .
              #(((tag . "field") (name . "button") (bit-offset . 0) (bit-size . 32)
                  (bit-alignment . 32)
                  (type
                    (tag . ":int")
                    (bit-size . 32)
                    (bit-alignment . 32)))
                ((tag . "field") (name . "axis") (bit-offset . 0) (bit-size . 32)
                  (bit-alignment . 32)
                  (type
                    (tag . ":int")
                    (bit-size . 32)
                    (bit-alignment . 32)))
                ((tag . "field") (name . "hat") (bit-offset . 0) (bit-size . 64)
                  (bit-alignment . 32)
                  (type (tag . "struct") (ns . 0) (name . "") (id . 100)
                    (location
                      .
                      "/usr/local/include/SDL2/SDL_gamecontroller.h:79:9")
                    (bit-size . 64) (bit-alignment . 32)
                    (fields
                      .
                      #(((tag . "field") (name . "hat") (bit-offset . 0) (bit-size . 32)
                          (bit-alignment . 32)
                          (type
                            (tag . ":int")
                            (bit-size . 32)
                            (bit-alignment . 32)))
                        ((tag . "field") (name . "hat_mask") (bit-offset . 32)
                          (bit-size . 32) (bit-alignment . 32)
                          (type
                            (tag . ":int")
                            (bit-size . 32)
                            (bit-alignment . 32))))))))))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GameControllerButtonBind")
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:85:3")
    (type
      (tag . ":struct")
      (name . "SDL_GameControllerButtonBind")
      (id . 101)))
  ((tag . "function") (name . "SDL_GameControllerAddMappingsFromRW") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:122:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "rw")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))
        ((tag . "parameter")
          (name . "freerw")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GameControllerAddMapping") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:136:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mappingString")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GameControllerNumMappings") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:143:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GameControllerMappingForIndex") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:150:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "mapping_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GameControllerMappingForGUID") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:157:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "guid")
          (type (tag . "SDL_JoystickGUID")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GameControllerMapping") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:164:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_IsGameController") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:169:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GameControllerNameForIndex") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:176:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GameControllerMappingForDeviceIndex") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:184:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GameControllerOpen") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:195:45")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_GameController"))))
  ((tag . "function") (name . "SDL_GameControllerFromInstanceID") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:200:45")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joyid")
          (type (tag . "SDL_JoystickID")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_GameController"))))
  ((tag . "function") (name . "SDL_GameControllerName") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:205:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GameControllerGetPlayerIndex") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:212:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GameControllerGetVendor") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:218:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_GameControllerGetProduct") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:224:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_GameControllerGetProductVersion") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:230:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type (tag . "Uint16")))
  ((tag . "function") (name . "SDL_GameControllerGetAttached") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:236:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GameControllerGetJoystick") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:241:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Joystick"))))
  ((tag . "function") (name . "SDL_GameControllerEventState") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:252:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "state")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GameControllerUpdate") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:260:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "enum") (ns . 0) (name . "") (id . 102)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:272:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_INVALID")
          (value . 4294967295))
        ((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_LEFTX")
          (value . 0))
        ((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_LEFTY")
          (value . 1))
        ((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_RIGHTX")
          (value . 2))
        ((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_RIGHTY")
          (value . 3))
        ((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_TRIGGERLEFT")
          (value . 4))
        ((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_TRIGGERRIGHT")
          (value . 5))
        ((tag . "field")
          (name . "SDL_CONTROLLER_AXIS_MAX")
          (value . 6)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GameControllerAxis")
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:282:3")
    (type (tag . ":enum") (name . "") (id . 102)))
  ((tag . "function") (name . "SDL_GameControllerGetAxisFromString") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:287:48")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pchString")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_GameControllerAxis")))
  ((tag . "function") (name . "SDL_GameControllerGetStringForAxis") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:292:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "axis")
          (type (tag . "SDL_GameControllerAxis")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GameControllerGetBindForAxis") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:298:1")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))
        ((tag . "parameter")
          (name . "axis")
          (type (tag . "SDL_GameControllerAxis")))))
    (return-type (tag . "SDL_GameControllerButtonBind")))
  ((tag . "function") (name . "SDL_GameControllerGetAxis") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:310:1")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))
        ((tag . "parameter")
          (name . "axis")
          (type (tag . "SDL_GameControllerAxis")))))
    (return-type (tag . "Sint16")))
  ((tag . "enum") (ns . 0) (name . "") (id . 103)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:316:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_INVALID")
          (value . 4294967295))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_A")
          (value . 0))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_B")
          (value . 1))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_X")
          (value . 2))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_Y")
          (value . 3))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_BACK")
          (value . 4))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_GUIDE")
          (value . 5))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_START")
          (value . 6))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_LEFTSTICK")
          (value . 7))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_RIGHTSTICK")
          (value . 8))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_LEFTSHOULDER")
          (value . 9))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_RIGHTSHOULDER")
          (value . 10))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_DPAD_UP")
          (value . 11))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_DPAD_DOWN")
          (value . 12))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_DPAD_LEFT")
          (value . 13))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_DPAD_RIGHT")
          (value . 14))
        ((tag . "field")
          (name . "SDL_CONTROLLER_BUTTON_MAX")
          (value . 15)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GameControllerButton")
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:335:3")
    (type (tag . ":enum") (name . "") (id . 103)))
  ((tag . "function") (name . "SDL_GameControllerGetButtonFromString") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:340:50")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "pchString")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_GameControllerButton")))
  ((tag . "function") (name . "SDL_GameControllerGetStringForButton") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:345:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "button")
          (type (tag . "SDL_GameControllerButton")))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GameControllerGetBindForButton") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:351:1")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))
        ((tag . "parameter")
          (name . "button")
          (type (tag . "SDL_GameControllerButton")))))
    (return-type (tag . "SDL_GameControllerButtonBind")))
  ((tag . "function") (name . "SDL_GameControllerGetButton") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:360:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))
        ((tag . "parameter")
          (name . "button")
          (type (tag . "SDL_GameControllerButton")))))
    (return-type (tag . "Uint8")))
  ((tag . "function") (name . "SDL_GameControllerRumble") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:374:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))
        ((tag . "parameter")
          (name . "low_frequency_rumble")
          (type (tag . "Uint16")))
        ((tag . "parameter")
          (name . "high_frequency_rumble")
          (type (tag . "Uint16")))
        ((tag . "parameter")
          (name . "duration_ms")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GameControllerClose") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_gamecontroller.h:379:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gamecontroller")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_GameController"))))))
    (return-type (tag . ":void")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TouchID")
    (location . "/usr/local/include/SDL2/SDL_touch.h:41:16")
    (type (tag . "Sint64")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_FingerID")
    (location . "/usr/local/include/SDL2/SDL_touch.h:42:16")
    (type (tag . "Sint64")))
  ((tag . "struct") (ns . 0) (name . "SDL_Finger") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_touch.h:44:16")
    (bit-size . 192) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "id") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "SDL_FingerID")))
        ((tag . "field") (name . "x") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "y") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "pressure") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Finger")
    (location . "/usr/local/include/SDL2/SDL_touch.h:50:3")
    (type (tag . ":struct") (name . "SDL_Finger") (id . 104)))
  ((tag . "function") (name . "SDL_GetNumTouchDevices") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_touch.h:61:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetTouchDevice") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_touch.h:66:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_TouchID")))
  ((tag . "function") (name . "SDL_GetNumTouchFingers") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_touch.h:71:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "touchID")
          (type (tag . "SDL_TouchID")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetTouchFinger") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_touch.h:76:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "touchID")
          (type (tag . "SDL_TouchID")))
        ((tag . "parameter")
          (name . "index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Finger"))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_GestureID")
    (location . "/usr/local/include/SDL2/SDL_gesture.h:44:16")
    (type (tag . "Sint64")))
  ((tag . "function") (name . "SDL_RecordGesture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_gesture.h:53:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "touchId")
          (type (tag . "SDL_TouchID")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SaveAllDollarTemplates") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_gesture.h:61:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SaveDollarTemplate") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_gesture.h:68:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "gestureId")
          (type (tag . "SDL_GestureID")))
        ((tag . "parameter")
          (name . "dst")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_LoadDollarTemplates") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_gesture.h:76:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "touchId")
          (type (tag . "SDL_TouchID")))
        ((tag . "parameter")
          (name . "src")
          (type (tag . ":pointer") (type (tag . "SDL_RWops"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "enum") (ns . 0) (name . "") (id . 105)
    (location . "/usr/local/include/SDL2/SDL_events.h:55:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_FIRSTEVENT") (value . 0))
        ((tag . "field") (name . "SDL_QUIT") (value . 256))
        ((tag . "field")
          (name . "SDL_APP_TERMINATING")
          (value . 257))
        ((tag . "field") (name . "SDL_APP_LOWMEMORY") (value . 258))
        ((tag . "field")
          (name . "SDL_APP_WILLENTERBACKGROUND")
          (value . 259))
        ((tag . "field")
          (name . "SDL_APP_DIDENTERBACKGROUND")
          (value . 260))
        ((tag . "field")
          (name . "SDL_APP_WILLENTERFOREGROUND")
          (value . 261))
        ((tag . "field")
          (name . "SDL_APP_DIDENTERFOREGROUND")
          (value . 262))
        ((tag . "field") (name . "SDL_DISPLAYEVENT") (value . 336))
        ((tag . "field") (name . "SDL_WINDOWEVENT") (value . 512))
        ((tag . "field") (name . "SDL_SYSWMEVENT") (value . 513))
        ((tag . "field") (name . "SDL_KEYDOWN") (value . 768))
        ((tag . "field") (name . "SDL_KEYUP") (value . 769))
        ((tag . "field") (name . "SDL_TEXTEDITING") (value . 770))
        ((tag . "field") (name . "SDL_TEXTINPUT") (value . 771))
        ((tag . "field") (name . "SDL_KEYMAPCHANGED") (value . 772))
        ((tag . "field") (name . "SDL_MOUSEMOTION") (value . 1024))
        ((tag . "field")
          (name . "SDL_MOUSEBUTTONDOWN")
          (value . 1025))
        ((tag . "field")
          (name . "SDL_MOUSEBUTTONUP")
          (value . 1026))
        ((tag . "field") (name . "SDL_MOUSEWHEEL") (value . 1027))
        ((tag . "field")
          (name . "SDL_JOYAXISMOTION")
          (value . 1536))
        ((tag . "field")
          (name . "SDL_JOYBALLMOTION")
          (value . 1537))
        ((tag . "field") (name . "SDL_JOYHATMOTION") (value . 1538))
        ((tag . "field")
          (name . "SDL_JOYBUTTONDOWN")
          (value . 1539))
        ((tag . "field") (name . "SDL_JOYBUTTONUP") (value . 1540))
        ((tag . "field")
          (name . "SDL_JOYDEVICEADDED")
          (value . 1541))
        ((tag . "field")
          (name . "SDL_JOYDEVICEREMOVED")
          (value . 1542))
        ((tag . "field")
          (name . "SDL_CONTROLLERAXISMOTION")
          (value . 1616))
        ((tag . "field")
          (name . "SDL_CONTROLLERBUTTONDOWN")
          (value . 1617))
        ((tag . "field")
          (name . "SDL_CONTROLLERBUTTONUP")
          (value . 1618))
        ((tag . "field")
          (name . "SDL_CONTROLLERDEVICEADDED")
          (value . 1619))
        ((tag . "field")
          (name . "SDL_CONTROLLERDEVICEREMOVED")
          (value . 1620))
        ((tag . "field")
          (name . "SDL_CONTROLLERDEVICEREMAPPED")
          (value . 1621))
        ((tag . "field") (name . "SDL_FINGERDOWN") (value . 1792))
        ((tag . "field") (name . "SDL_FINGERUP") (value . 1793))
        ((tag . "field") (name . "SDL_FINGERMOTION") (value . 1794))
        ((tag . "field")
          (name . "SDL_DOLLARGESTURE")
          (value . 2048))
        ((tag . "field") (name . "SDL_DOLLARRECORD") (value . 2049))
        ((tag . "field") (name . "SDL_MULTIGESTURE") (value . 2050))
        ((tag . "field")
          (name . "SDL_CLIPBOARDUPDATE")
          (value . 2304))
        ((tag . "field") (name . "SDL_DROPFILE") (value . 4096))
        ((tag . "field") (name . "SDL_DROPTEXT") (value . 4097))
        ((tag . "field") (name . "SDL_DROPBEGIN") (value . 4098))
        ((tag . "field") (name . "SDL_DROPCOMPLETE") (value . 4099))
        ((tag . "field")
          (name . "SDL_AUDIODEVICEADDED")
          (value . 4352))
        ((tag . "field")
          (name . "SDL_AUDIODEVICEREMOVED")
          (value . 4353))
        ((tag . "field") (name . "SDL_SENSORUPDATE") (value . 4608))
        ((tag . "field")
          (name . "SDL_RENDER_TARGETS_RESET")
          (value . 8192))
        ((tag . "field")
          (name . "SDL_RENDER_DEVICE_RESET")
          (value . 8193))
        ((tag . "field") (name . "SDL_USEREVENT") (value . 32768))
        ((tag . "field")
          (name . "SDL_LASTEVENT")
          (value . 65535)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_EventType")
    (location . "/usr/local/include/SDL2/SDL_events.h:166:3")
    (type (tag . ":enum") (name . "") (id . 105)))
  ((tag . "struct") (ns . 0) (name . "SDL_CommonEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:171:16")
    (bit-size . 64) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_CommonEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:175:3")
    (type
      (tag . ":struct")
      (name . "SDL_CommonEvent")
      (id . 106)))
  ((tag . "struct") (ns . 0) (name . "SDL_DisplayEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:180:16")
    (bit-size . 160) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "display") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "event") (bit-offset . 96)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding3") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "data1") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_DisplayEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:190:3")
    (type
      (tag . ":struct")
      (name . "SDL_DisplayEvent")
      (id . 107)))
  ((tag . "struct") (ns . 0) (name . "SDL_WindowEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:195:16")
    (bit-size . 192) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "event") (bit-offset . 96)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding3") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "data1") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32")))
        ((tag . "field") (name . "data2") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_WindowEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:206:3")
    (type
      (tag . ":struct")
      (name . "SDL_WindowEvent")
      (id . 108)))
  ((tag . "struct") (ns . 0) (name . "SDL_KeyboardEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:211:16")
    (bit-size . 256) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "state") (bit-offset . 96)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "repeat") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding3") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "keysym") (bit-offset . 128) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_Keysym"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_KeyboardEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:221:3")
    (type
      (tag . ":struct")
      (name . "SDL_KeyboardEvent")
      (id . 109)))
  ((tag . "struct") (ns . 0) (name . "SDL_TextEditingEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:227:16")
    (bit-size . 416) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "text") (bit-offset . 96) (bit-size . 256)
          (bit-alignment . 8)
          (type
            (tag . ":array")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))
            (size . 32)))
        ((tag . "field") (name . "start") (bit-offset . 352) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32")))
        ((tag . "field") (name . "length") (bit-offset . 384) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TextEditingEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:235:3")
    (type
      (tag . ":struct")
      (name . "SDL_TextEditingEvent")
      (id . 110)))
  ((tag . "struct") (ns . 0) (name . "SDL_TextInputEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:242:16")
    (bit-size . 352) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "text") (bit-offset . 96) (bit-size . 256)
          (bit-alignment . 8)
          (type
            (tag . ":array")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))
            (size . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TextInputEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:248:3")
    (type
      (tag . ":struct")
      (name . "SDL_TextInputEvent")
      (id . 111)))
  ((tag . "struct") (ns . 0) (name . "SDL_MouseMotionEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:253:16")
    (bit-size . 288) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "state") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "x") (bit-offset . 160)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . "Sint32")))
        ((tag . "field") (name . "y") (bit-offset . 192)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . "Sint32")))
        ((tag . "field") (name . "xrel") (bit-offset . 224) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32")))
        ((tag . "field") (name . "yrel") (bit-offset . 256) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MouseMotionEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:264:3")
    (type
      (tag . ":struct")
      (name . "SDL_MouseMotionEvent")
      (id . 112)))
  ((tag . "struct") (ns . 0) (name . "SDL_MouseButtonEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:269:16")
    (bit-size . 224) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "button") (bit-offset . 128) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "state") (bit-offset . 136) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "clicks") (bit-offset . 144) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 152) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "x") (bit-offset . 160)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . "Sint32")))
        ((tag . "field") (name . "y") (bit-offset . 192)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . "Sint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MouseButtonEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:281:3")
    (type
      (tag . ":struct")
      (name . "SDL_MouseButtonEvent")
      (id . 113)))
  ((tag . "struct") (ns . 0) (name . "SDL_MouseWheelEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:286:16")
    (bit-size . 224) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "x") (bit-offset . 128)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . "Sint32")))
        ((tag . "field") (name . "y") (bit-offset . 160)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . "Sint32")))
        ((tag . "field") (name . "direction") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MouseWheelEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:295:3")
    (type
      (tag . ":struct")
      (name . "SDL_MouseWheelEvent")
      (id . 114)))
  ((tag . "struct") (ns . 0) (name . "SDL_JoyAxisEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:300:16")
    (bit-size . 160) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_JoystickID")))
        ((tag . "field") (name . "axis") (bit-offset . 96)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding3") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "value") (bit-offset . 128) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "padding4") (bit-offset . 144) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoyAxisEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:311:3")
    (type
      (tag . ":struct")
      (name . "SDL_JoyAxisEvent")
      (id . 115)))
  ((tag . "struct") (ns . 0) (name . "SDL_JoyBallEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:316:16")
    (bit-size . 160) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_JoystickID")))
        ((tag . "field") (name . "ball") (bit-offset . 96)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding3") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "xrel") (bit-offset . 128) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "yrel") (bit-offset . 144) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoyBallEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:327:3")
    (type
      (tag . ":struct")
      (name . "SDL_JoyBallEvent")
      (id . 116)))
  ((tag . "struct") (ns . 0) (name . "SDL_JoyHatEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:332:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_JoystickID")))
        ((tag . "field") (name . "hat") (bit-offset . 96)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "value") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoyHatEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:347:3")
    (type
      (tag . ":struct")
      (name . "SDL_JoyHatEvent")
      (id . 117)))
  ((tag . "struct") (ns . 0) (name . "SDL_JoyButtonEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:352:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_JoystickID")))
        ((tag . "field") (name . "button") (bit-offset . 96) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "state") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoyButtonEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:361:3")
    (type
      (tag . ":struct")
      (name . "SDL_JoyButtonEvent")
      (id . 118)))
  ((tag . "struct") (ns . 0) (name . "SDL_JoyDeviceEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:366:16")
    (bit-size . 96) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_JoyDeviceEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:371:3")
    (type
      (tag . ":struct")
      (name . "SDL_JoyDeviceEvent")
      (id . 119)))
  ((tag . "struct") (ns . 0) (name . "SDL_ControllerAxisEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:377:16")
    (bit-size . 160) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_JoystickID")))
        ((tag . "field") (name . "axis") (bit-offset . 96)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding3") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "value") (bit-offset . 128) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "padding4") (bit-offset . 144) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_ControllerAxisEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:388:3")
    (type
      (tag . ":struct")
      (name . "SDL_ControllerAxisEvent")
      (id . 120)))
  ((tag . "struct") (ns . 0) (name . "SDL_ControllerButtonEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:394:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "SDL_JoystickID")))
        ((tag . "field") (name . "button") (bit-offset . 96) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "state") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_ControllerButtonEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:403:3")
    (type
      (tag . ":struct")
      (name . "SDL_ControllerButtonEvent")
      (id . 121)))
  ((tag . "struct") (ns . 0) (name . "SDL_ControllerDeviceEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:409:16")
    (bit-size . 96) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_ControllerDeviceEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:414:3")
    (type
      (tag . ":struct")
      (name . "SDL_ControllerDeviceEvent")
      (id . 122)))
  ((tag . "struct") (ns . 0) (name . "SDL_AudioDeviceEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:419:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "iscapture") (bit-offset . 96) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding1") (bit-offset . 104) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding2") (bit-offset . 112) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "padding3") (bit-offset . 120) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_AudioDeviceEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:428:3")
    (type
      (tag . ":struct")
      (name . "SDL_AudioDeviceEvent")
      (id . 123)))
  ((tag . "struct") (ns . 0) (name . "SDL_TouchFingerEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:434:16")
    (bit-size . 384) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "touchId") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "SDL_TouchID")))
        ((tag . "field") (name . "fingerId") (bit-offset . 128) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "SDL_FingerID")))
        ((tag . "field") (name . "x") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "y") (bit-offset . 224) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "dx") (bit-offset . 256) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "dy") (bit-offset . 288) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "pressure") (bit-offset . 320) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TouchFingerEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:445:3")
    (type
      (tag . ":struct")
      (name . "SDL_TouchFingerEvent")
      (id . 124)))
  ((tag . "struct") (ns . 0) (name . "SDL_MultiGestureEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:451:16")
    (bit-size . 320) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "touchId") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "SDL_TouchID")))
        ((tag . "field") (name . "dTheta") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "dDist") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "x") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "y") (bit-offset . 224) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "numFingers") (bit-offset . 256) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "padding") (bit-offset . 272) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MultiGestureEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:462:3")
    (type
      (tag . ":struct")
      (name . "SDL_MultiGestureEvent")
      (id . 125)))
  ((tag . "struct") (ns . 0) (name . "SDL_DollarGestureEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:468:16")
    (bit-size . 320) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "touchId") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "SDL_TouchID")))
        ((tag . "field") (name . "gestureId") (bit-offset . 128) (bit-size . 64)
          (bit-alignment . 64) (type (tag . "SDL_GestureID")))
        ((tag . "field") (name . "numFingers") (bit-offset . 192) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "error") (bit-offset . 224) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "x") (bit-offset . 256) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "field") (name . "y") (bit-offset . 288) (bit-size . 32)
          (bit-alignment . 32)
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_DollarGestureEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:478:3")
    (type
      (tag . ":struct")
      (name . "SDL_DollarGestureEvent")
      (id . 126)))
  ((tag . "struct") (ns . 0) (name . "SDL_DropEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:486:16")
    (bit-size . 192) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "file") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "field") (name . "windowID") (bit-offset . 128) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_DropEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:492:3")
    (type
      (tag . ":struct")
      (name . "SDL_DropEvent")
      (id . 127)))
  ((tag . "struct") (ns . 0) (name . "SDL_SensorEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:498:16")
    (bit-size . 288) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "which") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32")))
        ((tag . "field") (name . "data") (bit-offset . 96) (bit-size . 192)
          (bit-alignment . 32)
          (type
            (tag . ":array")
            (type (tag . ":float") (bit-size . 32) (bit-alignment . 32))
            (size . 6))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_SensorEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:504:3")
    (type
      (tag . ":struct")
      (name . "SDL_SensorEvent")
      (id . 128)))
  ((tag . "struct") (ns . 0) (name . "SDL_QuitEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:509:16")
    (bit-size . 64) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_QuitEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:513:3")
    (type
      (tag . ":struct")
      (name . "SDL_QuitEvent")
      (id . 129)))
  ((tag . "struct") (ns . 0) (name . "SDL_OSEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:518:16")
    (bit-size . 64) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_OSEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:522:3")
    (type (tag . ":struct") (name . "SDL_OSEvent") (id . 130)))
  ((tag . "struct") (ns . 0) (name . "SDL_UserEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:527:16")
    (bit-size . 256) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "windowID") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "code") (bit-offset . 96) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Sint32")))
        ((tag . "field") (name . "data1") (bit-offset . 128) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "field") (name . "data2") (bit-offset . 192) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . ":void")))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_UserEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:535:3")
    (type
      (tag . ":struct")
      (name . "SDL_UserEvent")
      (id . 131)))
  ((tag . "struct") (ns . 0) (name . "SDL_SysWMmsg") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:538:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_SysWMmsg")
    (location . "/usr/local/include/SDL2/SDL_events.h:539:29")
    (type (tag . "struct") (ns . 0) (name . "SDL_SysWMmsg") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_events.h:538:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "struct") (ns . 0) (name . "SDL_SysWMEvent") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:547:16")
    (bit-size . 128) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "timestamp") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "msg") (bit-offset . 64) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . "SDL_SysWMmsg")))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_SysWMEvent")
    (location . "/usr/local/include/SDL2/SDL_events.h:552:3")
    (type
      (tag . ":struct")
      (name . "SDL_SysWMEvent")
      (id . 133)))
  ((tag . "union") (ns . 0) (name . "SDL_Event") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:557:15")
    (bit-size . 448) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "common") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 32) (type (tag . "SDL_CommonEvent")))
        ((tag . "field") (name . "display") (bit-offset . 0) (bit-size . 160)
          (bit-alignment . 32) (type (tag . "SDL_DisplayEvent")))
        ((tag . "field") (name . "window") (bit-offset . 0) (bit-size . 192)
          (bit-alignment . 32) (type (tag . "SDL_WindowEvent")))
        ((tag . "field") (name . "key") (bit-offset . 0) (bit-size . 256)
          (bit-alignment . 32) (type (tag . "SDL_KeyboardEvent")))
        ((tag . "field") (name . "edit") (bit-offset . 0) (bit-size . 416)
          (bit-alignment . 32) (type (tag . "SDL_TextEditingEvent")))
        ((tag . "field") (name . "text") (bit-offset . 0) (bit-size . 352)
          (bit-alignment . 32) (type (tag . "SDL_TextInputEvent")))
        ((tag . "field") (name . "motion") (bit-offset . 0) (bit-size . 288)
          (bit-alignment . 32) (type (tag . "SDL_MouseMotionEvent")))
        ((tag . "field") (name . "button") (bit-offset . 0) (bit-size . 224)
          (bit-alignment . 32) (type (tag . "SDL_MouseButtonEvent")))
        ((tag . "field") (name . "wheel") (bit-offset . 0) (bit-size . 224)
          (bit-alignment . 32) (type (tag . "SDL_MouseWheelEvent")))
        ((tag . "field") (name . "jaxis") (bit-offset . 0) (bit-size . 160)
          (bit-alignment . 32) (type (tag . "SDL_JoyAxisEvent")))
        ((tag . "field") (name . "jball") (bit-offset . 0) (bit-size . 160)
          (bit-alignment . 32) (type (tag . "SDL_JoyBallEvent")))
        ((tag . "field") (name . "jhat") (bit-offset . 0) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_JoyHatEvent")))
        ((tag . "field") (name . "jbutton") (bit-offset . 0) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_JoyButtonEvent")))
        ((tag . "field") (name . "jdevice") (bit-offset . 0) (bit-size . 96)
          (bit-alignment . 32) (type (tag . "SDL_JoyDeviceEvent")))
        ((tag . "field") (name . "caxis") (bit-offset . 0) (bit-size . 160)
          (bit-alignment . 32)
          (type (tag . "SDL_ControllerAxisEvent")))
        ((tag . "field") (name . "cbutton") (bit-offset . 0) (bit-size . 128)
          (bit-alignment . 32)
          (type (tag . "SDL_ControllerButtonEvent")))
        ((tag . "field") (name . "cdevice") (bit-offset . 0) (bit-size . 96)
          (bit-alignment . 32)
          (type (tag . "SDL_ControllerDeviceEvent")))
        ((tag . "field") (name . "adevice") (bit-offset . 0) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_AudioDeviceEvent")))
        ((tag . "field") (name . "sensor") (bit-offset . 0) (bit-size . 288)
          (bit-alignment . 32) (type (tag . "SDL_SensorEvent")))
        ((tag . "field") (name . "quit") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 32) (type (tag . "SDL_QuitEvent")))
        ((tag . "field") (name . "user") (bit-offset . 0) (bit-size . 256)
          (bit-alignment . 64) (type (tag . "SDL_UserEvent")))
        ((tag . "field") (name . "syswm") (bit-offset . 0) (bit-size . 128)
          (bit-alignment . 64) (type (tag . "SDL_SysWMEvent")))
        ((tag . "field") (name . "tfinger") (bit-offset . 0) (bit-size . 384)
          (bit-alignment . 64) (type (tag . "SDL_TouchFingerEvent")))
        ((tag . "field") (name . "mgesture") (bit-offset . 0) (bit-size . 320)
          (bit-alignment . 64) (type (tag . "SDL_MultiGestureEvent")))
        ((tag . "field") (name . "dgesture") (bit-offset . 0) (bit-size . 320)
          (bit-alignment . 64)
          (type (tag . "SDL_DollarGestureEvent")))
        ((tag . "field") (name . "drop") (bit-offset . 0) (bit-size . 192)
          (bit-alignment . 64) (type (tag . "SDL_DropEvent")))
        ((tag . "field") (name . "padding") (bit-offset . 0) (bit-size . 448)
          (bit-alignment . 8)
          (type
            (tag . ":array")
            (type (tag . "Uint8"))
            (size . 56))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Event")
    (location . "/usr/local/include/SDL2/SDL_events.h:595:3")
    (type (tag . ":union") (name . "SDL_Event") (id . 134)))
  ((tag . "function") (name . "SDL_PumpEvents") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:607:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "enum") (ns . 0) (name . "") (id . 135)
    (location . "/usr/local/include/SDL2/SDL_events.h:610:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_ADDEVENT") (value . 0))
        ((tag . "field") (name . "SDL_PEEKEVENT") (value . 1))
        ((tag . "field") (name . "SDL_GETEVENT") (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_eventaction")
    (location . "/usr/local/include/SDL2/SDL_events.h:615:3")
    (type (tag . ":enum") (name . "") (id . 135)))
  ((tag . "function") (name . "SDL_PeepEvents") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:635:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "events")
          (type (tag . ":pointer") (type (tag . "SDL_Event"))))
        ((tag . "parameter")
          (name . "numevents")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "action")
          (type (tag . "SDL_eventaction")))
        ((tag . "parameter")
          (name . "minType")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "maxType")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HasEvent") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:643:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "type")
          (type (tag . "Uint32")))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_HasEvents") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:644:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "minType")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "maxType")
          (type (tag . "Uint32")))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_FlushEvent") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:652:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "type")
          (type (tag . "Uint32")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_FlushEvents") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:653:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "minType")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "maxType")
          (type (tag . "Uint32")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_PollEvent") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:663:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "event")
          (type (tag . ":pointer") (type (tag . "SDL_Event"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_WaitEvent") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:673:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "event")
          (type (tag . ":pointer") (type (tag . "SDL_Event"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_WaitEventTimeout") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:685:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "event")
          (type (tag . ":pointer") (type (tag . "SDL_Event"))))
        ((tag . "parameter")
          (name . "timeout")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_PushEvent") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:694:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "event")
          (type (tag . ":pointer") (type (tag . "SDL_Event"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_EventFilter")
    (location . "/usr/local/include/SDL2/SDL_events.h:696:24")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "SDL_SetEventFilter") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:723:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "filter")
          (type (tag . "SDL_EventFilter")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetEventFilter") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:730:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "filter")
          (type (tag . ":pointer") (type (tag . "SDL_EventFilter"))))
        ((tag . "parameter")
          (name . "userdata")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_AddEventWatch") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:736:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "filter")
          (type (tag . "SDL_EventFilter")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_DelEventWatch") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:742:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "filter")
          (type (tag . "SDL_EventFilter")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_FilterEvents") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:749:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "filter")
          (type (tag . "SDL_EventFilter")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_EventState") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:767:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "type")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "state")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint8")))
  ((tag . "function") (name . "SDL_RegisterEvents") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_events.h:778:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "numevents")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetBasePath") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_filesystem.h:63:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GetPrefPath") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_filesystem.h:126:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "org")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "app")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "struct") (ns . 0) (name . "_SDL_Haptic") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:140:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Haptic")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:141:28")
    (type (tag . "struct") (ns . 0) (name . "_SDL_Haptic") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_haptic.h:140:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "struct") (ns . 0) (name . "SDL_HapticDirection") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:450:16")
    (bit-size . 128) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "dir") (bit-offset . 32) (bit-size . 96)
          (bit-alignment . 32)
          (type
            (tag . ":array")
            (type (tag . "Sint32"))
            (size . 3))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticDirection")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:454:3")
    (type
      (tag . ":struct")
      (name . "SDL_HapticDirection")
      (id . 137)))
  ((tag . "struct") (ns . 0) (name . "SDL_HapticConstant") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:468:16")
    (bit-size . 320) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "direction") (bit-offset . 32) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_HapticDirection")))
        ((tag . "field") (name . "length") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "delay") (bit-offset . 192) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "button") (bit-offset . 208) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "interval") (bit-offset . 224) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "level") (bit-offset . 240) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "attack_length") (bit-offset . 256) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "attack_level") (bit-offset . 272) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_length") (bit-offset . 288) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_level") (bit-offset . 304) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticConstant")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:490:3")
    (type
      (tag . ":struct")
      (name . "SDL_HapticConstant")
      (id . 138)))
  ((tag . "struct") (ns . 0) (name . "SDL_HapticPeriodic") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:549:16")
    (bit-size . 384) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "direction") (bit-offset . 32) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_HapticDirection")))
        ((tag . "field") (name . "length") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "delay") (bit-offset . 192) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "button") (bit-offset . 208) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "interval") (bit-offset . 224) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "period") (bit-offset . 240) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "magnitude") (bit-offset . 256) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "offset") (bit-offset . 272) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "phase") (bit-offset . 288) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "attack_length") (bit-offset . 304) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "attack_level") (bit-offset . 320) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_length") (bit-offset . 336) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_level") (bit-offset . 352) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticPeriodic")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:576:3")
    (type
      (tag . ":struct")
      (name . "SDL_HapticPeriodic")
      (id . 139)))
  ((tag . "struct") (ns . 0) (name . "SDL_HapticCondition") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:602:16")
    (bit-size . 544) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "direction") (bit-offset . 32) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_HapticDirection")))
        ((tag . "field") (name . "length") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "delay") (bit-offset . 192) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "button") (bit-offset . 208) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "interval") (bit-offset . 224) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "right_sat") (bit-offset . 240) (bit-size . 48)
          (bit-alignment . 16)
          (type (tag . ":array") (type (tag . "Uint16")) (size . 3)))
        ((tag . "field") (name . "left_sat") (bit-offset . 288) (bit-size . 48)
          (bit-alignment . 16)
          (type (tag . ":array") (type (tag . "Uint16")) (size . 3)))
        ((tag . "field") (name . "right_coeff") (bit-offset . 336) (bit-size . 48)
          (bit-alignment . 16)
          (type (tag . ":array") (type (tag . "Sint16")) (size . 3)))
        ((tag . "field") (name . "left_coeff") (bit-offset . 384) (bit-size . 48)
          (bit-alignment . 16)
          (type (tag . ":array") (type (tag . "Sint16")) (size . 3)))
        ((tag . "field") (name . "deadband") (bit-offset . 432) (bit-size . 48)
          (bit-alignment . 16)
          (type (tag . ":array") (type (tag . "Uint16")) (size . 3)))
        ((tag . "field") (name . "center") (bit-offset . 480) (bit-size . 48)
          (bit-alignment . 16)
          (type
            (tag . ":array")
            (type (tag . "Sint16"))
            (size . 3))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticCondition")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:624:3")
    (type
      (tag . ":struct")
      (name . "SDL_HapticCondition")
      (id . 140)))
  ((tag . "struct") (ns . 0) (name . "SDL_HapticRamp") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:639:16")
    (bit-size . 352) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "direction") (bit-offset . 32) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_HapticDirection")))
        ((tag . "field") (name . "length") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "delay") (bit-offset . 192) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "button") (bit-offset . 208) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "interval") (bit-offset . 224) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "start") (bit-offset . 240) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "end") (bit-offset . 256) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Sint16")))
        ((tag . "field") (name . "attack_length") (bit-offset . 272) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "attack_level") (bit-offset . 288) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_length") (bit-offset . 304) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_level") (bit-offset . 320) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticRamp")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:662:3")
    (type
      (tag . ":struct")
      (name . "SDL_HapticRamp")
      (id . 141)))
  ((tag . "struct") (ns . 0) (name . "SDL_HapticLeftRight") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:676:16")
    (bit-size . 96) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "length") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "large_magnitude") (bit-offset . 64)
          (bit-size . 16) (bit-alignment . 16)
          (type (tag . "Uint16")))
        ((tag . "field") (name . "small_magnitude") (bit-offset . 80)
          (bit-size . 16) (bit-alignment . 16)
          (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticLeftRight")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:687:3")
    (type
      (tag . ":struct")
      (name . "SDL_HapticLeftRight")
      (id . 142)))
  ((tag . "struct") (ns . 0) (name . "SDL_HapticCustom") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:704:16")
    (bit-size . 448) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "direction") (bit-offset . 32) (bit-size . 128)
          (bit-alignment . 32) (type (tag . "SDL_HapticDirection")))
        ((tag . "field") (name . "length") (bit-offset . 160) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "delay") (bit-offset . 192) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "button") (bit-offset . 208) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "interval") (bit-offset . 224) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "channels") (bit-offset . 240) (bit-size . 8)
          (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "period") (bit-offset . 256) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "samples") (bit-offset . 272) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "data") (bit-offset . 320) (bit-size . 64)
          (bit-alignment . 64)
          (type (tag . ":pointer") (type (tag . "Uint16"))))
        ((tag . "field") (name . "attack_length") (bit-offset . 384) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "attack_level") (bit-offset . 400) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_length") (bit-offset . 416) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "fade_level") (bit-offset . 432) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticCustom")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:729:3")
    (type
      (tag . ":struct")
      (name . "SDL_HapticCustom")
      (id . 143)))
  ((tag . "union") (ns . 0) (name . "SDL_HapticEffect") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:800:15")
    (bit-size . 576) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "type") (bit-offset . 0) (bit-size . 16)
          (bit-alignment . 16) (type (tag . "Uint16")))
        ((tag . "field") (name . "constant") (bit-offset . 0) (bit-size . 320)
          (bit-alignment . 32) (type (tag . "SDL_HapticConstant")))
        ((tag . "field") (name . "periodic") (bit-offset . 0) (bit-size . 384)
          (bit-alignment . 32) (type (tag . "SDL_HapticPeriodic")))
        ((tag . "field") (name . "condition") (bit-offset . 0) (bit-size . 544)
          (bit-alignment . 32) (type (tag . "SDL_HapticCondition")))
        ((tag . "field") (name . "ramp") (bit-offset . 0) (bit-size . 352)
          (bit-alignment . 32) (type (tag . "SDL_HapticRamp")))
        ((tag . "field") (name . "leftright") (bit-offset . 0) (bit-size . 96)
          (bit-alignment . 32) (type (tag . "SDL_HapticLeftRight")))
        ((tag . "field") (name . "custom") (bit-offset . 0) (bit-size . 448)
          (bit-alignment . 64) (type (tag . "SDL_HapticCustom"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HapticEffect")
    (location . "/usr/local/include/SDL2/SDL_haptic.h:810:3")
    (type
      (tag . ":union")
      (name . "SDL_HapticEffect")
      (id . 144)))
  ((tag . "function") (name . "SDL_NumHaptics") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:819:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:832:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_HapticOpen") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:856:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Haptic"))))
  ((tag . "function") (name . "SDL_HapticOpened") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:867:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticIndex") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:878:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_MouseIsHaptic") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:887:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticOpenFromMouse") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:897:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Haptic"))))
  ((tag . "function") (name . "SDL_JoystickIsHaptic") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:908:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticOpenFromJoystick") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:927:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "joystick")
          (type (tag . ":pointer") (type (tag . "SDL_Joystick"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Haptic"))))
  ((tag . "function") (name . "SDL_HapticClose") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:935:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_HapticNumEffects") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:951:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticNumEffectsPlaying") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:967:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticQuery") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:985:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":unsigned-int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticNumAxes") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:993:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticEffectSupported") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1005:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "effect")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_HapticEffect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticNewEffect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1020:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "effect")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_HapticEffect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticUpdateEffect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1040:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "effect")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "data")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_HapticEffect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticRunEffect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1062:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "effect")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "iterations")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticStopEffect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1076:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "effect")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticDestroyEffect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1090:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "effect")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_HapticGetEffectStatus") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1105:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "effect")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticSetGain") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1124:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "gain")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticSetAutocenter") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1140:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "autocenter")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticPause") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1157:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticUnpause") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1169:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticStopAll") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1177:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticRumbleSupported") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1189:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticRumbleInit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1202:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticRumblePlay") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1216:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))
        ((tag . "parameter")
          (name . "strength")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "length")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_HapticRumbleStop") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_haptic.h:1228:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "haptic")
          (type (tag . ":pointer") (type (tag . "SDL_Haptic"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "enum") (ns . 0) (name . "") (id . 145)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1049:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_HINT_DEFAULT") (value . 0))
        ((tag . "field") (name . "SDL_HINT_NORMAL") (value . 1))
        ((tag . "field")
          (name . "SDL_HINT_OVERRIDE")
          (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HintPriority")
    (location . "/usr/local/include/SDL2/SDL_hints.h:1054:3")
    (type (tag . ":enum") (name . "") (id . 145)))
  ((tag . "function") (name . "SDL_SetHintWithPriority") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1066:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "value")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "priority")
          (type (tag . "SDL_HintPriority")))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_SetHint") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1075:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "value")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GetHint") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1083:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GetHintBoolean") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1090:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "default_value")
          (type (tag . "SDL_bool")))))
    (return-type (tag . "SDL_bool")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_HintCallback")
    (location . "/usr/local/include/SDL2/SDL_hints.h:1095:24")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "SDL_AddHintCallback") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1104:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "callback")
          (type (tag . "SDL_HintCallback")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_DelHintCallback") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1115:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "callback")
          (type (tag . "SDL_HintCallback")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_ClearHints") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_hints.h:1124:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LoadObject") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_loadso.h:58:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sofile")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_LoadFunction") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_loadso.h:65:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "handle")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "name")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_UnloadObject") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_loadso.h:71:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "handle")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "enum") (ns . 0) (name . "") (id . 146)
    (location . "/usr/local/include/SDL2/SDL_log.h:64:1")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_LOG_CATEGORY_APPLICATION")
          (value . 0))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_ERROR")
          (value . 1))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_ASSERT")
          (value . 2))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_SYSTEM")
          (value . 3))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_AUDIO")
          (value . 4))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_VIDEO")
          (value . 5))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RENDER")
          (value . 6))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_INPUT")
          (value . 7))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_TEST")
          (value . 8))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED1")
          (value . 9))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED2")
          (value . 10))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED3")
          (value . 11))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED4")
          (value . 12))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED5")
          (value . 13))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED6")
          (value . 14))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED7")
          (value . 15))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED8")
          (value . 16))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED9")
          (value . 17))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_RESERVED10")
          (value . 18))
        ((tag . "field")
          (name . "SDL_LOG_CATEGORY_CUSTOM")
          (value . 19)))))
  ((tag . "enum") (ns . 0) (name . "") (id . 147)
    (location . "/usr/local/include/SDL2/SDL_log.h:102:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_LOG_PRIORITY_VERBOSE")
          (value . 1))
        ((tag . "field")
          (name . "SDL_LOG_PRIORITY_DEBUG")
          (value . 2))
        ((tag . "field")
          (name . "SDL_LOG_PRIORITY_INFO")
          (value . 3))
        ((tag . "field")
          (name . "SDL_LOG_PRIORITY_WARN")
          (value . 4))
        ((tag . "field")
          (name . "SDL_LOG_PRIORITY_ERROR")
          (value . 5))
        ((tag . "field")
          (name . "SDL_LOG_PRIORITY_CRITICAL")
          (value . 6))
        ((tag . "field")
          (name . "SDL_NUM_LOG_PRIORITIES")
          (value . 7)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_LogPriority")
    (location . "/usr/local/include/SDL2/SDL_log.h:111:3")
    (type (tag . ":enum") (name . "") (id . 147)))
  ((tag . "function") (name . "SDL_LogSetAllPriority") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:117:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "priority")
          (type (tag . "SDL_LogPriority")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogSetPriority") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:122:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "priority")
          (type (tag . "SDL_LogPriority")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogGetPriority") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:128:41")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_LogPriority")))
  ((tag . "function") (name . "SDL_LogResetPriorities") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:135:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_Log") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:140:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogVerbose") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:145:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogDebug") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:150:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogInfo") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:155:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogWarn") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:160:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogError") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:165:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogCritical") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:170:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogMessage") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:175:30")
    (variadic . #t) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "priority")
          (type (tag . "SDL_LogPriority")))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type
              (tag . ":char")
              (bit-size . 8)
              (bit-alignment . 8))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogMessageV") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:182:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "category")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "priority")
          (type (tag . "SDL_LogPriority")))
        ((tag . "parameter")
          (name . "fmt")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "ap")
          (type (tag . "va_list")))))
    (return-type (tag . ":void")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_LogOutputFunction")
    (location . "/usr/local/include/SDL2/SDL_log.h:189:24")
    (type (tag . ":function-pointer")))
  ((tag . "function") (name . "SDL_LogGetOutputFunction") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:194:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "callback")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_LogOutputFunction"))))
        ((tag . "parameter")
          (name . "userdata")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_LogSetOutputFunction") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_log.h:200:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "callback")
          (type (tag . "SDL_LogOutputFunction")))
        ((tag . "parameter")
          (name . "userdata")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . ":void")))
  ((tag . "enum") (ns . 0) (name . "") (id . 148)
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:37:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_MESSAGEBOX_ERROR")
          (value . 16))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_WARNING")
          (value . 32))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_INFORMATION")
          (value . 64)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MessageBoxFlags")
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:42:3")
    (type (tag . ":enum") (name . "") (id . 148)))
  ((tag . "enum") (ns . 0) (name . "") (id . 149)
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:47:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT")
          (value . 1))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT")
          (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MessageBoxButtonFlags")
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:51:3")
    (type (tag . ":enum") (name . "") (id . 149)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MessageBoxButtonData")
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:61:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 150)
      (location . "/usr/local/include/SDL2/SDL_messagebox.h:56:9")
      (bit-size . 128) (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "flags") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 32) (type (tag . "Uint32")))
          ((tag . "field") (name . "buttonid") (bit-offset . 32) (bit-size . 32)
            (bit-alignment . 32)
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
          ((tag . "field") (name . "text") (bit-offset . 64) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":pointer")
              (type
                (tag . ":char")
                (bit-size . 8)
                (bit-alignment . 8))))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MessageBoxColor")
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:69:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 151)
      (location . "/usr/local/include/SDL2/SDL_messagebox.h:66:9")
      (bit-size . 24) (bit-alignment . 8)
      (fields
        .
        #(((tag . "field") (name . "r") (bit-offset . 0)
            (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
          ((tag . "field") (name . "g") (bit-offset . 8)
            (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
          ((tag . "field") (name . "b") (bit-offset . 16)
            (bit-size . 8) (bit-alignment . 8)
            (type (tag . "Uint8")))))))
  ((tag . "enum") (ns . 0) (name . "") (id . 152)
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:71:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_MESSAGEBOX_COLOR_BACKGROUND")
          (value . 0))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_COLOR_TEXT")
          (value . 1))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_COLOR_BUTTON_BORDER")
          (value . 2))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND")
          (value . 3))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED")
          (value . 4))
        ((tag . "field")
          (name . "SDL_MESSAGEBOX_COLOR_MAX")
          (value . 5)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MessageBoxColorType")
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:79:3")
    (type (tag . ":enum") (name . "") (id . 152)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MessageBoxColorScheme")
    (location . "/usr/local/include/SDL2/SDL_messagebox.h:87:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 153)
      (location . "/usr/local/include/SDL2/SDL_messagebox.h:84:9")
      (bit-size . 120) (bit-alignment . 8)
      (fields
        .
        #(((tag . "field") (name . "colors") (bit-offset . 0) (bit-size . 120)
            (bit-alignment . 8)
            (type
              (tag . ":array")
              (type (tag . "SDL_MessageBoxColor"))
              (size . 5)))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_MessageBoxData")
    (location
      .
      "/usr/local/include/SDL2/SDL_messagebox.h:103:3")
    (type (tag . "struct") (ns . 0) (name . "") (id . 154)
      (location . "/usr/local/include/SDL2/SDL_messagebox.h:92:9")
      (bit-size . 448) (bit-alignment . 64)
      (fields
        .
        #(((tag . "field") (name . "flags") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 32) (type (tag . "Uint32")))
          ((tag . "field") (name . "window") (bit-offset . 64) (bit-size . 64)
            (bit-alignment . 64)
            (type (tag . ":pointer") (type (tag . "SDL_Window"))))
          ((tag . "field") (name . "title") (bit-offset . 128) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
          ((tag . "field") (name . "message") (bit-offset . 192) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":pointer")
              (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
          ((tag . "field") (name . "numbuttons") (bit-offset . 256) (bit-size . 32)
            (bit-alignment . 32)
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
          ((tag . "field") (name . "buttons") (bit-offset . 320) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":pointer")
              (type (tag . "SDL_MessageBoxButtonData"))))
          ((tag . "field") (name . "colorScheme") (bit-offset . 384) (bit-size . 64)
            (bit-alignment . 64)
            (type
              (tag . ":pointer")
              (type (tag . "SDL_MessageBoxColorScheme"))))))))
  ((tag . "function") (name . "SDL_ShowMessageBox") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_messagebox.h:119:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "messageboxdata")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_MessageBoxData"))))
        ((tag . "parameter")
          (name . "buttonid")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_ShowSimpleMessageBox") (ns . 0)
    (location
      .
      "/usr/local/include/SDL2/SDL_messagebox.h:133:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "title")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "message")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "enum") (ns . 0) (name . "") (id . 155)
    (location . "/usr/local/include/SDL2/SDL_power.h:42:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_POWERSTATE_UNKNOWN")
          (value . 0))
        ((tag . "field")
          (name . "SDL_POWERSTATE_ON_BATTERY")
          (value . 1))
        ((tag . "field")
          (name . "SDL_POWERSTATE_NO_BATTERY")
          (value . 2))
        ((tag . "field")
          (name . "SDL_POWERSTATE_CHARGING")
          (value . 3))
        ((tag . "field")
          (name . "SDL_POWERSTATE_CHARGED")
          (value . 4)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_PowerState")
    (location . "/usr/local/include/SDL2/SDL_power.h:49:3")
    (type (tag . ":enum") (name . "") (id . 155)))
  ((tag . "function") (name . "SDL_GetPowerInfo") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_power.h:65:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "secs")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "pct")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . "SDL_PowerState")))
  ((tag . "enum") (ns . 0) (name . "") (id . 156)
    (location . "/usr/local/include/SDL2/SDL_render.h:64:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_RENDERER_SOFTWARE")
          (value . 1))
        ((tag . "field")
          (name . "SDL_RENDERER_ACCELERATED")
          (value . 2))
        ((tag . "field")
          (name . "SDL_RENDERER_PRESENTVSYNC")
          (value . 4))
        ((tag . "field")
          (name . "SDL_RENDERER_TARGETTEXTURE")
          (value . 8)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_RendererFlags")
    (location . "/usr/local/include/SDL2/SDL_render.h:73:3")
    (type (tag . ":enum") (name . "") (id . 156)))
  ((tag . "struct") (ns . 0) (name . "SDL_RendererInfo") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:78:16")
    (bit-size . 704) (bit-alignment . 64)
    (fields
      .
      #(((tag . "field") (name . "name") (bit-offset . 0) (bit-size . 64)
          (bit-alignment . 64)
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "field") (name . "flags") (bit-offset . 64) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "Uint32")))
        ((tag . "field") (name . "num_texture_formats") (bit-offset . 96)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . "Uint32")))
        ((tag . "field") (name . "texture_formats") (bit-offset . 128)
          (bit-size . 512) (bit-alignment . 32)
          (type (tag . ":array") (type (tag . "Uint32")) (size . 16)))
        ((tag . "field") (name . "max_texture_width") (bit-offset . 640)
          (bit-size . 32) (bit-alignment . 32)
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "field") (name . "max_texture_height") (bit-offset . 672)
          (bit-size . 32) (bit-alignment . 32)
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_RendererInfo")
    (location . "/usr/local/include/SDL2/SDL_render.h:86:3")
    (type
      (tag . ":struct")
      (name . "SDL_RendererInfo")
      (id . 157)))
  ((tag . "enum") (ns . 0) (name . "") (id . 158)
    (location . "/usr/local/include/SDL2/SDL_render.h:91:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_TEXTUREACCESS_STATIC")
          (value . 0))
        ((tag . "field")
          (name . "SDL_TEXTUREACCESS_STREAMING")
          (value . 1))
        ((tag . "field")
          (name . "SDL_TEXTUREACCESS_TARGET")
          (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TextureAccess")
    (location . "/usr/local/include/SDL2/SDL_render.h:96:3")
    (type (tag . ":enum") (name . "") (id . 158)))
  ((tag . "enum") (ns . 0) (name . "") (id . 159)
    (location . "/usr/local/include/SDL2/SDL_render.h:101:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_TEXTUREMODULATE_NONE")
          (value . 0))
        ((tag . "field")
          (name . "SDL_TEXTUREMODULATE_COLOR")
          (value . 1))
        ((tag . "field")
          (name . "SDL_TEXTUREMODULATE_ALPHA")
          (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TextureModulate")
    (location . "/usr/local/include/SDL2/SDL_render.h:106:3")
    (type (tag . ":enum") (name . "") (id . 159)))
  ((tag . "enum") (ns . 0) (name . "") (id . 160)
    (location . "/usr/local/include/SDL2/SDL_render.h:111:9")
    (fields
      .
      #(((tag . "field") (name . "SDL_FLIP_NONE") (value . 0))
        ((tag . "field") (name . "SDL_FLIP_HORIZONTAL") (value . 1))
        ((tag . "field")
          (name . "SDL_FLIP_VERTICAL")
          (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_RendererFlip")
    (location . "/usr/local/include/SDL2/SDL_render.h:116:3")
    (type (tag . ":enum") (name . "") (id . 160)))
  ((tag . "struct") (ns . 0) (name . "SDL_Renderer") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:121:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Renderer")
    (location . "/usr/local/include/SDL2/SDL_render.h:122:29")
    (type (tag . "struct") (ns . 0) (name . "SDL_Renderer") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_render.h:121:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "struct") (ns . 0) (name . "SDL_Texture") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:127:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Texture")
    (location . "/usr/local/include/SDL2/SDL_render.h:128:28")
    (type (tag . "struct") (ns . 0) (name . "SDL_Texture") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_render.h:127:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "function") (name . "SDL_GetNumRenderDrivers") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:144:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetRenderDriverInfo") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:158:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "index")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "info")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_RendererInfo"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_CreateWindowAndRenderer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:172:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "width")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "height")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "window_flags")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "window")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "SDL_Window")))))
        ((tag . "parameter")
          (name . "renderer")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . "SDL_Renderer")))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_CreateRenderer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:191:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "index")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Renderer"))))
  ((tag . "function") (name . "SDL_CreateSoftwareRenderer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:204:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Renderer"))))
  ((tag . "function") (name . "SDL_GetRenderer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:209:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Renderer"))))
  ((tag . "function") (name . "SDL_GetRendererInfo") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:214:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "info")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_RendererInfo"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetRendererOutputSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:220:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_CreateTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:242:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "format")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "access")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "w")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Texture"))))
  ((tag . "function") (name . "SDL_CreateTextureFromSurface") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:260:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "surface")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Texture"))))
  ((tag . "function") (name . "SDL_QueryTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:275:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "format")
          (type (tag . ":pointer") (type (tag . "Uint32"))))
        ((tag . "parameter")
          (name . "access")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetTextureColorMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:292:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter") (name . "r") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "g") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "b") (type (tag . "Uint8")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetTextureColorMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:308:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "r")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "g")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "b")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetTextureAlphaMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:323:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "alpha")
          (type (tag . "Uint8")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetTextureAlphaMod") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:336:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "alpha")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetTextureBlendMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:353:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "blendMode")
          (type (tag . "SDL_BlendMode")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetTextureBlendMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:366:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "blendMode")
          (type (tag . ":pointer") (type (tag . "SDL_BlendMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UpdateTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:385:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "pixels")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "pitch")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UpdateYUVTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:408:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "Yplane")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "Ypitch")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "Uplane")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "Upitch")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "Vplane")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "Vpitch")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_LockTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:429:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "pixels")
          (type
            (tag . ":pointer")
            (type (tag . ":pointer") (type (tag . ":void")))))
        ((tag . "parameter")
          (name . "pitch")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_UnlockTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:438:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_RenderTargetSupported") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:447:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_SetRenderTarget") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:459:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetRenderTarget") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:469:39")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Texture"))))
  ((tag . "function") (name . "SDL_RenderSetLogicalSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:494:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "w")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderGetLogicalSize") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:505:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":pointer")
            (type (tag . ":int") (bit-size . 32) (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":pointer")
            (type
              (tag . ":int")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_RenderSetIntegerScale") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:519:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "enable")
          (type (tag . "SDL_bool")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderGetIntegerScale") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:529:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_RenderSetViewport") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:546:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderGetViewport") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:554:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_RenderSetClipRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:568:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderGetClipRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:580:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_RenderIsClipEnabled") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:590:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_RenderSetScale") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:611:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "scaleX")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "scaleY")
          (type
            (tag . ":float")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderGetScale") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:623:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "scaleX")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "scaleY")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SetRenderDrawColor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:638:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter") (name . "r") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "g") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "b") (type (tag . "Uint8")))
        ((tag . "parameter") (name . "a") (type (tag . "Uint8")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetRenderDrawColor") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:654:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "r")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "g")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "b")
          (type (tag . ":pointer") (type (tag . "Uint8"))))
        ((tag . "parameter")
          (name . "a")
          (type (tag . ":pointer") (type (tag . "Uint8"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SetRenderDrawBlendMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:671:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "blendMode")
          (type (tag . "SDL_BlendMode")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetRenderDrawBlendMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:684:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "blendMode")
          (type (tag . ":pointer") (type (tag . "SDL_BlendMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderClear") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:695:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderDrawPoint") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:706:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "x")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderDrawPoints") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:718:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "points")
          (type (tag . ":pointer") (type (tag . "SDL_Point"))))
        ((tag . "parameter")
          (name . "count")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderDrawLine") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:733:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "x1")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y1")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "x2")
          (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y2")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderDrawLines") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:745:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "points")
          (type (tag . ":pointer") (type (tag . "SDL_Point"))))
        ((tag . "parameter")
          (name . "count")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderDrawRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:757:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderDrawRects") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:769:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rects")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "count")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderFillRect") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:782:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderFillRects") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:794:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rects")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "count")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderCopy") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:810:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "srcrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "dstrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderCopyEx") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:830:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "srcrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "dstrect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "angle")
          (type
            (tag . ":double")
            (bit-size . 64)
            (bit-alignment . 64)))
        ((tag . "parameter")
          (name . "center")
          (type (tag . ":pointer") (type (tag . "SDL_Point"))))
        ((tag . "parameter")
          (name . "flip")
          (type (tag . "SDL_RendererFlip")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderReadPixels") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:853:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))
        ((tag . "parameter")
          (name . "rect")
          (type (tag . ":pointer") (type (tag . "SDL_Rect"))))
        ((tag . "parameter")
          (name . "format")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "pixels")
          (type (tag . ":pointer") (type (tag . ":void"))))
        ((tag . "parameter")
          (name . "pitch")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderPresent") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:861:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_DestroyTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:869:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_DestroyRenderer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:877:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GL_BindTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:890:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))
        ((tag . "parameter")
          (name . "texw")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "texh")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GL_UnbindTexture") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:899:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "texture")
          (type (tag . ":pointer") (type (tag . "SDL_Texture"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_RenderGetMetalLayer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:910:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "function") (name . "SDL_RenderGetMetalCommandEncoder") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_render.h:921:31")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "renderer")
          (type (tag . ":pointer") (type (tag . "SDL_Renderer"))))))
    (return-type (tag . ":pointer") (type (tag . ":void"))))
  ((tag . "struct") (ns . 0) (name . "_SDL_Sensor") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:51:8")
    (bit-size . 0) (bit-alignment . 0) (fields . #()))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_Sensor")
    (location . "/usr/local/include/SDL2/SDL_sensor.h:52:28")
    (type (tag . "struct") (ns . 0) (name . "_SDL_Sensor") (id . 0)
      (location . "/usr/local/include/SDL2/SDL_sensor.h:51:8")
      (bit-size . 0) (bit-alignment . 0) (fields . #())))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_SensorID")
    (location . "/usr/local/include/SDL2/SDL_sensor.h:60:16")
    (type (tag . "Sint32")))
  ((tag . "enum") (ns . 0) (name . "") (id . 164)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:69:9")
    (fields
      .
      #(((tag . "field")
          (name . "SDL_SENSOR_INVALID")
          (value . 4294967295))
        ((tag . "field") (name . "SDL_SENSOR_UNKNOWN") (value . 0))
        ((tag . "field") (name . "SDL_SENSOR_ACCEL") (value . 1))
        ((tag . "field") (name . "SDL_SENSOR_GYRO") (value . 2)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_SensorType")
    (location . "/usr/local/include/SDL2/SDL_sensor.h:75:3")
    (type (tag . ":enum") (name . "") (id . 164)))
  ((tag . "function") (name . "SDL_NumSensors") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:127:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SensorGetDeviceName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:136:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_SensorGetDeviceType") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:145:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_SensorType")))
  ((tag . "function") (name . "SDL_SensorGetDeviceNonPortableType") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:154:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SensorGetDeviceInstanceID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:163:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type (tag . "SDL_SensorID")))
  ((tag . "function") (name . "SDL_SensorOpen") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:172:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "device_index")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Sensor"))))
  ((tag . "function") (name . "SDL_SensorFromInstanceID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:177:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "instance_id")
          (type (tag . "SDL_SensorID")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Sensor"))))
  ((tag . "function") (name . "SDL_SensorGetName") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:184:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sensor")
          (type (tag . ":pointer") (type (tag . "SDL_Sensor"))))))
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_SensorGetType") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:193:40")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sensor")
          (type (tag . ":pointer") (type (tag . "SDL_Sensor"))))))
    (return-type (tag . "SDL_SensorType")))
  ((tag . "function") (name . "SDL_SensorGetNonPortableType") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:202:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sensor")
          (type (tag . ":pointer") (type (tag . "SDL_Sensor"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SensorGetInstanceID") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:211:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sensor")
          (type (tag . ":pointer") (type (tag . "SDL_Sensor"))))))
    (return-type (tag . "SDL_SensorID")))
  ((tag . "function") (name . "SDL_SensorGetData") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:224:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sensor")
          (type (tag . ":pointer") (type (tag . "SDL_Sensor"))))
        ((tag . "parameter")
          (name . "data")
          (type
            (tag . ":pointer")
            (type
              (tag . ":float")
              (bit-size . 32)
              (bit-alignment . 32))))
        ((tag . "parameter")
          (name . "num_values")
          (type
            (tag . ":int")
            (bit-size . 32)
            (bit-alignment . 32)))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_SensorClose") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:229:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "sensor")
          (type (tag . ":pointer") (type (tag . "SDL_Sensor"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_SensorUpdate") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_sensor.h:238:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_CreateShapedWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_shape.h:66:38")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "title")
          (type
            (tag . ":pointer")
            (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
        ((tag . "parameter")
          (name . "x")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "y")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "w")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "h")
          (type
            (tag . ":unsigned-int")
            (bit-size . 32)
            (bit-alignment . 32)))
        ((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":pointer")
      (type (tag . "SDL_Window"))))
  ((tag . "function") (name . "SDL_IsShapedWindow") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_shape.h:77:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))))
    (return-type (tag . "SDL_bool")))
  ((tag . "enum") (ns . 0) (name . "") (id . 165)
    (location . "/usr/local/include/SDL2/SDL_shape.h:80:9")
    (fields
      .
      #(((tag . "field") (name . "ShapeModeDefault") (value . 0))
        ((tag . "field")
          (name . "ShapeModeBinarizeAlpha")
          (value . 1))
        ((tag . "field")
          (name . "ShapeModeReverseBinarizeAlpha")
          (value . 2))
        ((tag . "field")
          (name . "ShapeModeColorKey")
          (value . 3)))))
  ((tag . "typedef")
    (ns . 0)
    (name . "WindowShapeMode")
    (location . "/usr/local/include/SDL2/SDL_shape.h:89:3")
    (type (tag . ":enum") (name . "") (id . 165)))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_WindowShapeParams")
    (location . "/usr/local/include/SDL2/SDL_shape.h:98:3")
    (type (tag . "union") (ns . 0) (name . "") (id . 166)
      (location . "/usr/local/include/SDL2/SDL_shape.h:94:9")
      (bit-size . 32) (bit-alignment . 8)
      (fields
        .
        #(((tag . "field") (name . "binarizationCutoff") (bit-offset . 0)
            (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
          ((tag . "field") (name . "colorKey") (bit-offset . 0) (bit-size . 32)
            (bit-alignment . 8) (type (tag . "SDL_Color")))))))
  ((tag . "struct") (ns . 0) (name . "SDL_WindowShapeMode") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_shape.h:101:16")
    (bit-size . 64) (bit-alignment . 32)
    (fields
      .
      #(((tag . "field") (name . "mode") (bit-offset . 0) (bit-size . 32)
          (bit-alignment . 32) (type (tag . "WindowShapeMode")))
        ((tag . "field") (name . "parameters") (bit-offset . 32) (bit-size . 32)
          (bit-alignment . 8)
          (type (tag . "SDL_WindowShapeParams"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_WindowShapeMode")
    (location . "/usr/local/include/SDL2/SDL_shape.h:106:3")
    (type
      (tag . ":struct")
      (name . "SDL_WindowShapeMode")
      (id . 167)))
  ((tag . "function") (name . "SDL_SetWindowShape") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_shape.h:121:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "shape")
          (type (tag . ":pointer") (type (tag . "SDL_Surface"))))
        ((tag . "parameter")
          (name . "shape_mode")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_WindowShapeMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_GetShapedWindowMode") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_shape.h:136:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "window")
          (type (tag . ":pointer") (type (tag . "SDL_Window"))))
        ((tag . "parameter")
          (name . "shape_mode")
          (type
            (tag . ":pointer")
            (type (tag . "SDL_WindowShapeMode"))))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_IsTablet") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_system.h:269:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "SDL_bool")))
  ((tag . "function") (name . "SDL_GetTicks") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_timer.h:45:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_GetPerformanceCounter") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_timer.h:61:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "Uint64")))
  ((tag . "function") (name . "SDL_GetPerformanceFrequency") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_timer.h:66:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . "Uint64")))
  ((tag . "function") (name . "SDL_Delay") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_timer.h:71:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "ms")
          (type (tag . "Uint32")))))
    (return-type (tag . ":void")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TimerCallback")
    (location . "/usr/local/include/SDL2/SDL_timer.h:81:27")
    (type (tag . ":function-pointer")))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_TimerID")
    (location . "/usr/local/include/SDL2/SDL_timer.h:86:13")
    (type (tag . ":int") (bit-size . 32) (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_AddTimer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_timer.h:93:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "interval")
          (type (tag . "Uint32")))
        ((tag . "parameter")
          (name . "callback")
          (type (tag . "SDL_TimerCallback")))
        ((tag . "parameter")
          (name . "param")
          (type (tag . ":pointer") (type (tag . ":void"))))))
    (return-type (tag . "SDL_TimerID")))
  ((tag . "function") (name . "SDL_RemoveTimer") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_timer.h:104:34")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "id")
          (type (tag . "SDL_TimerID")))))
    (return-type (tag . "SDL_bool")))
  ((tag . "struct") (ns . 0) (name . "SDL_version") (id . 0)
    (location . "/usr/local/include/SDL2/SDL_version.h:51:16")
    (bit-size . 24) (bit-alignment . 8)
    (fields
      .
      #(((tag . "field") (name . "major") (bit-offset . 0)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "minor") (bit-offset . 8)
          (bit-size . 8) (bit-alignment . 8) (type (tag . "Uint8")))
        ((tag . "field") (name . "patch") (bit-offset . 16)
          (bit-size . 8) (bit-alignment . 8)
          (type (tag . "Uint8"))))))
  ((tag . "typedef")
    (ns . 0)
    (name . "SDL_version")
    (location . "/usr/local/include/SDL2/SDL_version.h:56:3")
    (type (tag . ":struct") (name . "SDL_version") (id . 168)))
  ((tag . "function") (name . "SDL_GetVersion") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_version.h:133:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "ver")
          (type (tag . ":pointer") (type (tag . "SDL_version"))))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_GetRevision") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_version.h:142:37")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":pointer")
      (type (tag . ":char") (bit-size . 8) (bit-alignment . 8))))
  ((tag . "function") (name . "SDL_GetRevisionNumber") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL_version.h:151:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #())
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_Init") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL.h:95:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_InitSubSystem") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL.h:106:29")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type
      (tag . ":int")
      (bit-size . 32)
      (bit-alignment . 32)))
  ((tag . "function") (name . "SDL_QuitSubSystem") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL.h:111:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type (tag . ":void")))
  ((tag . "function") (name . "SDL_WasInit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL.h:119:32")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters
      .
      #(((tag . "parameter")
          (name . "flags")
          (type (tag . "Uint32")))))
    (return-type (tag . "Uint32")))
  ((tag . "function") (name . "SDL_Quit") (ns . 0)
    (location . "/usr/local/include/SDL2/SDL.h:125:30")
    (variadic . #f) (inline . #f) (storage-class . "extern")
    (parameters . #()) (return-type (tag . ":void"))))
